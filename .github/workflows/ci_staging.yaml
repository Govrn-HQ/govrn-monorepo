name: Ci branch

on:
  pull_request:
    branches:
      - 'staging'
  push:
    branches:
      - 'staging'

env:
  BASE: ${{ github.ref == 'refs/heads/staging' && 'origin/master' || 'origin/staging' }}
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
  SKYNET_JWT: ${{ secrets.SKYNET_JWT }}
  PROTOCOL_FRONTEND_STAGING_SEED: ${{ secrets.PROTOCOL_FRONTEND_STAGING_SEED }}
  CONTRIBUTION_REPORT_STAGING_SEED: ${{ secrets.CONTRIBUTION_REPORT_STAGING_SEED }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          submodules: recursive
      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
      - run: yarn install
      - run: npm install -g @graphprotocol/graph-cli
      - run: npx nx affected:lint --base $BASE
      - name: Test
        run: npx nx affected:test --base $BASE
      - name: Build
        run: npx nx affected:build --base $BASE

  docker-build:
    if: ${{ github.ref == 'refs/heads/staging' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
      - run: yarn install
      - run: npm install -g @graphprotocol/graph-cli
      - name: Create env file
        run: |
          touch .env
          echo VITE_PROTOCOL_BASE_URL=https://api-staging.govrn.app  >> .env
          echo VITE_PROTOCOL_URL=https://api-staging.govrn.app/graphql  >> .env
          echo VITE_URL=${{secrets.VITE_URL_STAGING}} >> .env
          echo VITE_INFURA_PROJECT_ID=${{secrets.VITE_INFURA_PROJECT_ID_STAGING}}  >> .env
          echo VITE_INFURA_PROJECT_SECRET=${{secrets.VITE_INFURA_PROJECT_SECRET_STAGING}} >> .env
          echo VITE_LINEAR_REDIRECT_URI=https://api-staging.govrn.app/linear/oauth  >> .env
          echo VITE_LINEAR_CLIENT_ID=0cc73e0a21f8cd7087d78634a9e4e0ce >> .env
      - name: Build
        run: npx nx affected:build --configuration production --base $BASE
      - name: Docker Build
        run: npx nx affected --target docker-build --base $BASE --parallel --max-parallel=3
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Login
        run: npx nx affected --target docker-login --base $BASE --parallel --max-parallel=3
      - name: Docker Push
        run: npx nx affected --target docker-push --base $BASE --parallel --max-parallel=3
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy
        run: npx nx affected --target deployStaging --base $BASE --parallel --max-parallel=3
      - name: Verify
        run: npx nx affected --target verify --base $BASE --parallel --max-parallel=3
