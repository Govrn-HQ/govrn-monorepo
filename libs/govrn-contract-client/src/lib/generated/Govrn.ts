/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Govrn {
  export type AttestationStruct = {
    contribution: BigNumberish;
    confidence: BigNumberish;
    dateOfSubmission: BigNumberish;
  };

  export type AttestationStructOutput = [BigNumber, number, BigNumber] & {
    contribution: BigNumber;
    confidence: number;
    dateOfSubmission: BigNumber;
  };

  export type ContributionStruct = {
    owner: string;
    name: BytesLike;
    details: BytesLike;
    dateOfSubmission: BigNumberish;
    dateOfEngagement: BigNumberish;
    proof: BytesLike;
  };

  export type ContributionStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    owner: string;
    name: string;
    details: string;
    dateOfSubmission: BigNumber;
    dateOfEngagement: BigNumber;
    proof: string;
  };

  export type BulkContributionStruct = {
    contribution: Govrn.ContributionStruct;
  };

  export type BulkContributionStructOutput = [
    Govrn.ContributionStructOutput
  ] & { contribution: Govrn.ContributionStructOutput };
}

export interface GovrnInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "_attest(uint256,uint8)": FunctionFragment;
    "attest(uint256,uint8)": FunctionFragment;
    "attestations(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bulkAttest((uint256,uint8,uint256)[])": FunctionFragment;
    "bulkMint(((address,bytes,bytes,uint256,uint256,bytes))[])": FunctionFragment;
    "burnContribution(uint256)": FunctionFragment;
    "contributionCount()": FunctionFragment;
    "contributions(uint256)": FunctionFragment;
    "mint(bytes,bytes,uint256,uint256,bytes)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "permitAttest(address,uint256,uint8,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "revokeAttestatation(uint256)": FunctionFragment;
    "revokePeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "VERSION"
      | "_attest"
      | "attest"
      | "attestations"
      | "balanceOf"
      | "bulkAttest"
      | "bulkMint"
      | "burnContribution"
      | "contributionCount"
      | "contributions"
      | "mint"
      | "nonces"
      | "ownerOf"
      | "permitAttest"
      | "revokeAttestatation"
      | "revokePeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_attest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bulkAttest",
    values: [Govrn.AttestationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkMint",
    values: [Govrn.BulkContributionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnContribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permitAttest",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAttestatation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_attest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkAttest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitAttest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAttestatation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePeriod",
    data: BytesLike
  ): Result;

  events: {
    "Attest(address,uint256,uint8)": EventFragment;
    "Mint(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export interface AttestEventObject {
  attestor: string;
  contribution: BigNumber;
  confidence: number;
}
export type AttestEvent = TypedEvent<
  [string, BigNumber, number],
  AttestEventObject
>;

export type AttestEventFilter = TypedEventFilter<AttestEvent>;

export interface MintEventObject {
  owner: string;
  id: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface Govrn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovrnInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    _attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        contribution: BigNumber;
        confidence: number;
        dateOfSubmission: BigNumber;
      }
    >;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, string] & {
        owner: string;
        name: string;
        details: string;
        dateOfSubmission: BigNumber;
        dateOfEngagement: BigNumber;
        proof: string;
      }
    >;

    mint(
      _name: BytesLike,
      _details: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  _attest(
    _contribution: BigNumberish,
    _confidence: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attest(
    _contribution: BigNumberish,
    _confidence: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attestations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      contribution: BigNumber;
      confidence: number;
      dateOfSubmission: BigNumber;
    }
  >;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bulkAttest(
    _attestations: Govrn.AttestationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkMint(
    _contributions: Govrn.BulkContributionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnContribution(
    _contribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributionCount(overrides?: CallOverrides): Promise<BigNumber>;

  contributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, string] & {
      owner: string;
      name: string;
      details: string;
      dateOfSubmission: BigNumber;
      dateOfEngagement: BigNumber;
      proof: string;
    }
  >;

  mint(
    _name: BytesLike,
    _details: BytesLike,
    _dateOfSubmission: BigNumberish,
    _dateOfEngagement: BigNumberish,
    _proof: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  permitAttest(
    _attestor: string,
    _contribution: BigNumberish,
    _confidence: BigNumberish,
    _dateOfSubmission: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAttestatation(
    _contribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    _attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        contribution: BigNumber;
        confidence: number;
        dateOfSubmission: BigNumber;
      }
    >;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, string] & {
        owner: string;
        name: string;
        details: string;
        dateOfSubmission: BigNumber;
        dateOfEngagement: BigNumber;
        proof: string;
      }
    >;

    mint(
      _name: BytesLike,
      _details: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Attest(address,uint256,uint8)"(
      attestor?: string | null,
      contribution?: null,
      confidence?: null
    ): AttestEventFilter;
    Attest(
      attestor?: string | null,
      contribution?: null,
      confidence?: null
    ): AttestEventFilter;

    "Mint(address,uint256)"(owner?: string | null, id?: null): MintEventFilter;
    Mint(owner?: string | null, id?: null): MintEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _name: BytesLike,
      _details: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _name: BytesLike,
      _details: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
