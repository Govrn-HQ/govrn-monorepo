/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace Govrn {
  export type AttestationStruct = {
    contribution: BigNumberish;
    confidence: BigNumberish;
    dateOfSubmission: BigNumberish;
  };

  export type AttestationStructOutput = [BigNumber, number, BigNumber] & {
    contribution: BigNumber;
    confidence: number;
    dateOfSubmission: BigNumber;
  };

  export type ContributionStruct = {
    owner: string;
    detailsUri: BytesLike;
    dateOfSubmission: BigNumberish;
    dateOfEngagement: BigNumberish;
  };

  export type ContributionStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
  ] & {
    owner: string;
    detailsUri: string;
    dateOfSubmission: BigNumber;
    dateOfEngagement: BigNumber;
  };

  export type BulkContributionStruct = {
    contribution: Govrn.ContributionStruct;
  };

  export type BulkContributionStructOutput = [
    Govrn.ContributionStructOutput,
  ] & { contribution: Govrn.ContributionStructOutput };

  export type PermitAttestationStruct = {
    attestor: string;
    contribution: BigNumberish;
    confidence: BigNumberish;
    dateOfSubmission: BigNumberish;
    deadline: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type PermitAttestationStructOutput = [
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
  ] & {
    attestor: string;
    contribution: BigNumber;
    confidence: number;
    dateOfSubmission: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
  };
}

export interface GovrnInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'attest(uint256,uint8)': FunctionFragment;
    'attestations(uint256,address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'bulkAttest((uint256,uint8,uint256)[])': FunctionFragment;
    'bulkMint(((address,bytes,uint256,uint256))[])': FunctionFragment;
    'bulkPermitAttest((address,uint256,uint8,uint256,uint256,uint8,bytes32,bytes32)[])': FunctionFragment;
    'bulkRevokeAttestation(uint256[])': FunctionFragment;
    'burnContribution(uint256)': FunctionFragment;
    'contributionCount()': FunctionFragment;
    'contributions(uint256)': FunctionFragment;
    'initialize(uint256)': FunctionFragment;
    'mint(bytes,uint256,uint256)': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'permitAttest(address,uint256,uint8,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokeAttestatation(uint256)': FunctionFragment;
    'revokePeriod()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'VERSION'
      | 'attest'
      | 'attestations'
      | 'balanceOf'
      | 'bulkAttest'
      | 'bulkMint'
      | 'bulkPermitAttest'
      | 'bulkRevokeAttestation'
      | 'burnContribution'
      | 'contributionCount'
      | 'contributions'
      | 'initialize'
      | 'mint'
      | 'nonces'
      | 'owner'
      | 'ownerOf'
      | 'permitAttest'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'revokeAttestatation'
      | 'revokePeriod'
      | 'transferOwnership'
      | 'upgradeTo'
      | 'upgradeToAndCall',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'attest',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'attestations',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'bulkAttest',
    values: [Govrn.AttestationStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'bulkMint',
    values: [Govrn.BulkContributionStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'bulkPermitAttest',
    values: [Govrn.PermitAttestationStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'bulkRevokeAttestation',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnContribution',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'contributionCount',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'contributions',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BytesLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'permitAttest',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeAttestatation',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokePeriod',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'attest', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'attestations',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bulkAttest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bulkMint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'bulkPermitAttest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bulkRevokeAttestation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burnContribution',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'contributionCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'contributions',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'permitAttest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'revokeAttestatation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'revokePeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike,
  ): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'Attest(address,uint256,uint8)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Mint(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Attest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AttestEventObject {
  attestor: string;
  contribution: BigNumber;
  confidence: number;
}
export type AttestEvent = TypedEvent<
  [string, BigNumber, number],
  AttestEventObject
>;

export type AttestEventFilter = TypedEventFilter<AttestEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MintEventObject {
  owner: string;
  id: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Govrn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovrnInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, BigNumber] & {
        contribution: BigNumber;
        confidence: number;
        dateOfSubmission: BigNumber;
      }
    >;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    bulkPermitAttest(
      _permitAttestations: Govrn.PermitAttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    bulkRevokeAttestation(
      _contributions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    contributionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        owner: string;
        detailsUri: string;
        dateOfSubmission: BigNumber;
        dateOfEngagement: BigNumber;
      }
    >;

    initialize(
      _revokePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
      _detailsUri: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  attest(
    _contribution: BigNumberish,
    _confidence: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  attestations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, BigNumber] & {
      contribution: BigNumber;
      confidence: number;
      dateOfSubmission: BigNumber;
    }
  >;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bulkAttest(
    _attestations: Govrn.AttestationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  bulkMint(
    _contributions: Govrn.BulkContributionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  bulkPermitAttest(
    _permitAttestations: Govrn.PermitAttestationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  bulkRevokeAttestation(
    _contributions: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  burnContribution(
    _contribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  contributionCount(overrides?: CallOverrides): Promise<BigNumber>;

  contributions(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      owner: string;
      detailsUri: string;
      dateOfSubmission: BigNumber;
      dateOfEngagement: BigNumber;
    }
  >;

  initialize(
    _revokePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mint(
    _detailsUri: BytesLike,
    _dateOfSubmission: BigNumberish,
    _dateOfEngagement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  permitAttest(
    _attestor: string,
    _contribution: BigNumberish,
    _confidence: BigNumberish,
    _dateOfSubmission: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeAttestatation(
    _contribution: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, BigNumber] & {
        contribution: BigNumber;
        confidence: number;
        dateOfSubmission: BigNumber;
      }
    >;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    bulkPermitAttest(
      _permitAttestations: Govrn.PermitAttestationStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    bulkRevokeAttestation(
      _contributions: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    contributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        owner: string;
        detailsUri: string;
        dateOfSubmission: BigNumber;
        dateOfEngagement: BigNumber;
      }
    >;

    initialize(
      _revokePeriod: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    mint(
      _detailsUri: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter;

    'Attest(address,uint256,uint8)'(
      attestor?: string | null,
      contribution?: null,
      confidence?: null,
    ): AttestEventFilter;
    Attest(
      attestor?: string | null,
      contribution?: null,
      confidence?: null,
    ): AttestEventFilter;

    'BeaconUpgraded(address)'(
      beacon?: string | null,
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Mint(address,uint256)'(owner?: string | null, id?: null): MintEventFilter;
    Mint(owner?: string | null, id?: null): MintEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    bulkPermitAttest(
      _permitAttestations: Govrn.PermitAttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    bulkRevokeAttestation(
      _contributions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    contributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _revokePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mint(
      _detailsUri: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attest(
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    attestations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    bulkAttest(
      _attestations: Govrn.AttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    bulkMint(
      _contributions: Govrn.BulkContributionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    bulkPermitAttest(
      _permitAttestations: Govrn.PermitAttestationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    bulkRevokeAttestation(
      _contributions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    burnContribution(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    contributionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _revokePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      _detailsUri: BytesLike,
      _dateOfSubmission: BigNumberish,
      _dateOfEngagement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    permitAttest(
      _attestor: string,
      _contribution: BigNumberish,
      _confidence: BigNumberish,
      _dateOfSubmission: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeAttestatation(
      _contribution: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
