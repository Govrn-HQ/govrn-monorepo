# Job run
fragment JobFieldsFragment on JobRun {
  id
  createdAt
  updatedAt
  completedDate
  name
  startDate
}

query listJobRuns(
  $where: JobRunWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [JobRunOrderByWithRelationInput!]
) {
  result: jobRuns(where: $where, skip: $skip, take: $first, orderBy: $orderBy) {
    ...JobFieldsFragment
  }
}

query getJobRun($where: JobRunWhereUniqueInput!) {
  result: jobRun(where: $where) {
    ...JobFieldsFragment
  }
}

# Issues
mutation bulkCreateIssues(
  $data: [LinearIssueCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyLinearIssue(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

# Linear User
fragment LinearUserFragment on LinearUser {
  active
  displayName
  email
  linear_id
  name
  url
  id
  createdAt
}

mutation upsertLinearUser(
  $create: LinearUserCreateInput!
  $update: LinearUserUpdateInput!
  $where: LinearUserWhereUniqueInput!
) {
  upsertLinearUser(create: $create, update: $update, where: $where) {
    ...LinearUserFragment
  }
}

mutation updateLinearUser(
  $data: LinearUserUpdateInput!
  $where: LinearUserWhereUniqueInput!
) {
  updateLinearUser(data: $data, where: $where) {
    ...LinearUserFragment
  }
}

mutation upsertLinearCycle(
  $create: LinearCycleCreateInput!
  $update: LinearCycleUpdateInput!
  $where: LinearCycleWhereUniqueInput!
) {
  upsertLinearCycle(create: $create, update: $update, where: $where) {
    id
    endsAt
    linear_id
    number
    startsAt
  }
}

mutation upsertLinearProject(
  $create: LinearProjectCreateInput!
  $update: LinearProjectUpdateInput!
  $where: LinearProjectWhereUniqueInput!
) {
  upsertLinearProject(create: $create, update: $update, where: $where) {
    id
    linear_id
    name
  }
}

mutation upsertLinearTeam(
  $create: LinearTeamCreateInput!
  $update: LinearTeamUpdateInput!
  $where: LinearTeamWhereUniqueInput!
) {
  upsertLinearTeam(create: $create, update: $update, where: $where) {
    id
    key
    name
    linear_id
  }
}

# Job Run
mutation createJobRun($data: JobRunCreateInput!) {
  createJobRun(data: $data) {
    completedDate
    startDate
    name
  }
}

# Guild
mutation createGuild($data: GuildCreateInput!) {
  createGuild(data: $data) {
    congrats_channel
    discord_id
    logo
    name
  }
}

mutation deleteGuildUser($where: GuildUserWhereUniqueInput!) {
  deleteGuildUser(where: $where) {
    id
  }
}

# Twitter
fragment TwitterTweetFragment on TwitterTweet {
  id
  updatedAt
  createdAt
  text
  twitter_tweet_id
  twitter_user {
    id
    name
    createdAt
    updatedAt
    username
  }
  contribution {
    ...ContributionFragment
  }
}

mutation bulkCreateTwitterTweet(
  $data: [TwitterTweetCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyTwitterTweet(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

fragment TwitterAccountFragment on TwitterAccount {
  account_name
  createdAt
  guild {
    id
    name
  }
  id
  updatedAt
}

query listTwitterAccounts(
  $where: TwitterAccountWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [TwitterAccountOrderByWithRelationInput!]
) {
  result: twitterAccounts(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...TwitterAccountFragment
  }
}

fragment TwitterUserFragment on TwitterUser {
  createdAt
  updatedAt
  description
  id
  twitter_user_id
  user {
    id
  }
  username
}

mutation upsertTwitterUser(
  $create: TwitterUserCreateInput!
  $update: TwitterUserUpdateInput!
  $where: TwitterUserWhereUniqueInput!
) {
  upsertTwitterUser(create: $create, update: $update, where: $where) {
    ...TwitterUserFragment
  }
}

# User quries
fragment UserFragment on User {
  address
  active
  chain_type {
    id
    name
    createdAt
    updatedAt
  }
  createdAt
  display_name
  full_name
  id
  name
  updatedAt
}

query getUser($where: UserWhereUniqueInput!) {
  result: user(where: $where) {
    ...UserFragment
  }
}

query getUserCustom($id: Float!) {
  result: getUser(id: $id) {
    ...UserFragment
  }
}

query listUsers(
  $where: UserWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [UserOrderByWithRelationInput!]
) {
  result: users(where: $where, skip: $skip, take: $first, orderBy: $orderBy) {
    ...UserFragment
  }
}

query listUserByAddress($address: String!) {
  result: listUserByAddress(address: $address) {
    ...UserFragment
  }
}

mutation updateUser($data: UserUpdateInput!, $where: UserWhereUniqueInput!) {
  updateUser(data: $data, where: $where) {
    ...UserFragment
  }
}

mutation updateUserCustom($data: UserUpdateCustomInput!) {
  updateUserCustom(data: $data) {
    ...UserFragment
  }
}

mutation createUser($data: UserCreateInput!) {
  createUser(data: $data) {
    ...UserFragment
  }
}

mutation createUserCustom($data: UserCreateCustomInput!) {
  createUserCustom(data: $data) {
    ...UserFragment
  }
}

# Contribution quries
fragment ContributionFragment on Contribution {
  activity_type {
    active
    createdAt
    id
    name
    updatedAt
  }
  date_of_engagement
  date_of_submission
  details
  id
  name
  proof
  status {
    createdAt
    id
    name
    updatedAt
  }
  updatedAt
  user {
    address
    createdAt
    display_name
    full_name
    id
    name
    updatedAt
  }
  attestations {
    id
    user_id
  }
}

query getContribution($where: ContributionWhereUniqueInput!) {
  result: contribution(where: $where) {
    ...ContributionFragment
  }
}

query listContributions(
  $where: ContributionWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [ContributionOrderByWithRelationInput!]
) {
  result: contributions(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...ContributionFragment
  }
}

mutation createContribution($data: ContributionCreateInput!) {
  createContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation createUserContribution($data: UserContributionCreateInput!) {
  createUserContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation updateUserContribution($data: UserContributionUpdateInput!) {
  updateUserContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation bulkCreateContribution(
  $data: [ContributionCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyContribution(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

mutation updateContribution(
  $data: ContributionUpdateInput!
  $where: ContributionWhereUniqueInput!
) {
  updateContribution(data: $data, where: $where) {
    ...ContributionFragment
  }
}

# Activity type queries
fragment ActivityTypeFragment on ActivityType {
  active
  createdAt
  id
  name
  updatedAt
}

query listActivityTypes(
  $where: ActivityTypeWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [ActivityTypeOrderByWithRelationInput!]
) {
  result: activityTypes(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...ActivityTypeFragment
  }
}

mutation createActivityType($data: ActivityTypeCreateInput!) {
  createActivityType(data: $data) {
    ...ActivityTypeFragment
  }
}

# Attestations
fragment AttestationFragment on Attestation {
  confidence {
    createdAt
    id
    name
    updatedAt
  }
  contribution {
    activity_type_id
    date_of_engagement
    date_of_submission
    details
    id
    name
    proof
    status_id
    updatedAt
    user_id
  }
  date_of_attestation
  id
  updatedAt
  user {
    name
    address
    id
  }
}

query listAttestations(
  $where: AttestationWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [AttestationOrderByWithRelationInput!]
) {
  result: attestations(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...AttestationFragment
  }
}

mutation createAttestation($data: AttestationCreateInput!) {
  createAttestation(data: $data) {
    ...AttestationFragment
  }
}

mutation bulkCreateAttestation(
  $data: [AttestationCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyAttestation(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

mutation updateAttestation(
  $data: AttestationUpdateInput!
  $where: AttestationWhereUniqueInput!
) {
  updateAttestation(data: $data, where: $where) {
    ...AttestationFragment
  }
}

# Partners
fragment PartnerFragment on Partner {
  contribution {
    activity_type_id
    date_of_engagement
    date_of_submission
    details
    id
    name
    proof
    status_id
    updatedAt
    user_id
  }
  createdAt
  updatedAt
  user {
    name
    address
    id
  }
}

query listPartners(
  $where: PartnerWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [PartnerOrderByWithRelationInput!]
) {
  result: partners(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...PartnerFragment
  }
}

# Custom queries
fragment AttestationFragment on Attestation {
  confidence {
    createdAt
    id
    name
    updatedAt
  }
  contribution {
    activity_type_id
    date_of_engagement
    date_of_submission
    details
    id
    name
    proof
    status_id
    updatedAt
    user_id
  }
  date_of_attestation
  id
  updatedAt
  user {
    name
    address
    id
  }
}

mutation createUserAttestation($data: AttestationUserCreateInput!) {
  createUserAttestation(data: $data) {
    ...AttestationFragment
  }
}
