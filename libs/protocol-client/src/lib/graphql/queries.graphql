
# Job run
fragment LinearJobFieldsFragment on LinearJobRun {
  id
  createdAt
  updatedAt
  completedDate
  startDate
}

query listLinearJobRuns($where: LinearJobRunWhereInput! = {}, $skip: Int! = 0, $first: Int! = 10, $orderBy: [LinearJobRunOrderByWithRelationInput!]) {
    result: linearJobRuns(
        where: $where,
        skip: $skip,
        take: $first,
        orderBy: $orderBy,
    ) {
      ...LinearJobFieldsFragment
    }
}

query getLinearJobRun($where: LinearJobRunWhereUniqueInput!,) {
    result: linearJobRun(
        where: $where,
    ) {
      ...LinearJobFieldsFragment
    }
}

# Issues
mutation bulkCreateIssues($data: [LinearIssueCreateManyInput!]!, $skipDuplicates: Boolean!) {
  createManyLinearIssue(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

# Linear User
fragment LinearUserFragment on LinearUser {
  active
  displayName
  email
  linear_id
  name
  url
  id
  createdAt
}


mutation upsertLinearUser($create: LinearUserCreateInput!, $update:  LinearUserUpdateInput!, $where: LinearUserWhereUniqueInput!) {
  upsertLinearUser(create: $create, update: $update, where: $where) {
    ...LinearUserFragment
  }
}

mutation updateLinearUser($data: LinearUserUpdateInput!, $where: LinearUserWhereUniqueInput!) {
  updateLinearUser(data: $data, where: $where) {
    ...LinearUserFragment
  }
}

mutation upsertLinearCycle($create: LinearCycleCreateInput!, $update:  LinearCycleUpdateInput!, $where: LinearCycleWhereUniqueInput!) {
  upsertLinearCycle(create: $create, update: $update, where: $where) {
    id
    endsAt
    linear_id
    number
    startsAt
  }
}

mutation upsertLinearProject($create: LinearProjectCreateInput!, $update:  LinearProjectUpdateInput!, $where: LinearProjectWhereUniqueInput!) {
  upsertLinearProject(create: $create, update: $update, where: $where) {
    id
    linear_id
    name
  }
}

mutation upsertLinearTeam($create: LinearTeamCreateInput!, $update:  LinearTeamUpdateInput!, $where: LinearTeamWhereUniqueInput!) {
  upsertLinearTeam(create: $create, update: $update, where: $where) {
    id
    key
    name
    linear_id
  }
}

# Linear Job Run
mutation createLinearJobRun($data: LinearJobRunCreateInput!) {
  createLinearJobRun(data: $data) {
    completedDate
    startDate
  }
}

# User quries
fragment UserFragment on User {
  address
  # chain_type
  chain_type_id
  createdAt
  display_name
  full_name
  id
  name
  updatedAt
}

query getUser($where: UserWhereUniqueInput!,) {
    result: user(
        where: $where,
    ) {
      ...UserFragment
    }
}

mutation updateUser($data: UserUpdateInput!, $where: UserWhereUniqueInput!) {
  updateUser(data: $data, where: $where) {
      # activities
      address
      # attestations
      # chain_type
      # contributionPartners
      # contributions
      display_name
      full_name
      # guild_users
      # linear_users
      name
  }
}

# Contribution quries
fragment ContributionFragment on Contribution {
  activity_type {
    active
    createdAt
    id
    name
    updatedAt
  }
  date_of_engagement
  date_of_submission
  details
  id
  name
  proof
  status {
    createdAt
    id
    name
    updatedAt
  }
  updatedAt
  user {
    address
    createdAt
    display_name
    full_name
    id
    name
    updatedAt
  }
}

query getContribution($where: ContributionWhereUniqueInput!,) {
    result: contribution(
        where: $where,
    ) {
      ...ContributionFragment
    }
}

query listContributions($where: ContributionWhereInput! = {}, $skip: Int! = 0, $first: Int! = 10, $orderBy: [ContributionOrderByWithRelationInput!]) {
    result: contributions(
        where: $where,
        skip: $skip,
        take: $first,
        orderBy: $orderBy,
    ) {
      ...ContributionFragment
    }
}

mutation createContribution($data: ContributionCreateInput!) {
  createContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation updateContribution($data: ContributionUpdateInput!, $where: ContributionWhereUniqueInput!) {
  updateContribution(data: $data, where: $where) {
    ...ContributionFragment
  }
}

# Activity type queries
fragment ActivityTypeFragment on ActivityType {
  active
  createdAt
  id
  name
  updatedAt
}

query listActivityTypes($where: ActivityTypeWhereInput! = {}, $skip: Int! = 0, $first: Int! = 10, $orderBy: [ActivityTypeOrderByWithRelationInput!]) {
    result: activityTypes(
        where: $where,
        skip: $skip,
        take: $first,
        orderBy: $orderBy,
    ) {
      ...ActivityTypeFragment
    }
}

# Attestations
fragment AttestationFragment on Attestation {
  confidence {
    createdAt
    id
    name
    updatedAt
  }
  contribution {
    activity_type_id
    date_of_engagement
    date_of_submission
    details
    id
    name
    proof
    status_id
    updatedAt
    user_id
  }
  date_of_attestation
  id
  updatedAt
  user {
    name
    address
    id
  }
}

query listAttestations($where: AttestationWhereInput! = {}, $skip: Int! = 0, $first: Int! = 10, $orderBy: [AttestationOrderByWithRelationInput!]) {
    result: attestations(
        where: $where,
        skip: $skip,
        take: $first,
        orderBy: $orderBy,
    ) {
      ...AttestationFragment
    }
}


mutation createAttestation($data: AttestationCreateInput!) {
  createAttestation(data: $data) {
    ...AttestationFragment
  }
}

mutation updateAttestation($data: AttestationUpdateInput!, $where: AttestationWhereUniqueInput!) {
  updateAttestation(data: $data, where: $where) {
    ...AttestationFragment
  }
}


