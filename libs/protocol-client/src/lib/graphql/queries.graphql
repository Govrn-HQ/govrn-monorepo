# Job run
fragment JobFieldsFragment on JobRun {
  id
  createdAt
  updatedAt
  completedDate
  name
  startDate
}

query listJobRuns(
  $where: JobRunWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [JobRunOrderByWithRelationInput!]
) {
  result: jobRuns(where: $where, skip: $skip, take: $first, orderBy: $orderBy) {
    ...JobFieldsFragment
  }
}

query getJobRun($where: JobRunWhereUniqueInput!) {
  result: jobRun(where: $where) {
    ...JobFieldsFragment
  }
}

# Issues
fragment LinearIssueFragment on LinearIssue {
  id
  completedAt
  createdAt
}

query listLinearIssues(
  $where: LinearIssueWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [LinearIssueOrderByWithRelationInput!]
) {
  result: linearIssues(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...LinearIssueFragment
  }
}

mutation bulkCreateIssues(
  $data: [LinearIssueCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyLinearIssue(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

# Linear User
fragment LinearUserFragment on LinearUser {
  id
  active
  displayName
  email
  linear_id
  name
  url
  createdAt
  access_token
  active_token
  user_id
}

query listLinearUsers(
  $where: LinearUserWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [LinearUserOrderByWithRelationInput!]
) {
  result: linearUsers(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...LinearUserFragment
  }
}

mutation upsertLinearUser(
  $create: LinearUserCreateInput!
  $update: LinearUserUpdateInput!
  $where: LinearUserWhereUniqueInput!
) {
  upsertOneLinearUser(create: $create, update: $update, where: $where) {
    ...LinearUserFragment
  }
}

mutation updateLinearUser(
  $data: LinearUserUpdateInput!
  $where: LinearUserWhereUniqueInput!
) {
  updateOneLinearUser(data: $data, where: $where) {
    ...LinearUserFragment
  }
}

mutation upsertLinearCycle(
  $create: LinearCycleCreateInput!
  $update: LinearCycleUpdateInput!
  $where: LinearCycleWhereUniqueInput!
) {
  upsertOneLinearCycle(create: $create, update: $update, where: $where) {
    id
    endsAt
    linear_id
    number
    startsAt
  }
}

mutation upsertLinearProject(
  $create: LinearProjectCreateInput!
  $update: LinearProjectUpdateInput!
  $where: LinearProjectWhereUniqueInput!
) {
  upsertOneLinearProject(create: $create, update: $update, where: $where) {
    id
    linear_id
    name
  }
}

mutation upsertLinearTeam(
  $create: LinearTeamCreateInput!
  $update: LinearTeamUpdateInput!
  $where: LinearTeamWhereUniqueInput!
) {
  upsertOneLinearTeam(create: $create, update: $update, where: $where) {
    id
    key
    name
    linear_id
  }
}

# Job Run
mutation createJobRun($data: JobRunCreateInput!) {
  createOneJobRun(data: $data) {
    completedDate
    startDate
    name
  }
}

# Guild
fragment GuildFragment on Guild {
  congrats_channel
  createdAt
  discord_id
  id
  logo
  name
  updatedAt
  contribution_reporting_channel
  status
}

mutation createGuild($data: GuildCreateInput!) {
  createOneGuild(data: $data) {
    congrats_channel
    discord_id
    logo
    name
  }
}

query getGuild($where: GuildWhereUniqueInput!) {
  result: guild(where: $where) {
    ...GuildFragment
  }
}

mutation updateGuildCustom(
  $data: GuildUpdateCustomInput!
  $where: GuildCustomWhereInput!
) {
  updateGuildCustom(data: $data, where: $where) {
    ...GuildFragment
  }
}

query listGuilds(
  $where: GuildWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [GuildOrderByWithRelationInput!]
) {
  result: guilds(where: $where, skip: $skip, take: $first, orderBy: $orderBy) {
    ...GuildFragment
  }
}

query getActiveGuildUsersAverage($where: GetActiveUsersInput!) {
  result: getActiveGuildUsersAverage(where: $where)
}

# GuildActivityType
fragment GuildActivityTypeFragment on GuildActivityType {
  id
  guild {
    id
    name
  }
  activity_type {
    id
    name
  }
}

query listGuildActivityTypes(
  $where: GuildActivityTypeWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [GuildActivityTypeOrderByWithRelationInput!]
) {
  result: guildActivityTypes(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...GuildActivityTypeFragment
  }
}
# Guild Contribution
fragment GuildContributionFragment on GuildContribution {
  id
  createdAt
  updatedAt
  verified
  guild {
    id
    name
  }
  contribution {
    id
    name
  }
  attestation_threshold
  verificationStatus {
    id
    name
  }
}

query getGuildContribution($where: GuildContributionWhereUniqueInput!) {
  result: guildContribution(where: $where) {
    ...GuildContributionFragment
  }
}



# GuildUser
fragment GuildUserFragment on GuildUser {
  id
  createdAt
  updatedAt
  favorite
  user_id
  user {
    name
    display_name
    address
  }
  guild {
    id
    name
  }
  membershipStatus {
    id
    createdAt
    updatedAt
    name
  }
}

mutation createGuildUserCustom($data: GuildUserCreateCustomInput!) {
  createGuildUserCustom(data: $data) {
    id
    guild_id
  }
}

mutation deleteGuildUser($where: GuildUserWhereUniqueInput!) {
  deleteOneGuildUser(where: $where) {
    id
  }
}

query listGuildUsers(
  $where: GuildUserWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [GuildUserOrderByWithRelationInput!]
) {
  result: guildUsers(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...GuildUserFragment
  }
}

mutation updateGuildUserCustom($data: GuildUserUpdateCustomInput!) {
  updateGuildUserCustom(data: $data) {
    ...GuildUserFragment
  }
}

# GuildImport
fragment GuildImportFragment on GuildImport {
  id
  createdAt
  updatedAt
  guild_id
  guild {
    id
    name
  }
  integration_type_id
  integration_type {
    id
    name
  }
  authentication_token
  import_status {
    id
    createdAt
    updatedAt
    name
  }
  users {
    user_id
  }
}

query listGuildImports(
  $where: GuildImportWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [GuildImportOrderByWithRelationInput!]
) {
  result: guildImports(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...GuildImportFragment
  }
}

# Twitter
fragment TwitterTweetFragment on TwitterTweet {
  id
  updatedAt
  createdAt
  text
  twitter_tweet_id
  twitter_user {
    id
    name
    createdAt
    updatedAt
    username
  }
  twitter_tweet_contributions {
    ...TwitterTweetContributionFragment
  }
}

fragment TwitterTweetContributionFragment on TwitterTweetContribution {
  id
  updatedAt
  createdAt
  contribution {
    ...ContributionFragment
  }
}

mutation bulkCreateTwitterTweet(
  $data: [TwitterTweetCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyTwitterTweet(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

fragment TwitterAccountFragment on TwitterAccount {
  account_name
  createdAt
  guild {
    id
    name
  }
  id
  updatedAt
}

query listTwitterAccounts(
  $where: TwitterAccountWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [TwitterAccountOrderByWithRelationInput!]
) {
  result: twitterAccounts(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...TwitterAccountFragment
  }
}

fragment TwitterUserFragment on TwitterUser {
  createdAt
  updatedAt
  description
  id
  twitter_user_id
  user {
    id
  }
  username
}

mutation upsertTwitterUser(
  $create: TwitterUserCreateInput!
  $update: TwitterUserUpdateInput!
  $where: TwitterUserWhereUniqueInput!
) {
  upsertOneTwitterUser(create: $create, update: $update, where: $where) {
    ...TwitterUserFragment
  }
}

# User queries
fragment UserFragment on User {
  address
  active
  chain_type {
    id
    name
    createdAt
    updatedAt
  }
  createdAt
  display_name
  full_name
  id
  name
  updatedAt
  discord_users {
    id
    active_token
  }
  linear_users {
    id
    active_token
  }
  guild_users {
    id
    user_id
    guild_id
    guild {
      id
      name
    }
    favorite
    membershipStatus {
      name
    }
  }
}

query getUser($where: UserWhereUniqueInput!) {
  result: user(where: $where) {
    ...UserFragment
  }
}

query getUserCustom($id: Float!) {
  result: getUser(id: $id) {
    ...UserFragment
  }
}

query listUsers(
  $where: UserWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [UserOrderByWithRelationInput!]
) {
  result: users(where: $where, skip: $skip, take: $first, orderBy: $orderBy) {
    ...UserFragment
  }
}

query listUserByAddress($address: String!) {
  result: listUserByAddress(address: $address) {
    ...UserFragment
  }
}

mutation updateUser($data: UserUpdateInput!, $where: UserWhereUniqueInput!) {
  updateOneUser(data: $data, where: $where) {
    ...UserFragment
  }
}

mutation updateUserCustom($data: UserUpdateCustomInput!) {
  updateUserCustom(data: $data) {
    ...UserFragment
  }
}

mutation createUser($data: UserCreateInput!) {
  createOneUser(data: $data) {
    ...UserFragment
  }
}

mutation createUserCustom($data: UserCreateCustomInput!) {
  createUserCustom(data: $data) {
    ...UserFragment
  }
}

# Contribution queries
fragment ContributionFragment on Contribution {
  activity_type {
    active
    createdAt
    id
    name
    updatedAt
  }
  chain {
    chain_id
  }
  date_of_engagement
  date_of_submission
  details
  id
  name
  proof
  status {
    createdAt
    id
    name
    updatedAt
  }
  updatedAt
  user {
    address
    createdAt
    display_name
    full_name
    id
    name
    updatedAt
  }
  attestations {
    id
    user_id
    createdAt
    attestation_status {
      id
      name
    }
    user {
      name
      address
      id
    }
  }
  guilds {
    id
    guild_id
    guild {
      id
      name
    }
  }
  on_chain_id
  tx_hash
}

query getContribution($where: ContributionWhereUniqueInput!) {
  result: contribution(where: $where) {
    ...ContributionFragment
  }
}

query listContributions(
  $where: ContributionWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [ContributionOrderByWithRelationInput!]
) {
  result: contributions(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...ContributionFragment
  }
}

query getContributionCountByDateForUserInRange(
  $where: GetUserContributionCountInput!
) {
  result: getContributionCountByDateForUserInRange(where: $where) {
    count
    date
    guild_id
    name
  }
}

query getDaoContributionCount($where: GetContributionInput!) {
  result: getDaoContributionCount(where: $where)
}

query getDaoContributionCountByUser($where: GetContributionInput!) {
  result: getDaoContributionCountByUser(where: $where) {
    count
    display_name
    user_id
    address
  }
}

query getContributionCountByActivityType($where: GetContributionInput!) {
  result: getContributionCountByActivityType(where: $where) {
    count
    activity_name
    activity_id
  }
}

mutation createContribution($data: ContributionCreateInput!) {
  createOneContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation createUserContribution($data: UserContributionCreateInput!) {
  createUserContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation createOnChainUserContribution(
  $data: UserOnChainContributionCreateInput!
) {
  createOnChainUserContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation deleteUserContribution($where: UserContributionDeleteInput!) {
  deleteUserContribution(where: $where) {
    id
  }
}

mutation deleteContribution($where: ContributionWhereUniqueInput!) {
  deleteOneContribution(where: $where) {
    id
  }
}

mutation updateUserContribution($data: UserContributionUpdateInput!) {
  updateUserContribution(data: $data) {
    ...ContributionFragment
  }
}

mutation updateUserOnChainContribution(
  $id: Float!
  $status: String!
  $chainId: Float!
  $data: ContributionUpdateManyMutationInput!
) {
  updateUserOnChainContribution(
    id: $id
    status: $status
    chainId: $chainId
    data: $data
  ) {
    ...ContributionFragment
  }
}

mutation bulkCreateContribution(
  $data: [ContributionCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyContribution(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

mutation updateContribution(
  $data: ContributionUpdateInput!
  $where: ContributionWhereUniqueInput!
) {
  updateOneContribution(data: $data, where: $where) {
    ...ContributionFragment
  }
}

mutation upsertContribution(
  $where: ContributionWhereUniqueInput!
  $create: ContributionCreateInput!
  $update: ContributionUpdateInput!
) {
  upsertOneContribution(where: $where, create: $create, update: $update) {
    ...ContributionFragment
  }
}

# Contribution Status
query getContributionStatus($name: String!) {
  contributionStatuses(where: { name: { equals: $name } }) {
    id
    name
  }
}

# Activity type queries
fragment ActivityTypeFragment on ActivityType {
  active
  createdAt
  id
  name
  updatedAt
  guilds {
    guild {
      id
      name
    }
  }
}

query listActivityTypes(
  $where: ActivityTypeWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [ActivityTypeOrderByWithRelationInput!]
) {
  result: activityTypes(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...ActivityTypeFragment
  }
}

query listActivityTypesByUser($where: ListActivityTypesByUserInput!) {
  result: listActivityTypesByUser(where: $where) {
    ...ActivityTypeFragment
  }
}

mutation createActivityType($data: ActivityTypeCreateInput!) {
  createOneActivityType(data: $data) {
    ...ActivityTypeFragment
  }
}

mutation getOrCreateActivityType($data: GetOrCreateActivityTypeInput!) {
  getOrCreateActivityType(data: $data) {
    ...ActivityTypeFragment
  }
}

mutation upsertActivityType(
  $create: ActivityTypeCreateInput!
  $update: ActivityTypeUpdateInput!
  $where: ActivityTypeWhereUniqueInput!
) {
  upsertOneActivityType(create: $create, update: $update, where: $where) {
    ...ActivityTypeFragment
  }
}

# UserActivity type queries
fragment UserActivityFragment on UserActivity {
  activity_type {
    id
  }
  createdAt
  id
  user {
    id
  }
  updatedAt
}

mutation createUserActivity($data: UserActivityCreateInput!) {
  createOneUserActivity(data: $data) {
    ...UserActivityFragment
  }
}

# Attestations
query listAttestations(
  $where: AttestationWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [AttestationOrderByWithRelationInput!]
) {
  result: attestations(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...AttestationFragment
  }
}

mutation createAttestation($data: AttestationCreateInput!) {
  createOneAttestation(data: $data) {
    ...AttestationFragment
  }
}

mutation createUserOnChainAttestation(
  $data: AttestationUserOnChainCreateInput!
) {
  createUserOnChainAttestation(data: $data) {
    ...AttestationFragment
  }
}

mutation updateUserOnChainAttestation(
  $id: Float!
  $status: String!
  $data: AttestationUpdateManyMutationInput!
) {
  updateUserOnChainAttestation(id: $id, status: $status, data: $data) {
    ...AttestationFragment
  }
}

mutation bulkCreateAttestation(
  $data: [AttestationCreateManyInput!]!
  $skipDuplicates: Boolean!
) {
  createManyAttestation(data: $data, skipDuplicates: $skipDuplicates) {
    count
  }
}

mutation updateAttestation(
  $data: AttestationUpdateInput!
  $where: AttestationWhereUniqueInput!
) {
  updateOneAttestation(data: $data, where: $where) {
    ...AttestationFragment
  }
}

mutation upsertAttestation(
  $where: AttestationWhereUniqueInput!
  $create: AttestationCreateInput!
  $update: AttestationUpdateInput!
) {
  upsertOneAttestation(where: $where, create: $create, update: $update) {
    ...AttestationFragment
  }
}

# Partners
fragment PartnerFragment on Partner {
  contribution {
    activity_type_id
    date_of_engagement
    date_of_submission
    details
    id
    name
    proof
    status_id
    updatedAt
    user_id
  }
  createdAt
  updatedAt
  user {
    name
    address
    id
  }
}

query listPartners(
  $where: PartnerWhereInput! = {}
  $skip: Int! = 0
  $first: Int! = 10
  $orderBy: [PartnerOrderByWithRelationInput!]
) {
  result: partners(
    where: $where
    skip: $skip
    take: $first
    orderBy: $orderBy
  ) {
    ...PartnerFragment
  }
}

# Custom queries
fragment AttestationFragment on Attestation {
  confidence {
    createdAt
    id
    name
    updatedAt
  }
  contribution {
    activity_type_id
    date_of_engagement
    date_of_submission
    details
    id
    name
    proof
    status_id
    updatedAt
    user_id
    on_chain_id
  }
  id
  updatedAt
  user {
    name
    address
    id
  }
}

mutation createUserAttestation($data: AttestationUserCreateInput!) {
  createUserAttestation(data: $data) {
    ...AttestationFragment
  }
}

fragment ChainFragment on Chain {
  id
  createdAt
  updatedAt
  name
  chain_id
}

query getChain($where: ChainWhereUniqueInput!) {
  result: chain(where: $where) {
    ...ChainFragment
  }
}

# Verification settings
fragment VerificationSettingFragment on VerificationSetting {
  id
  createdAt
  updatedAt
  guild_id
  num_of_attestations
}

query getVerificationSetting($where: VerificationSettingWhereUniqueInput!) {
  result: verificationSetting(where: $where) {
    ...VerificationSettingFragment
  }
}

mutation createVerificationSetting($data: VerificationSettingCreateInput!) {
  result: createOneVerificationSetting(data: $data) {
    ...VerificationSettingFragment
  }
}

mutation updateVerificationSetting(
  $where: VerificationSettingWhereUniqueInput!
  $data: VerificationSettingUpdateInput!
) {
  result: updateOneVerificationSetting(where: $where, data: $data) {
    ...VerificationSettingFragment
  }
}
