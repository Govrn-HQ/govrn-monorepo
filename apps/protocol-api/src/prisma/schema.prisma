generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model User {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name  String?
  display_name String?
  address String
  chain_type_id Int
  chain_type ChainType @relation(fields: [chain_type_id], references: [id])
  full_name String?
  activities UserActivity[]
  attestations Attestation[]
  contributionPartners Partner[]
  contributions Contribution[]
  linear_users LinearUser[]
  guild_users GuildUser[]
  twitter_user TwitterUser?
  discord_users DiscordUser[]
}

model DiscordUser {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  display_name String?
  discord_id Int @unique
  user_id Int
  user User @relation(fields: [user_id], references: [id])
}

model Guild {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  discord_id Int? // legacy
  name String? // legacy
  congrats_channel Int? // legacy
  logo String?
  contributions GuildContribution[]
  users GuildUser[]
  twitter_account TwitterAccount?
}

model GuildUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  guild_id Int
  guild Guild @relation(fields: [guild_id], references: [id])

  @@unique([user_id, guild_id])
}

model GuildContribution {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  guild_id Int
  guild Guild @relation(fields: [guild_id], references: [id])
  contribution_id Int
  contribution Contribution @relation(fields: [contribution_id], references: [id])

  @@unique([guild_id, contribution_id])
}


model ChainType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name String @unique
  users User[]
}


model Contribution {
  id Int @id @default(autoincrement())
  updatedAt DateTime @updatedAt @default(now())
  name String
  status_id Int
  status ContributionStatus @relation(fields: [status_id], references: [id])
  activity_type_id Int
  activity_type ActivityType @relation(fields: [activity_type_id], references: [id])
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  date_of_submission DateTime @default(now())
  date_of_engagement DateTime
  details String?
  proof String?
  attestations Attestation[]
  partners Partner[]
  guilds GuildContribution[]
  linear_issue LinearIssue?
  tweet TwitterTweet?
  on_chain_id Int? @unique
}

model Partner {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  contribution_id Int
  contribution Contribution @relation(fields: [contribution_id], references: [id])

  @@unique([user_id, contribution_id])
}

model Attestation {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  confidence_id Int
  confidence AttestationConfidence @relation(fields: [confidence_id], references: [id])
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  contribution_id Int
  contribution Contribution @relation(fields: [contribution_id], references: [id])
  date_of_attestation DateTime @default(now())

  @@unique([user_id, contribution_id])
}

model AttestationConfidence {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name String @unique
  attestations Attestation[]
}

model ContributionStatus {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name String @unique
  contributions Contribution[]
}

// There should be a mapping
// activity to user
model ActivityType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name String @unique
  active Boolean @default(true)
  users UserActivity[]
  contributions Contribution[]
  categoryActivity CategoryActivityType[]
}

model UserActivity {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  activity_type_id Int
  activity_type ActivityType @relation(fields: [activity_type_id], references: [id])

  @@unique([user_id, activity_type_id])
}

model CategoryActivityType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  category_activity_id Int
  category_activity CategoryActivity @relation(fields: [category_activity_id], references: [id])
  activity_type_id Int
  activity_type ActivityType @relation(fields: [activity_type_id], references: [id])

  @@unique([category_activity_id, activity_type_id])
}

model CategoryActivity {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name String @unique
  activityTypes CategoryActivityType[]
}


////
// Linear integration schemas
////

// mapping between linear user and user
// mapping between contribution and linear issue


model LinearIssue {
  id Int @id @default(autoincrement())
  archivedAt DateTime?
  autoArchivedAt DateTime?
  autoClosedAt DateTime?
  boardOrder Int?
  branchName String?
  canceledAt DateTime?
  completedAt DateTime?
  createdAt DateTime?
  customerTickerCount Int?
  description String?
  dueDate DateTime?
  estimate Float?
  linear_id String @unique
  identifier String?
  priority Int?
  priorityLabel String?
  snoozedUntilAt DateTime?
  sortOrder Float?
  startedAt DateTime?
  subIssueSortOrder Float?
  title String?
  trashed Boolean?
  updatedAt DateTime?
  url String?
  assignee_id Int?
  assignee LinearUser? @relation(name: "Assignee", fields: [assignee_id], references: [id])
  creator_id Int?
  creator LinearUser? @relation(name: "Creator", fields: [creator_id], references: [id])
  cycle_id Int?
  cycle LinearCycle? @relation(fields: [cycle_id], references: [id])
  project_id Int?
  project LinearProject? @relation(fields: [project_id], references: [id])
  team_id Int?
  team LinearTeam? @relation(fields: [team_id], references: [id])
  contribution_id Int?
  contribution Contribution? @relation(fields: [contribution_id], references: [id])
}

model LinearUser {
  id Int @id @default(autoincrement())
  active Boolean @default(true)
  createdAt DateTime?
  displayName String?
  email String?
  linear_id String @unique
  name String?
  url String?
  user_id Int?
  user User? @relation(fields: [user_id], references: [id])
  assigned_issues LinearIssue[]  @relation("Assignee")
  created_issues   LinearIssue[]   @relation("Creator")
}

model LinearCycle {
  id Int @id @default(autoincrement())
  number Int
  startsAt DateTime
  endsAt DateTime
  linear_id String @unique
  issues LinearIssue[]
}

model LinearProject {
  id Int @id @default(autoincrement())
  name String
  linear_id String @unique
  issues LinearIssue[]
}

model LinearTeam {
  id Int @id @default(autoincrement())
  linear_id String @unique
  name String
  key String
  issues LinearIssue[]
}


////
// Job specific model
////

model LinearJobRun {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedDate DateTime
  startDate DateTime
}

////
// Twitter models
////

model TwitterUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  twitter_user_id Int
  name String
  username String
  description String

  user_id Int?
  user User? @relation(fields: [user_id], references: [id])
  tweets TwitterTweet[]

  @@unique([twitter_user_id])
}

model TwitterTweet {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  twitter_tweet_id Int
  text String
  twitter_user_id Int?
  twitter_user TwitterUser? @relation(fields: [twitter_user_id], references: [id])
  contribution_id Int?
  contribution Contribution? @relation(fields: [contribution_id], references: [id])

  @@unique([twitter_tweet_id])
}

model TwitterAccount {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  account_name String
  guild_id Int?
  guild Guild? @relation(fields: [guild_id], references: [id])

  // Unique on account_name and guild_id
  @@unique([account_name])
}


