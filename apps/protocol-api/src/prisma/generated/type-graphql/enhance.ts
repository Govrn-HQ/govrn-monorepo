import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  User: crudResolvers.UserCrudResolver,
  DiscordUser: crudResolvers.DiscordUserCrudResolver,
  Guild: crudResolvers.GuildCrudResolver,
  GuildMembershipStatus: crudResolvers.GuildMembershipStatusCrudResolver,
  GuildUser: crudResolvers.GuildUserCrudResolver,
  GuildContribution: crudResolvers.GuildContributionCrudResolver,
  GuildContributionVerificationStatus: crudResolvers.GuildContributionVerificationStatusCrudResolver,
  GuildActivityType: crudResolvers.GuildActivityTypeCrudResolver,
  IntegrationType: crudResolvers.IntegrationTypeCrudResolver,
  GuildImportStatus: crudResolvers.GuildImportStatusCrudResolver,
  GuildImport: crudResolvers.GuildImportCrudResolver,
  ChainType: crudResolvers.ChainTypeCrudResolver,
  Chain: crudResolvers.ChainCrudResolver,
  Contribution: crudResolvers.ContributionCrudResolver,
  Partner: crudResolvers.PartnerCrudResolver,
  Attestation: crudResolvers.AttestationCrudResolver,
  AttestationConfidence: crudResolvers.AttestationConfidenceCrudResolver,
  AttestationStatus: crudResolvers.AttestationStatusCrudResolver,
  ContributionStatus: crudResolvers.ContributionStatusCrudResolver,
  ActivityType: crudResolvers.ActivityTypeCrudResolver,
  UserActivity: crudResolvers.UserActivityCrudResolver,
  CategoryActivityType: crudResolvers.CategoryActivityTypeCrudResolver,
  CategoryActivity: crudResolvers.CategoryActivityCrudResolver,
  LinearIssue: crudResolvers.LinearIssueCrudResolver,
  LinearUser: crudResolvers.LinearUserCrudResolver,
  LinearCycle: crudResolvers.LinearCycleCrudResolver,
  LinearProject: crudResolvers.LinearProjectCrudResolver,
  LinearTeam: crudResolvers.LinearTeamCrudResolver,
  JobRun: crudResolvers.JobRunCrudResolver,
  TwitterUser: crudResolvers.TwitterUserCrudResolver,
  TwitterTweet: crudResolvers.TwitterTweetCrudResolver,
  TwitterAccount: crudResolvers.TwitterAccountCrudResolver,
  TwitterTweetContribution: crudResolvers.TwitterTweetContributionCrudResolver,
  VerificationSettings: crudResolvers.VerificationSettingsCrudResolver
};
const actionResolversMap = {
  User: {
    aggregateUser: actionResolvers.AggregateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    createOneUser: actionResolvers.CreateOneUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    deleteOneUser: actionResolvers.DeleteOneUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
    users: actionResolvers.FindManyUserResolver,
    user: actionResolvers.FindUniqueUserResolver,
    getUser: actionResolvers.FindUniqueUserOrThrowResolver,
    groupByUser: actionResolvers.GroupByUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    updateOneUser: actionResolvers.UpdateOneUserResolver,
    upsertOneUser: actionResolvers.UpsertOneUserResolver
  },
  DiscordUser: {
    aggregateDiscordUser: actionResolvers.AggregateDiscordUserResolver,
    createManyDiscordUser: actionResolvers.CreateManyDiscordUserResolver,
    createOneDiscordUser: actionResolvers.CreateOneDiscordUserResolver,
    deleteManyDiscordUser: actionResolvers.DeleteManyDiscordUserResolver,
    deleteOneDiscordUser: actionResolvers.DeleteOneDiscordUserResolver,
    findFirstDiscordUser: actionResolvers.FindFirstDiscordUserResolver,
    findFirstDiscordUserOrThrow: actionResolvers.FindFirstDiscordUserOrThrowResolver,
    discordUsers: actionResolvers.FindManyDiscordUserResolver,
    discordUser: actionResolvers.FindUniqueDiscordUserResolver,
    getDiscordUser: actionResolvers.FindUniqueDiscordUserOrThrowResolver,
    groupByDiscordUser: actionResolvers.GroupByDiscordUserResolver,
    updateManyDiscordUser: actionResolvers.UpdateManyDiscordUserResolver,
    updateOneDiscordUser: actionResolvers.UpdateOneDiscordUserResolver,
    upsertOneDiscordUser: actionResolvers.UpsertOneDiscordUserResolver
  },
  Guild: {
    aggregateGuild: actionResolvers.AggregateGuildResolver,
    createManyGuild: actionResolvers.CreateManyGuildResolver,
    createOneGuild: actionResolvers.CreateOneGuildResolver,
    deleteManyGuild: actionResolvers.DeleteManyGuildResolver,
    deleteOneGuild: actionResolvers.DeleteOneGuildResolver,
    findFirstGuild: actionResolvers.FindFirstGuildResolver,
    findFirstGuildOrThrow: actionResolvers.FindFirstGuildOrThrowResolver,
    guilds: actionResolvers.FindManyGuildResolver,
    guild: actionResolvers.FindUniqueGuildResolver,
    getGuild: actionResolvers.FindUniqueGuildOrThrowResolver,
    groupByGuild: actionResolvers.GroupByGuildResolver,
    updateManyGuild: actionResolvers.UpdateManyGuildResolver,
    updateOneGuild: actionResolvers.UpdateOneGuildResolver,
    upsertOneGuild: actionResolvers.UpsertOneGuildResolver
  },
  GuildMembershipStatus: {
    aggregateGuildMembershipStatus: actionResolvers.AggregateGuildMembershipStatusResolver,
    createManyGuildMembershipStatus: actionResolvers.CreateManyGuildMembershipStatusResolver,
    createOneGuildMembershipStatus: actionResolvers.CreateOneGuildMembershipStatusResolver,
    deleteManyGuildMembershipStatus: actionResolvers.DeleteManyGuildMembershipStatusResolver,
    deleteOneGuildMembershipStatus: actionResolvers.DeleteOneGuildMembershipStatusResolver,
    findFirstGuildMembershipStatus: actionResolvers.FindFirstGuildMembershipStatusResolver,
    findFirstGuildMembershipStatusOrThrow: actionResolvers.FindFirstGuildMembershipStatusOrThrowResolver,
    guildMembershipStatuses: actionResolvers.FindManyGuildMembershipStatusResolver,
    guildMembershipStatus: actionResolvers.FindUniqueGuildMembershipStatusResolver,
    getGuildMembershipStatus: actionResolvers.FindUniqueGuildMembershipStatusOrThrowResolver,
    groupByGuildMembershipStatus: actionResolvers.GroupByGuildMembershipStatusResolver,
    updateManyGuildMembershipStatus: actionResolvers.UpdateManyGuildMembershipStatusResolver,
    updateOneGuildMembershipStatus: actionResolvers.UpdateOneGuildMembershipStatusResolver,
    upsertOneGuildMembershipStatus: actionResolvers.UpsertOneGuildMembershipStatusResolver
  },
  GuildUser: {
    aggregateGuildUser: actionResolvers.AggregateGuildUserResolver,
    createManyGuildUser: actionResolvers.CreateManyGuildUserResolver,
    createOneGuildUser: actionResolvers.CreateOneGuildUserResolver,
    deleteManyGuildUser: actionResolvers.DeleteManyGuildUserResolver,
    deleteOneGuildUser: actionResolvers.DeleteOneGuildUserResolver,
    findFirstGuildUser: actionResolvers.FindFirstGuildUserResolver,
    findFirstGuildUserOrThrow: actionResolvers.FindFirstGuildUserOrThrowResolver,
    guildUsers: actionResolvers.FindManyGuildUserResolver,
    guildUser: actionResolvers.FindUniqueGuildUserResolver,
    getGuildUser: actionResolvers.FindUniqueGuildUserOrThrowResolver,
    groupByGuildUser: actionResolvers.GroupByGuildUserResolver,
    updateManyGuildUser: actionResolvers.UpdateManyGuildUserResolver,
    updateOneGuildUser: actionResolvers.UpdateOneGuildUserResolver,
    upsertOneGuildUser: actionResolvers.UpsertOneGuildUserResolver
  },
  GuildContribution: {
    aggregateGuildContribution: actionResolvers.AggregateGuildContributionResolver,
    createManyGuildContribution: actionResolvers.CreateManyGuildContributionResolver,
    createOneGuildContribution: actionResolvers.CreateOneGuildContributionResolver,
    deleteManyGuildContribution: actionResolvers.DeleteManyGuildContributionResolver,
    deleteOneGuildContribution: actionResolvers.DeleteOneGuildContributionResolver,
    findFirstGuildContribution: actionResolvers.FindFirstGuildContributionResolver,
    findFirstGuildContributionOrThrow: actionResolvers.FindFirstGuildContributionOrThrowResolver,
    guildContributions: actionResolvers.FindManyGuildContributionResolver,
    guildContribution: actionResolvers.FindUniqueGuildContributionResolver,
    getGuildContribution: actionResolvers.FindUniqueGuildContributionOrThrowResolver,
    groupByGuildContribution: actionResolvers.GroupByGuildContributionResolver,
    updateManyGuildContribution: actionResolvers.UpdateManyGuildContributionResolver,
    updateOneGuildContribution: actionResolvers.UpdateOneGuildContributionResolver,
    upsertOneGuildContribution: actionResolvers.UpsertOneGuildContributionResolver
  },
  GuildContributionVerificationStatus: {
    aggregateGuildContributionVerificationStatus: actionResolvers.AggregateGuildContributionVerificationStatusResolver,
    createManyGuildContributionVerificationStatus: actionResolvers.CreateManyGuildContributionVerificationStatusResolver,
    createOneGuildContributionVerificationStatus: actionResolvers.CreateOneGuildContributionVerificationStatusResolver,
    deleteManyGuildContributionVerificationStatus: actionResolvers.DeleteManyGuildContributionVerificationStatusResolver,
    deleteOneGuildContributionVerificationStatus: actionResolvers.DeleteOneGuildContributionVerificationStatusResolver,
    findFirstGuildContributionVerificationStatus: actionResolvers.FindFirstGuildContributionVerificationStatusResolver,
    findFirstGuildContributionVerificationStatusOrThrow: actionResolvers.FindFirstGuildContributionVerificationStatusOrThrowResolver,
    guildContributionVerificationStatuses: actionResolvers.FindManyGuildContributionVerificationStatusResolver,
    guildContributionVerificationStatus: actionResolvers.FindUniqueGuildContributionVerificationStatusResolver,
    getGuildContributionVerificationStatus: actionResolvers.FindUniqueGuildContributionVerificationStatusOrThrowResolver,
    groupByGuildContributionVerificationStatus: actionResolvers.GroupByGuildContributionVerificationStatusResolver,
    updateManyGuildContributionVerificationStatus: actionResolvers.UpdateManyGuildContributionVerificationStatusResolver,
    updateOneGuildContributionVerificationStatus: actionResolvers.UpdateOneGuildContributionVerificationStatusResolver,
    upsertOneGuildContributionVerificationStatus: actionResolvers.UpsertOneGuildContributionVerificationStatusResolver
  },
  GuildActivityType: {
    aggregateGuildActivityType: actionResolvers.AggregateGuildActivityTypeResolver,
    createManyGuildActivityType: actionResolvers.CreateManyGuildActivityTypeResolver,
    createOneGuildActivityType: actionResolvers.CreateOneGuildActivityTypeResolver,
    deleteManyGuildActivityType: actionResolvers.DeleteManyGuildActivityTypeResolver,
    deleteOneGuildActivityType: actionResolvers.DeleteOneGuildActivityTypeResolver,
    findFirstGuildActivityType: actionResolvers.FindFirstGuildActivityTypeResolver,
    findFirstGuildActivityTypeOrThrow: actionResolvers.FindFirstGuildActivityTypeOrThrowResolver,
    guildActivityTypes: actionResolvers.FindManyGuildActivityTypeResolver,
    guildActivityType: actionResolvers.FindUniqueGuildActivityTypeResolver,
    getGuildActivityType: actionResolvers.FindUniqueGuildActivityTypeOrThrowResolver,
    groupByGuildActivityType: actionResolvers.GroupByGuildActivityTypeResolver,
    updateManyGuildActivityType: actionResolvers.UpdateManyGuildActivityTypeResolver,
    updateOneGuildActivityType: actionResolvers.UpdateOneGuildActivityTypeResolver,
    upsertOneGuildActivityType: actionResolvers.UpsertOneGuildActivityTypeResolver
  },
  IntegrationType: {
    aggregateIntegrationType: actionResolvers.AggregateIntegrationTypeResolver,
    createManyIntegrationType: actionResolvers.CreateManyIntegrationTypeResolver,
    createOneIntegrationType: actionResolvers.CreateOneIntegrationTypeResolver,
    deleteManyIntegrationType: actionResolvers.DeleteManyIntegrationTypeResolver,
    deleteOneIntegrationType: actionResolvers.DeleteOneIntegrationTypeResolver,
    findFirstIntegrationType: actionResolvers.FindFirstIntegrationTypeResolver,
    findFirstIntegrationTypeOrThrow: actionResolvers.FindFirstIntegrationTypeOrThrowResolver,
    integrationTypes: actionResolvers.FindManyIntegrationTypeResolver,
    integrationType: actionResolvers.FindUniqueIntegrationTypeResolver,
    getIntegrationType: actionResolvers.FindUniqueIntegrationTypeOrThrowResolver,
    groupByIntegrationType: actionResolvers.GroupByIntegrationTypeResolver,
    updateManyIntegrationType: actionResolvers.UpdateManyIntegrationTypeResolver,
    updateOneIntegrationType: actionResolvers.UpdateOneIntegrationTypeResolver,
    upsertOneIntegrationType: actionResolvers.UpsertOneIntegrationTypeResolver
  },
  GuildImportStatus: {
    aggregateGuildImportStatus: actionResolvers.AggregateGuildImportStatusResolver,
    createManyGuildImportStatus: actionResolvers.CreateManyGuildImportStatusResolver,
    createOneGuildImportStatus: actionResolvers.CreateOneGuildImportStatusResolver,
    deleteManyGuildImportStatus: actionResolvers.DeleteManyGuildImportStatusResolver,
    deleteOneGuildImportStatus: actionResolvers.DeleteOneGuildImportStatusResolver,
    findFirstGuildImportStatus: actionResolvers.FindFirstGuildImportStatusResolver,
    findFirstGuildImportStatusOrThrow: actionResolvers.FindFirstGuildImportStatusOrThrowResolver,
    guildImportStatuses: actionResolvers.FindManyGuildImportStatusResolver,
    guildImportStatus: actionResolvers.FindUniqueGuildImportStatusResolver,
    getGuildImportStatus: actionResolvers.FindUniqueGuildImportStatusOrThrowResolver,
    groupByGuildImportStatus: actionResolvers.GroupByGuildImportStatusResolver,
    updateManyGuildImportStatus: actionResolvers.UpdateManyGuildImportStatusResolver,
    updateOneGuildImportStatus: actionResolvers.UpdateOneGuildImportStatusResolver,
    upsertOneGuildImportStatus: actionResolvers.UpsertOneGuildImportStatusResolver
  },
  GuildImport: {
    aggregateGuildImport: actionResolvers.AggregateGuildImportResolver,
    createManyGuildImport: actionResolvers.CreateManyGuildImportResolver,
    createOneGuildImport: actionResolvers.CreateOneGuildImportResolver,
    deleteManyGuildImport: actionResolvers.DeleteManyGuildImportResolver,
    deleteOneGuildImport: actionResolvers.DeleteOneGuildImportResolver,
    findFirstGuildImport: actionResolvers.FindFirstGuildImportResolver,
    findFirstGuildImportOrThrow: actionResolvers.FindFirstGuildImportOrThrowResolver,
    guildImports: actionResolvers.FindManyGuildImportResolver,
    guildImport: actionResolvers.FindUniqueGuildImportResolver,
    getGuildImport: actionResolvers.FindUniqueGuildImportOrThrowResolver,
    groupByGuildImport: actionResolvers.GroupByGuildImportResolver,
    updateManyGuildImport: actionResolvers.UpdateManyGuildImportResolver,
    updateOneGuildImport: actionResolvers.UpdateOneGuildImportResolver,
    upsertOneGuildImport: actionResolvers.UpsertOneGuildImportResolver
  },
  ChainType: {
    aggregateChainType: actionResolvers.AggregateChainTypeResolver,
    createManyChainType: actionResolvers.CreateManyChainTypeResolver,
    createOneChainType: actionResolvers.CreateOneChainTypeResolver,
    deleteManyChainType: actionResolvers.DeleteManyChainTypeResolver,
    deleteOneChainType: actionResolvers.DeleteOneChainTypeResolver,
    findFirstChainType: actionResolvers.FindFirstChainTypeResolver,
    findFirstChainTypeOrThrow: actionResolvers.FindFirstChainTypeOrThrowResolver,
    chainTypes: actionResolvers.FindManyChainTypeResolver,
    chainType: actionResolvers.FindUniqueChainTypeResolver,
    getChainType: actionResolvers.FindUniqueChainTypeOrThrowResolver,
    groupByChainType: actionResolvers.GroupByChainTypeResolver,
    updateManyChainType: actionResolvers.UpdateManyChainTypeResolver,
    updateOneChainType: actionResolvers.UpdateOneChainTypeResolver,
    upsertOneChainType: actionResolvers.UpsertOneChainTypeResolver
  },
  Chain: {
    aggregateChain: actionResolvers.AggregateChainResolver,
    createManyChain: actionResolvers.CreateManyChainResolver,
    createOneChain: actionResolvers.CreateOneChainResolver,
    deleteManyChain: actionResolvers.DeleteManyChainResolver,
    deleteOneChain: actionResolvers.DeleteOneChainResolver,
    findFirstChain: actionResolvers.FindFirstChainResolver,
    findFirstChainOrThrow: actionResolvers.FindFirstChainOrThrowResolver,
    chains: actionResolvers.FindManyChainResolver,
    chain: actionResolvers.FindUniqueChainResolver,
    getChain: actionResolvers.FindUniqueChainOrThrowResolver,
    groupByChain: actionResolvers.GroupByChainResolver,
    updateManyChain: actionResolvers.UpdateManyChainResolver,
    updateOneChain: actionResolvers.UpdateOneChainResolver,
    upsertOneChain: actionResolvers.UpsertOneChainResolver
  },
  Contribution: {
    aggregateContribution: actionResolvers.AggregateContributionResolver,
    createManyContribution: actionResolvers.CreateManyContributionResolver,
    createOneContribution: actionResolvers.CreateOneContributionResolver,
    deleteManyContribution: actionResolvers.DeleteManyContributionResolver,
    deleteOneContribution: actionResolvers.DeleteOneContributionResolver,
    findFirstContribution: actionResolvers.FindFirstContributionResolver,
    findFirstContributionOrThrow: actionResolvers.FindFirstContributionOrThrowResolver,
    contributions: actionResolvers.FindManyContributionResolver,
    contribution: actionResolvers.FindUniqueContributionResolver,
    getContribution: actionResolvers.FindUniqueContributionOrThrowResolver,
    groupByContribution: actionResolvers.GroupByContributionResolver,
    updateManyContribution: actionResolvers.UpdateManyContributionResolver,
    updateOneContribution: actionResolvers.UpdateOneContributionResolver,
    upsertOneContribution: actionResolvers.UpsertOneContributionResolver
  },
  Partner: {
    aggregatePartner: actionResolvers.AggregatePartnerResolver,
    createManyPartner: actionResolvers.CreateManyPartnerResolver,
    createOnePartner: actionResolvers.CreateOnePartnerResolver,
    deleteManyPartner: actionResolvers.DeleteManyPartnerResolver,
    deleteOnePartner: actionResolvers.DeleteOnePartnerResolver,
    findFirstPartner: actionResolvers.FindFirstPartnerResolver,
    findFirstPartnerOrThrow: actionResolvers.FindFirstPartnerOrThrowResolver,
    partners: actionResolvers.FindManyPartnerResolver,
    partner: actionResolvers.FindUniquePartnerResolver,
    getPartner: actionResolvers.FindUniquePartnerOrThrowResolver,
    groupByPartner: actionResolvers.GroupByPartnerResolver,
    updateManyPartner: actionResolvers.UpdateManyPartnerResolver,
    updateOnePartner: actionResolvers.UpdateOnePartnerResolver,
    upsertOnePartner: actionResolvers.UpsertOnePartnerResolver
  },
  Attestation: {
    aggregateAttestation: actionResolvers.AggregateAttestationResolver,
    createManyAttestation: actionResolvers.CreateManyAttestationResolver,
    createOneAttestation: actionResolvers.CreateOneAttestationResolver,
    deleteManyAttestation: actionResolvers.DeleteManyAttestationResolver,
    deleteOneAttestation: actionResolvers.DeleteOneAttestationResolver,
    findFirstAttestation: actionResolvers.FindFirstAttestationResolver,
    findFirstAttestationOrThrow: actionResolvers.FindFirstAttestationOrThrowResolver,
    attestations: actionResolvers.FindManyAttestationResolver,
    attestation: actionResolvers.FindUniqueAttestationResolver,
    getAttestation: actionResolvers.FindUniqueAttestationOrThrowResolver,
    groupByAttestation: actionResolvers.GroupByAttestationResolver,
    updateManyAttestation: actionResolvers.UpdateManyAttestationResolver,
    updateOneAttestation: actionResolvers.UpdateOneAttestationResolver,
    upsertOneAttestation: actionResolvers.UpsertOneAttestationResolver
  },
  AttestationConfidence: {
    aggregateAttestationConfidence: actionResolvers.AggregateAttestationConfidenceResolver,
    createManyAttestationConfidence: actionResolvers.CreateManyAttestationConfidenceResolver,
    createOneAttestationConfidence: actionResolvers.CreateOneAttestationConfidenceResolver,
    deleteManyAttestationConfidence: actionResolvers.DeleteManyAttestationConfidenceResolver,
    deleteOneAttestationConfidence: actionResolvers.DeleteOneAttestationConfidenceResolver,
    findFirstAttestationConfidence: actionResolvers.FindFirstAttestationConfidenceResolver,
    findFirstAttestationConfidenceOrThrow: actionResolvers.FindFirstAttestationConfidenceOrThrowResolver,
    attestationConfidences: actionResolvers.FindManyAttestationConfidenceResolver,
    attestationConfidence: actionResolvers.FindUniqueAttestationConfidenceResolver,
    getAttestationConfidence: actionResolvers.FindUniqueAttestationConfidenceOrThrowResolver,
    groupByAttestationConfidence: actionResolvers.GroupByAttestationConfidenceResolver,
    updateManyAttestationConfidence: actionResolvers.UpdateManyAttestationConfidenceResolver,
    updateOneAttestationConfidence: actionResolvers.UpdateOneAttestationConfidenceResolver,
    upsertOneAttestationConfidence: actionResolvers.UpsertOneAttestationConfidenceResolver
  },
  AttestationStatus: {
    aggregateAttestationStatus: actionResolvers.AggregateAttestationStatusResolver,
    createManyAttestationStatus: actionResolvers.CreateManyAttestationStatusResolver,
    createOneAttestationStatus: actionResolvers.CreateOneAttestationStatusResolver,
    deleteManyAttestationStatus: actionResolvers.DeleteManyAttestationStatusResolver,
    deleteOneAttestationStatus: actionResolvers.DeleteOneAttestationStatusResolver,
    findFirstAttestationStatus: actionResolvers.FindFirstAttestationStatusResolver,
    findFirstAttestationStatusOrThrow: actionResolvers.FindFirstAttestationStatusOrThrowResolver,
    attestationStatuses: actionResolvers.FindManyAttestationStatusResolver,
    attestationStatus: actionResolvers.FindUniqueAttestationStatusResolver,
    getAttestationStatus: actionResolvers.FindUniqueAttestationStatusOrThrowResolver,
    groupByAttestationStatus: actionResolvers.GroupByAttestationStatusResolver,
    updateManyAttestationStatus: actionResolvers.UpdateManyAttestationStatusResolver,
    updateOneAttestationStatus: actionResolvers.UpdateOneAttestationStatusResolver,
    upsertOneAttestationStatus: actionResolvers.UpsertOneAttestationStatusResolver
  },
  ContributionStatus: {
    aggregateContributionStatus: actionResolvers.AggregateContributionStatusResolver,
    createManyContributionStatus: actionResolvers.CreateManyContributionStatusResolver,
    createOneContributionStatus: actionResolvers.CreateOneContributionStatusResolver,
    deleteManyContributionStatus: actionResolvers.DeleteManyContributionStatusResolver,
    deleteOneContributionStatus: actionResolvers.DeleteOneContributionStatusResolver,
    findFirstContributionStatus: actionResolvers.FindFirstContributionStatusResolver,
    findFirstContributionStatusOrThrow: actionResolvers.FindFirstContributionStatusOrThrowResolver,
    contributionStatuses: actionResolvers.FindManyContributionStatusResolver,
    contributionStatus: actionResolvers.FindUniqueContributionStatusResolver,
    getContributionStatus: actionResolvers.FindUniqueContributionStatusOrThrowResolver,
    groupByContributionStatus: actionResolvers.GroupByContributionStatusResolver,
    updateManyContributionStatus: actionResolvers.UpdateManyContributionStatusResolver,
    updateOneContributionStatus: actionResolvers.UpdateOneContributionStatusResolver,
    upsertOneContributionStatus: actionResolvers.UpsertOneContributionStatusResolver
  },
  ActivityType: {
    aggregateActivityType: actionResolvers.AggregateActivityTypeResolver,
    createManyActivityType: actionResolvers.CreateManyActivityTypeResolver,
    createOneActivityType: actionResolvers.CreateOneActivityTypeResolver,
    deleteManyActivityType: actionResolvers.DeleteManyActivityTypeResolver,
    deleteOneActivityType: actionResolvers.DeleteOneActivityTypeResolver,
    findFirstActivityType: actionResolvers.FindFirstActivityTypeResolver,
    findFirstActivityTypeOrThrow: actionResolvers.FindFirstActivityTypeOrThrowResolver,
    activityTypes: actionResolvers.FindManyActivityTypeResolver,
    activityType: actionResolvers.FindUniqueActivityTypeResolver,
    getActivityType: actionResolvers.FindUniqueActivityTypeOrThrowResolver,
    groupByActivityType: actionResolvers.GroupByActivityTypeResolver,
    updateManyActivityType: actionResolvers.UpdateManyActivityTypeResolver,
    updateOneActivityType: actionResolvers.UpdateOneActivityTypeResolver,
    upsertOneActivityType: actionResolvers.UpsertOneActivityTypeResolver
  },
  UserActivity: {
    aggregateUserActivity: actionResolvers.AggregateUserActivityResolver,
    createManyUserActivity: actionResolvers.CreateManyUserActivityResolver,
    createOneUserActivity: actionResolvers.CreateOneUserActivityResolver,
    deleteManyUserActivity: actionResolvers.DeleteManyUserActivityResolver,
    deleteOneUserActivity: actionResolvers.DeleteOneUserActivityResolver,
    findFirstUserActivity: actionResolvers.FindFirstUserActivityResolver,
    findFirstUserActivityOrThrow: actionResolvers.FindFirstUserActivityOrThrowResolver,
    userActivities: actionResolvers.FindManyUserActivityResolver,
    userActivity: actionResolvers.FindUniqueUserActivityResolver,
    getUserActivity: actionResolvers.FindUniqueUserActivityOrThrowResolver,
    groupByUserActivity: actionResolvers.GroupByUserActivityResolver,
    updateManyUserActivity: actionResolvers.UpdateManyUserActivityResolver,
    updateOneUserActivity: actionResolvers.UpdateOneUserActivityResolver,
    upsertOneUserActivity: actionResolvers.UpsertOneUserActivityResolver
  },
  CategoryActivityType: {
    aggregateCategoryActivityType: actionResolvers.AggregateCategoryActivityTypeResolver,
    createManyCategoryActivityType: actionResolvers.CreateManyCategoryActivityTypeResolver,
    createOneCategoryActivityType: actionResolvers.CreateOneCategoryActivityTypeResolver,
    deleteManyCategoryActivityType: actionResolvers.DeleteManyCategoryActivityTypeResolver,
    deleteOneCategoryActivityType: actionResolvers.DeleteOneCategoryActivityTypeResolver,
    findFirstCategoryActivityType: actionResolvers.FindFirstCategoryActivityTypeResolver,
    findFirstCategoryActivityTypeOrThrow: actionResolvers.FindFirstCategoryActivityTypeOrThrowResolver,
    categoryActivityTypes: actionResolvers.FindManyCategoryActivityTypeResolver,
    categoryActivityType: actionResolvers.FindUniqueCategoryActivityTypeResolver,
    getCategoryActivityType: actionResolvers.FindUniqueCategoryActivityTypeOrThrowResolver,
    groupByCategoryActivityType: actionResolvers.GroupByCategoryActivityTypeResolver,
    updateManyCategoryActivityType: actionResolvers.UpdateManyCategoryActivityTypeResolver,
    updateOneCategoryActivityType: actionResolvers.UpdateOneCategoryActivityTypeResolver,
    upsertOneCategoryActivityType: actionResolvers.UpsertOneCategoryActivityTypeResolver
  },
  CategoryActivity: {
    aggregateCategoryActivity: actionResolvers.AggregateCategoryActivityResolver,
    createManyCategoryActivity: actionResolvers.CreateManyCategoryActivityResolver,
    createOneCategoryActivity: actionResolvers.CreateOneCategoryActivityResolver,
    deleteManyCategoryActivity: actionResolvers.DeleteManyCategoryActivityResolver,
    deleteOneCategoryActivity: actionResolvers.DeleteOneCategoryActivityResolver,
    findFirstCategoryActivity: actionResolvers.FindFirstCategoryActivityResolver,
    findFirstCategoryActivityOrThrow: actionResolvers.FindFirstCategoryActivityOrThrowResolver,
    categoryActivities: actionResolvers.FindManyCategoryActivityResolver,
    categoryActivity: actionResolvers.FindUniqueCategoryActivityResolver,
    getCategoryActivity: actionResolvers.FindUniqueCategoryActivityOrThrowResolver,
    groupByCategoryActivity: actionResolvers.GroupByCategoryActivityResolver,
    updateManyCategoryActivity: actionResolvers.UpdateManyCategoryActivityResolver,
    updateOneCategoryActivity: actionResolvers.UpdateOneCategoryActivityResolver,
    upsertOneCategoryActivity: actionResolvers.UpsertOneCategoryActivityResolver
  },
  LinearIssue: {
    aggregateLinearIssue: actionResolvers.AggregateLinearIssueResolver,
    createManyLinearIssue: actionResolvers.CreateManyLinearIssueResolver,
    createOneLinearIssue: actionResolvers.CreateOneLinearIssueResolver,
    deleteManyLinearIssue: actionResolvers.DeleteManyLinearIssueResolver,
    deleteOneLinearIssue: actionResolvers.DeleteOneLinearIssueResolver,
    findFirstLinearIssue: actionResolvers.FindFirstLinearIssueResolver,
    findFirstLinearIssueOrThrow: actionResolvers.FindFirstLinearIssueOrThrowResolver,
    linearIssues: actionResolvers.FindManyLinearIssueResolver,
    linearIssue: actionResolvers.FindUniqueLinearIssueResolver,
    getLinearIssue: actionResolvers.FindUniqueLinearIssueOrThrowResolver,
    groupByLinearIssue: actionResolvers.GroupByLinearIssueResolver,
    updateManyLinearIssue: actionResolvers.UpdateManyLinearIssueResolver,
    updateOneLinearIssue: actionResolvers.UpdateOneLinearIssueResolver,
    upsertOneLinearIssue: actionResolvers.UpsertOneLinearIssueResolver
  },
  LinearUser: {
    aggregateLinearUser: actionResolvers.AggregateLinearUserResolver,
    createManyLinearUser: actionResolvers.CreateManyLinearUserResolver,
    createOneLinearUser: actionResolvers.CreateOneLinearUserResolver,
    deleteManyLinearUser: actionResolvers.DeleteManyLinearUserResolver,
    deleteOneLinearUser: actionResolvers.DeleteOneLinearUserResolver,
    findFirstLinearUser: actionResolvers.FindFirstLinearUserResolver,
    findFirstLinearUserOrThrow: actionResolvers.FindFirstLinearUserOrThrowResolver,
    linearUsers: actionResolvers.FindManyLinearUserResolver,
    linearUser: actionResolvers.FindUniqueLinearUserResolver,
    getLinearUser: actionResolvers.FindUniqueLinearUserOrThrowResolver,
    groupByLinearUser: actionResolvers.GroupByLinearUserResolver,
    updateManyLinearUser: actionResolvers.UpdateManyLinearUserResolver,
    updateOneLinearUser: actionResolvers.UpdateOneLinearUserResolver,
    upsertOneLinearUser: actionResolvers.UpsertOneLinearUserResolver
  },
  LinearCycle: {
    aggregateLinearCycle: actionResolvers.AggregateLinearCycleResolver,
    createManyLinearCycle: actionResolvers.CreateManyLinearCycleResolver,
    createOneLinearCycle: actionResolvers.CreateOneLinearCycleResolver,
    deleteManyLinearCycle: actionResolvers.DeleteManyLinearCycleResolver,
    deleteOneLinearCycle: actionResolvers.DeleteOneLinearCycleResolver,
    findFirstLinearCycle: actionResolvers.FindFirstLinearCycleResolver,
    findFirstLinearCycleOrThrow: actionResolvers.FindFirstLinearCycleOrThrowResolver,
    linearCycles: actionResolvers.FindManyLinearCycleResolver,
    linearCycle: actionResolvers.FindUniqueLinearCycleResolver,
    getLinearCycle: actionResolvers.FindUniqueLinearCycleOrThrowResolver,
    groupByLinearCycle: actionResolvers.GroupByLinearCycleResolver,
    updateManyLinearCycle: actionResolvers.UpdateManyLinearCycleResolver,
    updateOneLinearCycle: actionResolvers.UpdateOneLinearCycleResolver,
    upsertOneLinearCycle: actionResolvers.UpsertOneLinearCycleResolver
  },
  LinearProject: {
    aggregateLinearProject: actionResolvers.AggregateLinearProjectResolver,
    createManyLinearProject: actionResolvers.CreateManyLinearProjectResolver,
    createOneLinearProject: actionResolvers.CreateOneLinearProjectResolver,
    deleteManyLinearProject: actionResolvers.DeleteManyLinearProjectResolver,
    deleteOneLinearProject: actionResolvers.DeleteOneLinearProjectResolver,
    findFirstLinearProject: actionResolvers.FindFirstLinearProjectResolver,
    findFirstLinearProjectOrThrow: actionResolvers.FindFirstLinearProjectOrThrowResolver,
    linearProjects: actionResolvers.FindManyLinearProjectResolver,
    linearProject: actionResolvers.FindUniqueLinearProjectResolver,
    getLinearProject: actionResolvers.FindUniqueLinearProjectOrThrowResolver,
    groupByLinearProject: actionResolvers.GroupByLinearProjectResolver,
    updateManyLinearProject: actionResolvers.UpdateManyLinearProjectResolver,
    updateOneLinearProject: actionResolvers.UpdateOneLinearProjectResolver,
    upsertOneLinearProject: actionResolvers.UpsertOneLinearProjectResolver
  },
  LinearTeam: {
    aggregateLinearTeam: actionResolvers.AggregateLinearTeamResolver,
    createManyLinearTeam: actionResolvers.CreateManyLinearTeamResolver,
    createOneLinearTeam: actionResolvers.CreateOneLinearTeamResolver,
    deleteManyLinearTeam: actionResolvers.DeleteManyLinearTeamResolver,
    deleteOneLinearTeam: actionResolvers.DeleteOneLinearTeamResolver,
    findFirstLinearTeam: actionResolvers.FindFirstLinearTeamResolver,
    findFirstLinearTeamOrThrow: actionResolvers.FindFirstLinearTeamOrThrowResolver,
    linearTeams: actionResolvers.FindManyLinearTeamResolver,
    linearTeam: actionResolvers.FindUniqueLinearTeamResolver,
    getLinearTeam: actionResolvers.FindUniqueLinearTeamOrThrowResolver,
    groupByLinearTeam: actionResolvers.GroupByLinearTeamResolver,
    updateManyLinearTeam: actionResolvers.UpdateManyLinearTeamResolver,
    updateOneLinearTeam: actionResolvers.UpdateOneLinearTeamResolver,
    upsertOneLinearTeam: actionResolvers.UpsertOneLinearTeamResolver
  },
  JobRun: {
    aggregateJobRun: actionResolvers.AggregateJobRunResolver,
    createManyJobRun: actionResolvers.CreateManyJobRunResolver,
    createOneJobRun: actionResolvers.CreateOneJobRunResolver,
    deleteManyJobRun: actionResolvers.DeleteManyJobRunResolver,
    deleteOneJobRun: actionResolvers.DeleteOneJobRunResolver,
    findFirstJobRun: actionResolvers.FindFirstJobRunResolver,
    findFirstJobRunOrThrow: actionResolvers.FindFirstJobRunOrThrowResolver,
    jobRuns: actionResolvers.FindManyJobRunResolver,
    jobRun: actionResolvers.FindUniqueJobRunResolver,
    getJobRun: actionResolvers.FindUniqueJobRunOrThrowResolver,
    groupByJobRun: actionResolvers.GroupByJobRunResolver,
    updateManyJobRun: actionResolvers.UpdateManyJobRunResolver,
    updateOneJobRun: actionResolvers.UpdateOneJobRunResolver,
    upsertOneJobRun: actionResolvers.UpsertOneJobRunResolver
  },
  TwitterUser: {
    aggregateTwitterUser: actionResolvers.AggregateTwitterUserResolver,
    createManyTwitterUser: actionResolvers.CreateManyTwitterUserResolver,
    createOneTwitterUser: actionResolvers.CreateOneTwitterUserResolver,
    deleteManyTwitterUser: actionResolvers.DeleteManyTwitterUserResolver,
    deleteOneTwitterUser: actionResolvers.DeleteOneTwitterUserResolver,
    findFirstTwitterUser: actionResolvers.FindFirstTwitterUserResolver,
    findFirstTwitterUserOrThrow: actionResolvers.FindFirstTwitterUserOrThrowResolver,
    twitterUsers: actionResolvers.FindManyTwitterUserResolver,
    twitterUser: actionResolvers.FindUniqueTwitterUserResolver,
    getTwitterUser: actionResolvers.FindUniqueTwitterUserOrThrowResolver,
    groupByTwitterUser: actionResolvers.GroupByTwitterUserResolver,
    updateManyTwitterUser: actionResolvers.UpdateManyTwitterUserResolver,
    updateOneTwitterUser: actionResolvers.UpdateOneTwitterUserResolver,
    upsertOneTwitterUser: actionResolvers.UpsertOneTwitterUserResolver
  },
  TwitterTweet: {
    aggregateTwitterTweet: actionResolvers.AggregateTwitterTweetResolver,
    createManyTwitterTweet: actionResolvers.CreateManyTwitterTweetResolver,
    createOneTwitterTweet: actionResolvers.CreateOneTwitterTweetResolver,
    deleteManyTwitterTweet: actionResolvers.DeleteManyTwitterTweetResolver,
    deleteOneTwitterTweet: actionResolvers.DeleteOneTwitterTweetResolver,
    findFirstTwitterTweet: actionResolvers.FindFirstTwitterTweetResolver,
    findFirstTwitterTweetOrThrow: actionResolvers.FindFirstTwitterTweetOrThrowResolver,
    twitterTweets: actionResolvers.FindManyTwitterTweetResolver,
    twitterTweet: actionResolvers.FindUniqueTwitterTweetResolver,
    getTwitterTweet: actionResolvers.FindUniqueTwitterTweetOrThrowResolver,
    groupByTwitterTweet: actionResolvers.GroupByTwitterTweetResolver,
    updateManyTwitterTweet: actionResolvers.UpdateManyTwitterTweetResolver,
    updateOneTwitterTweet: actionResolvers.UpdateOneTwitterTweetResolver,
    upsertOneTwitterTweet: actionResolvers.UpsertOneTwitterTweetResolver
  },
  TwitterAccount: {
    aggregateTwitterAccount: actionResolvers.AggregateTwitterAccountResolver,
    createManyTwitterAccount: actionResolvers.CreateManyTwitterAccountResolver,
    createOneTwitterAccount: actionResolvers.CreateOneTwitterAccountResolver,
    deleteManyTwitterAccount: actionResolvers.DeleteManyTwitterAccountResolver,
    deleteOneTwitterAccount: actionResolvers.DeleteOneTwitterAccountResolver,
    findFirstTwitterAccount: actionResolvers.FindFirstTwitterAccountResolver,
    findFirstTwitterAccountOrThrow: actionResolvers.FindFirstTwitterAccountOrThrowResolver,
    twitterAccounts: actionResolvers.FindManyTwitterAccountResolver,
    twitterAccount: actionResolvers.FindUniqueTwitterAccountResolver,
    getTwitterAccount: actionResolvers.FindUniqueTwitterAccountOrThrowResolver,
    groupByTwitterAccount: actionResolvers.GroupByTwitterAccountResolver,
    updateManyTwitterAccount: actionResolvers.UpdateManyTwitterAccountResolver,
    updateOneTwitterAccount: actionResolvers.UpdateOneTwitterAccountResolver,
    upsertOneTwitterAccount: actionResolvers.UpsertOneTwitterAccountResolver
  },
  TwitterTweetContribution: {
    aggregateTwitterTweetContribution: actionResolvers.AggregateTwitterTweetContributionResolver,
    createManyTwitterTweetContribution: actionResolvers.CreateManyTwitterTweetContributionResolver,
    createOneTwitterTweetContribution: actionResolvers.CreateOneTwitterTweetContributionResolver,
    deleteManyTwitterTweetContribution: actionResolvers.DeleteManyTwitterTweetContributionResolver,
    deleteOneTwitterTweetContribution: actionResolvers.DeleteOneTwitterTweetContributionResolver,
    findFirstTwitterTweetContribution: actionResolvers.FindFirstTwitterTweetContributionResolver,
    findFirstTwitterTweetContributionOrThrow: actionResolvers.FindFirstTwitterTweetContributionOrThrowResolver,
    twitterTweetContributions: actionResolvers.FindManyTwitterTweetContributionResolver,
    twitterTweetContribution: actionResolvers.FindUniqueTwitterTweetContributionResolver,
    getTwitterTweetContribution: actionResolvers.FindUniqueTwitterTweetContributionOrThrowResolver,
    groupByTwitterTweetContribution: actionResolvers.GroupByTwitterTweetContributionResolver,
    updateManyTwitterTweetContribution: actionResolvers.UpdateManyTwitterTweetContributionResolver,
    updateOneTwitterTweetContribution: actionResolvers.UpdateOneTwitterTweetContributionResolver,
    upsertOneTwitterTweetContribution: actionResolvers.UpsertOneTwitterTweetContributionResolver
  },
  VerificationSettings: {
    aggregateVerificationSettings: actionResolvers.AggregateVerificationSettingsResolver,
    createManyVerificationSettings: actionResolvers.CreateManyVerificationSettingsResolver,
    createOneVerificationSettings: actionResolvers.CreateOneVerificationSettingsResolver,
    deleteManyVerificationSettings: actionResolvers.DeleteManyVerificationSettingsResolver,
    deleteOneVerificationSettings: actionResolvers.DeleteOneVerificationSettingsResolver,
    findFirstVerificationSettings: actionResolvers.FindFirstVerificationSettingsResolver,
    findFirstVerificationSettingsOrThrow: actionResolvers.FindFirstVerificationSettingsOrThrowResolver,
    findManyVerificationSettings: actionResolvers.FindManyVerificationSettingsResolver,
    findUniqueVerificationSettings: actionResolvers.FindUniqueVerificationSettingsResolver,
    findUniqueVerificationSettingsOrThrow: actionResolvers.FindUniqueVerificationSettingsOrThrowResolver,
    groupByVerificationSettings: actionResolvers.GroupByVerificationSettingsResolver,
    updateManyVerificationSettings: actionResolvers.UpdateManyVerificationSettingsResolver,
    updateOneVerificationSettings: actionResolvers.UpdateOneVerificationSettingsResolver,
    upsertOneVerificationSettings: actionResolvers.UpsertOneVerificationSettingsResolver
  }
};
const crudResolversInfo = {
  User: ["aggregateUser", "createManyUser", "createOneUser", "deleteManyUser", "deleteOneUser", "findFirstUser", "findFirstUserOrThrow", "users", "user", "getUser", "groupByUser", "updateManyUser", "updateOneUser", "upsertOneUser"],
  DiscordUser: ["aggregateDiscordUser", "createManyDiscordUser", "createOneDiscordUser", "deleteManyDiscordUser", "deleteOneDiscordUser", "findFirstDiscordUser", "findFirstDiscordUserOrThrow", "discordUsers", "discordUser", "getDiscordUser", "groupByDiscordUser", "updateManyDiscordUser", "updateOneDiscordUser", "upsertOneDiscordUser"],
  Guild: ["aggregateGuild", "createManyGuild", "createOneGuild", "deleteManyGuild", "deleteOneGuild", "findFirstGuild", "findFirstGuildOrThrow", "guilds", "guild", "getGuild", "groupByGuild", "updateManyGuild", "updateOneGuild", "upsertOneGuild"],
  GuildMembershipStatus: ["aggregateGuildMembershipStatus", "createManyGuildMembershipStatus", "createOneGuildMembershipStatus", "deleteManyGuildMembershipStatus", "deleteOneGuildMembershipStatus", "findFirstGuildMembershipStatus", "findFirstGuildMembershipStatusOrThrow", "guildMembershipStatuses", "guildMembershipStatus", "getGuildMembershipStatus", "groupByGuildMembershipStatus", "updateManyGuildMembershipStatus", "updateOneGuildMembershipStatus", "upsertOneGuildMembershipStatus"],
  GuildUser: ["aggregateGuildUser", "createManyGuildUser", "createOneGuildUser", "deleteManyGuildUser", "deleteOneGuildUser", "findFirstGuildUser", "findFirstGuildUserOrThrow", "guildUsers", "guildUser", "getGuildUser", "groupByGuildUser", "updateManyGuildUser", "updateOneGuildUser", "upsertOneGuildUser"],
  GuildContribution: ["aggregateGuildContribution", "createManyGuildContribution", "createOneGuildContribution", "deleteManyGuildContribution", "deleteOneGuildContribution", "findFirstGuildContribution", "findFirstGuildContributionOrThrow", "guildContributions", "guildContribution", "getGuildContribution", "groupByGuildContribution", "updateManyGuildContribution", "updateOneGuildContribution", "upsertOneGuildContribution"],
  GuildContributionVerificationStatus: ["aggregateGuildContributionVerificationStatus", "createManyGuildContributionVerificationStatus", "createOneGuildContributionVerificationStatus", "deleteManyGuildContributionVerificationStatus", "deleteOneGuildContributionVerificationStatus", "findFirstGuildContributionVerificationStatus", "findFirstGuildContributionVerificationStatusOrThrow", "guildContributionVerificationStatuses", "guildContributionVerificationStatus", "getGuildContributionVerificationStatus", "groupByGuildContributionVerificationStatus", "updateManyGuildContributionVerificationStatus", "updateOneGuildContributionVerificationStatus", "upsertOneGuildContributionVerificationStatus"],
  GuildActivityType: ["aggregateGuildActivityType", "createManyGuildActivityType", "createOneGuildActivityType", "deleteManyGuildActivityType", "deleteOneGuildActivityType", "findFirstGuildActivityType", "findFirstGuildActivityTypeOrThrow", "guildActivityTypes", "guildActivityType", "getGuildActivityType", "groupByGuildActivityType", "updateManyGuildActivityType", "updateOneGuildActivityType", "upsertOneGuildActivityType"],
  IntegrationType: ["aggregateIntegrationType", "createManyIntegrationType", "createOneIntegrationType", "deleteManyIntegrationType", "deleteOneIntegrationType", "findFirstIntegrationType", "findFirstIntegrationTypeOrThrow", "integrationTypes", "integrationType", "getIntegrationType", "groupByIntegrationType", "updateManyIntegrationType", "updateOneIntegrationType", "upsertOneIntegrationType"],
  GuildImportStatus: ["aggregateGuildImportStatus", "createManyGuildImportStatus", "createOneGuildImportStatus", "deleteManyGuildImportStatus", "deleteOneGuildImportStatus", "findFirstGuildImportStatus", "findFirstGuildImportStatusOrThrow", "guildImportStatuses", "guildImportStatus", "getGuildImportStatus", "groupByGuildImportStatus", "updateManyGuildImportStatus", "updateOneGuildImportStatus", "upsertOneGuildImportStatus"],
  GuildImport: ["aggregateGuildImport", "createManyGuildImport", "createOneGuildImport", "deleteManyGuildImport", "deleteOneGuildImport", "findFirstGuildImport", "findFirstGuildImportOrThrow", "guildImports", "guildImport", "getGuildImport", "groupByGuildImport", "updateManyGuildImport", "updateOneGuildImport", "upsertOneGuildImport"],
  ChainType: ["aggregateChainType", "createManyChainType", "createOneChainType", "deleteManyChainType", "deleteOneChainType", "findFirstChainType", "findFirstChainTypeOrThrow", "chainTypes", "chainType", "getChainType", "groupByChainType", "updateManyChainType", "updateOneChainType", "upsertOneChainType"],
  Chain: ["aggregateChain", "createManyChain", "createOneChain", "deleteManyChain", "deleteOneChain", "findFirstChain", "findFirstChainOrThrow", "chains", "chain", "getChain", "groupByChain", "updateManyChain", "updateOneChain", "upsertOneChain"],
  Contribution: ["aggregateContribution", "createManyContribution", "createOneContribution", "deleteManyContribution", "deleteOneContribution", "findFirstContribution", "findFirstContributionOrThrow", "contributions", "contribution", "getContribution", "groupByContribution", "updateManyContribution", "updateOneContribution", "upsertOneContribution"],
  Partner: ["aggregatePartner", "createManyPartner", "createOnePartner", "deleteManyPartner", "deleteOnePartner", "findFirstPartner", "findFirstPartnerOrThrow", "partners", "partner", "getPartner", "groupByPartner", "updateManyPartner", "updateOnePartner", "upsertOnePartner"],
  Attestation: ["aggregateAttestation", "createManyAttestation", "createOneAttestation", "deleteManyAttestation", "deleteOneAttestation", "findFirstAttestation", "findFirstAttestationOrThrow", "attestations", "attestation", "getAttestation", "groupByAttestation", "updateManyAttestation", "updateOneAttestation", "upsertOneAttestation"],
  AttestationConfidence: ["aggregateAttestationConfidence", "createManyAttestationConfidence", "createOneAttestationConfidence", "deleteManyAttestationConfidence", "deleteOneAttestationConfidence", "findFirstAttestationConfidence", "findFirstAttestationConfidenceOrThrow", "attestationConfidences", "attestationConfidence", "getAttestationConfidence", "groupByAttestationConfidence", "updateManyAttestationConfidence", "updateOneAttestationConfidence", "upsertOneAttestationConfidence"],
  AttestationStatus: ["aggregateAttestationStatus", "createManyAttestationStatus", "createOneAttestationStatus", "deleteManyAttestationStatus", "deleteOneAttestationStatus", "findFirstAttestationStatus", "findFirstAttestationStatusOrThrow", "attestationStatuses", "attestationStatus", "getAttestationStatus", "groupByAttestationStatus", "updateManyAttestationStatus", "updateOneAttestationStatus", "upsertOneAttestationStatus"],
  ContributionStatus: ["aggregateContributionStatus", "createManyContributionStatus", "createOneContributionStatus", "deleteManyContributionStatus", "deleteOneContributionStatus", "findFirstContributionStatus", "findFirstContributionStatusOrThrow", "contributionStatuses", "contributionStatus", "getContributionStatus", "groupByContributionStatus", "updateManyContributionStatus", "updateOneContributionStatus", "upsertOneContributionStatus"],
  ActivityType: ["aggregateActivityType", "createManyActivityType", "createOneActivityType", "deleteManyActivityType", "deleteOneActivityType", "findFirstActivityType", "findFirstActivityTypeOrThrow", "activityTypes", "activityType", "getActivityType", "groupByActivityType", "updateManyActivityType", "updateOneActivityType", "upsertOneActivityType"],
  UserActivity: ["aggregateUserActivity", "createManyUserActivity", "createOneUserActivity", "deleteManyUserActivity", "deleteOneUserActivity", "findFirstUserActivity", "findFirstUserActivityOrThrow", "userActivities", "userActivity", "getUserActivity", "groupByUserActivity", "updateManyUserActivity", "updateOneUserActivity", "upsertOneUserActivity"],
  CategoryActivityType: ["aggregateCategoryActivityType", "createManyCategoryActivityType", "createOneCategoryActivityType", "deleteManyCategoryActivityType", "deleteOneCategoryActivityType", "findFirstCategoryActivityType", "findFirstCategoryActivityTypeOrThrow", "categoryActivityTypes", "categoryActivityType", "getCategoryActivityType", "groupByCategoryActivityType", "updateManyCategoryActivityType", "updateOneCategoryActivityType", "upsertOneCategoryActivityType"],
  CategoryActivity: ["aggregateCategoryActivity", "createManyCategoryActivity", "createOneCategoryActivity", "deleteManyCategoryActivity", "deleteOneCategoryActivity", "findFirstCategoryActivity", "findFirstCategoryActivityOrThrow", "categoryActivities", "categoryActivity", "getCategoryActivity", "groupByCategoryActivity", "updateManyCategoryActivity", "updateOneCategoryActivity", "upsertOneCategoryActivity"],
  LinearIssue: ["aggregateLinearIssue", "createManyLinearIssue", "createOneLinearIssue", "deleteManyLinearIssue", "deleteOneLinearIssue", "findFirstLinearIssue", "findFirstLinearIssueOrThrow", "linearIssues", "linearIssue", "getLinearIssue", "groupByLinearIssue", "updateManyLinearIssue", "updateOneLinearIssue", "upsertOneLinearIssue"],
  LinearUser: ["aggregateLinearUser", "createManyLinearUser", "createOneLinearUser", "deleteManyLinearUser", "deleteOneLinearUser", "findFirstLinearUser", "findFirstLinearUserOrThrow", "linearUsers", "linearUser", "getLinearUser", "groupByLinearUser", "updateManyLinearUser", "updateOneLinearUser", "upsertOneLinearUser"],
  LinearCycle: ["aggregateLinearCycle", "createManyLinearCycle", "createOneLinearCycle", "deleteManyLinearCycle", "deleteOneLinearCycle", "findFirstLinearCycle", "findFirstLinearCycleOrThrow", "linearCycles", "linearCycle", "getLinearCycle", "groupByLinearCycle", "updateManyLinearCycle", "updateOneLinearCycle", "upsertOneLinearCycle"],
  LinearProject: ["aggregateLinearProject", "createManyLinearProject", "createOneLinearProject", "deleteManyLinearProject", "deleteOneLinearProject", "findFirstLinearProject", "findFirstLinearProjectOrThrow", "linearProjects", "linearProject", "getLinearProject", "groupByLinearProject", "updateManyLinearProject", "updateOneLinearProject", "upsertOneLinearProject"],
  LinearTeam: ["aggregateLinearTeam", "createManyLinearTeam", "createOneLinearTeam", "deleteManyLinearTeam", "deleteOneLinearTeam", "findFirstLinearTeam", "findFirstLinearTeamOrThrow", "linearTeams", "linearTeam", "getLinearTeam", "groupByLinearTeam", "updateManyLinearTeam", "updateOneLinearTeam", "upsertOneLinearTeam"],
  JobRun: ["aggregateJobRun", "createManyJobRun", "createOneJobRun", "deleteManyJobRun", "deleteOneJobRun", "findFirstJobRun", "findFirstJobRunOrThrow", "jobRuns", "jobRun", "getJobRun", "groupByJobRun", "updateManyJobRun", "updateOneJobRun", "upsertOneJobRun"],
  TwitterUser: ["aggregateTwitterUser", "createManyTwitterUser", "createOneTwitterUser", "deleteManyTwitterUser", "deleteOneTwitterUser", "findFirstTwitterUser", "findFirstTwitterUserOrThrow", "twitterUsers", "twitterUser", "getTwitterUser", "groupByTwitterUser", "updateManyTwitterUser", "updateOneTwitterUser", "upsertOneTwitterUser"],
  TwitterTweet: ["aggregateTwitterTweet", "createManyTwitterTweet", "createOneTwitterTweet", "deleteManyTwitterTweet", "deleteOneTwitterTweet", "findFirstTwitterTweet", "findFirstTwitterTweetOrThrow", "twitterTweets", "twitterTweet", "getTwitterTweet", "groupByTwitterTweet", "updateManyTwitterTweet", "updateOneTwitterTweet", "upsertOneTwitterTweet"],
  TwitterAccount: ["aggregateTwitterAccount", "createManyTwitterAccount", "createOneTwitterAccount", "deleteManyTwitterAccount", "deleteOneTwitterAccount", "findFirstTwitterAccount", "findFirstTwitterAccountOrThrow", "twitterAccounts", "twitterAccount", "getTwitterAccount", "groupByTwitterAccount", "updateManyTwitterAccount", "updateOneTwitterAccount", "upsertOneTwitterAccount"],
  TwitterTweetContribution: ["aggregateTwitterTweetContribution", "createManyTwitterTweetContribution", "createOneTwitterTweetContribution", "deleteManyTwitterTweetContribution", "deleteOneTwitterTweetContribution", "findFirstTwitterTweetContribution", "findFirstTwitterTweetContributionOrThrow", "twitterTweetContributions", "twitterTweetContribution", "getTwitterTweetContribution", "groupByTwitterTweetContribution", "updateManyTwitterTweetContribution", "updateOneTwitterTweetContribution", "upsertOneTwitterTweetContribution"],
  VerificationSettings: ["aggregateVerificationSettings", "createManyVerificationSettings", "createOneVerificationSettings", "deleteManyVerificationSettings", "deleteOneVerificationSettings", "findFirstVerificationSettings", "findFirstVerificationSettingsOrThrow", "findManyVerificationSettings", "findUniqueVerificationSettings", "findUniqueVerificationSettingsOrThrow", "groupByVerificationSettings", "updateManyVerificationSettings", "updateOneVerificationSettings", "upsertOneVerificationSettings"]
};
const argsInfo = {
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  CreateOneUserArgs: ["data"],
  DeleteManyUserArgs: ["where"],
  DeleteOneUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueUserArgs: ["where"],
  FindUniqueUserOrThrowArgs: ["where"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyUserArgs: ["data", "where"],
  UpdateOneUserArgs: ["data", "where"],
  UpsertOneUserArgs: ["where", "create", "update"],
  AggregateDiscordUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyDiscordUserArgs: ["data", "skipDuplicates"],
  CreateOneDiscordUserArgs: ["data"],
  DeleteManyDiscordUserArgs: ["where"],
  DeleteOneDiscordUserArgs: ["where"],
  FindFirstDiscordUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstDiscordUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyDiscordUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueDiscordUserArgs: ["where"],
  FindUniqueDiscordUserOrThrowArgs: ["where"],
  GroupByDiscordUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyDiscordUserArgs: ["data", "where"],
  UpdateOneDiscordUserArgs: ["data", "where"],
  UpsertOneDiscordUserArgs: ["where", "create", "update"],
  AggregateGuildArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildArgs: ["data", "skipDuplicates"],
  CreateOneGuildArgs: ["data"],
  DeleteManyGuildArgs: ["where"],
  DeleteOneGuildArgs: ["where"],
  FindFirstGuildArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildArgs: ["where"],
  FindUniqueGuildOrThrowArgs: ["where"],
  GroupByGuildArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildArgs: ["data", "where"],
  UpdateOneGuildArgs: ["data", "where"],
  UpsertOneGuildArgs: ["where", "create", "update"],
  AggregateGuildMembershipStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildMembershipStatusArgs: ["data", "skipDuplicates"],
  CreateOneGuildMembershipStatusArgs: ["data"],
  DeleteManyGuildMembershipStatusArgs: ["where"],
  DeleteOneGuildMembershipStatusArgs: ["where"],
  FindFirstGuildMembershipStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildMembershipStatusOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildMembershipStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildMembershipStatusArgs: ["where"],
  FindUniqueGuildMembershipStatusOrThrowArgs: ["where"],
  GroupByGuildMembershipStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildMembershipStatusArgs: ["data", "where"],
  UpdateOneGuildMembershipStatusArgs: ["data", "where"],
  UpsertOneGuildMembershipStatusArgs: ["where", "create", "update"],
  AggregateGuildUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildUserArgs: ["data", "skipDuplicates"],
  CreateOneGuildUserArgs: ["data"],
  DeleteManyGuildUserArgs: ["where"],
  DeleteOneGuildUserArgs: ["where"],
  FindFirstGuildUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildUserArgs: ["where"],
  FindUniqueGuildUserOrThrowArgs: ["where"],
  GroupByGuildUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildUserArgs: ["data", "where"],
  UpdateOneGuildUserArgs: ["data", "where"],
  UpsertOneGuildUserArgs: ["where", "create", "update"],
  AggregateGuildContributionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildContributionArgs: ["data", "skipDuplicates"],
  CreateOneGuildContributionArgs: ["data"],
  DeleteManyGuildContributionArgs: ["where"],
  DeleteOneGuildContributionArgs: ["where"],
  FindFirstGuildContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildContributionOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildContributionArgs: ["where"],
  FindUniqueGuildContributionOrThrowArgs: ["where"],
  GroupByGuildContributionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildContributionArgs: ["data", "where"],
  UpdateOneGuildContributionArgs: ["data", "where"],
  UpsertOneGuildContributionArgs: ["where", "create", "update"],
  AggregateGuildContributionVerificationStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildContributionVerificationStatusArgs: ["data", "skipDuplicates"],
  CreateOneGuildContributionVerificationStatusArgs: ["data"],
  DeleteManyGuildContributionVerificationStatusArgs: ["where"],
  DeleteOneGuildContributionVerificationStatusArgs: ["where"],
  FindFirstGuildContributionVerificationStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildContributionVerificationStatusOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildContributionVerificationStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildContributionVerificationStatusArgs: ["where"],
  FindUniqueGuildContributionVerificationStatusOrThrowArgs: ["where"],
  GroupByGuildContributionVerificationStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildContributionVerificationStatusArgs: ["data", "where"],
  UpdateOneGuildContributionVerificationStatusArgs: ["data", "where"],
  UpsertOneGuildContributionVerificationStatusArgs: ["where", "create", "update"],
  AggregateGuildActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildActivityTypeArgs: ["data", "skipDuplicates"],
  CreateOneGuildActivityTypeArgs: ["data"],
  DeleteManyGuildActivityTypeArgs: ["where"],
  DeleteOneGuildActivityTypeArgs: ["where"],
  FindFirstGuildActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildActivityTypeOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildActivityTypeArgs: ["where"],
  FindUniqueGuildActivityTypeOrThrowArgs: ["where"],
  GroupByGuildActivityTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildActivityTypeArgs: ["data", "where"],
  UpdateOneGuildActivityTypeArgs: ["data", "where"],
  UpsertOneGuildActivityTypeArgs: ["where", "create", "update"],
  AggregateIntegrationTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyIntegrationTypeArgs: ["data", "skipDuplicates"],
  CreateOneIntegrationTypeArgs: ["data"],
  DeleteManyIntegrationTypeArgs: ["where"],
  DeleteOneIntegrationTypeArgs: ["where"],
  FindFirstIntegrationTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstIntegrationTypeOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyIntegrationTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueIntegrationTypeArgs: ["where"],
  FindUniqueIntegrationTypeOrThrowArgs: ["where"],
  GroupByIntegrationTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyIntegrationTypeArgs: ["data", "where"],
  UpdateOneIntegrationTypeArgs: ["data", "where"],
  UpsertOneIntegrationTypeArgs: ["where", "create", "update"],
  AggregateGuildImportStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildImportStatusArgs: ["data", "skipDuplicates"],
  CreateOneGuildImportStatusArgs: ["data"],
  DeleteManyGuildImportStatusArgs: ["where"],
  DeleteOneGuildImportStatusArgs: ["where"],
  FindFirstGuildImportStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildImportStatusOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildImportStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildImportStatusArgs: ["where"],
  FindUniqueGuildImportStatusOrThrowArgs: ["where"],
  GroupByGuildImportStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildImportStatusArgs: ["data", "where"],
  UpdateOneGuildImportStatusArgs: ["data", "where"],
  UpsertOneGuildImportStatusArgs: ["where", "create", "update"],
  AggregateGuildImportArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyGuildImportArgs: ["data", "skipDuplicates"],
  CreateOneGuildImportArgs: ["data"],
  DeleteManyGuildImportArgs: ["where"],
  DeleteOneGuildImportArgs: ["where"],
  FindFirstGuildImportArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstGuildImportOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildImportArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueGuildImportArgs: ["where"],
  FindUniqueGuildImportOrThrowArgs: ["where"],
  GroupByGuildImportArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyGuildImportArgs: ["data", "where"],
  UpdateOneGuildImportArgs: ["data", "where"],
  UpsertOneGuildImportArgs: ["where", "create", "update"],
  AggregateChainTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyChainTypeArgs: ["data", "skipDuplicates"],
  CreateOneChainTypeArgs: ["data"],
  DeleteManyChainTypeArgs: ["where"],
  DeleteOneChainTypeArgs: ["where"],
  FindFirstChainTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstChainTypeOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyChainTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueChainTypeArgs: ["where"],
  FindUniqueChainTypeOrThrowArgs: ["where"],
  GroupByChainTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyChainTypeArgs: ["data", "where"],
  UpdateOneChainTypeArgs: ["data", "where"],
  UpsertOneChainTypeArgs: ["where", "create", "update"],
  AggregateChainArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyChainArgs: ["data", "skipDuplicates"],
  CreateOneChainArgs: ["data"],
  DeleteManyChainArgs: ["where"],
  DeleteOneChainArgs: ["where"],
  FindFirstChainArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstChainOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyChainArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueChainArgs: ["where"],
  FindUniqueChainOrThrowArgs: ["where"],
  GroupByChainArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyChainArgs: ["data", "where"],
  UpdateOneChainArgs: ["data", "where"],
  UpsertOneChainArgs: ["where", "create", "update"],
  AggregateContributionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyContributionArgs: ["data", "skipDuplicates"],
  CreateOneContributionArgs: ["data"],
  DeleteManyContributionArgs: ["where"],
  DeleteOneContributionArgs: ["where"],
  FindFirstContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstContributionOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueContributionArgs: ["where"],
  FindUniqueContributionOrThrowArgs: ["where"],
  GroupByContributionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyContributionArgs: ["data", "where"],
  UpdateOneContributionArgs: ["data", "where"],
  UpsertOneContributionArgs: ["where", "create", "update"],
  AggregatePartnerArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyPartnerArgs: ["data", "skipDuplicates"],
  CreateOnePartnerArgs: ["data"],
  DeleteManyPartnerArgs: ["where"],
  DeleteOnePartnerArgs: ["where"],
  FindFirstPartnerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstPartnerOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPartnerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniquePartnerArgs: ["where"],
  FindUniquePartnerOrThrowArgs: ["where"],
  GroupByPartnerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyPartnerArgs: ["data", "where"],
  UpdateOnePartnerArgs: ["data", "where"],
  UpsertOnePartnerArgs: ["where", "create", "update"],
  AggregateAttestationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyAttestationArgs: ["data", "skipDuplicates"],
  CreateOneAttestationArgs: ["data"],
  DeleteManyAttestationArgs: ["where"],
  DeleteOneAttestationArgs: ["where"],
  FindFirstAttestationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstAttestationOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAttestationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueAttestationArgs: ["where"],
  FindUniqueAttestationOrThrowArgs: ["where"],
  GroupByAttestationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAttestationArgs: ["data", "where"],
  UpdateOneAttestationArgs: ["data", "where"],
  UpsertOneAttestationArgs: ["where", "create", "update"],
  AggregateAttestationConfidenceArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyAttestationConfidenceArgs: ["data", "skipDuplicates"],
  CreateOneAttestationConfidenceArgs: ["data"],
  DeleteManyAttestationConfidenceArgs: ["where"],
  DeleteOneAttestationConfidenceArgs: ["where"],
  FindFirstAttestationConfidenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstAttestationConfidenceOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAttestationConfidenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueAttestationConfidenceArgs: ["where"],
  FindUniqueAttestationConfidenceOrThrowArgs: ["where"],
  GroupByAttestationConfidenceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAttestationConfidenceArgs: ["data", "where"],
  UpdateOneAttestationConfidenceArgs: ["data", "where"],
  UpsertOneAttestationConfidenceArgs: ["where", "create", "update"],
  AggregateAttestationStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyAttestationStatusArgs: ["data", "skipDuplicates"],
  CreateOneAttestationStatusArgs: ["data"],
  DeleteManyAttestationStatusArgs: ["where"],
  DeleteOneAttestationStatusArgs: ["where"],
  FindFirstAttestationStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstAttestationStatusOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAttestationStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueAttestationStatusArgs: ["where"],
  FindUniqueAttestationStatusOrThrowArgs: ["where"],
  GroupByAttestationStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAttestationStatusArgs: ["data", "where"],
  UpdateOneAttestationStatusArgs: ["data", "where"],
  UpsertOneAttestationStatusArgs: ["where", "create", "update"],
  AggregateContributionStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyContributionStatusArgs: ["data", "skipDuplicates"],
  CreateOneContributionStatusArgs: ["data"],
  DeleteManyContributionStatusArgs: ["where"],
  DeleteOneContributionStatusArgs: ["where"],
  FindFirstContributionStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstContributionStatusOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyContributionStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueContributionStatusArgs: ["where"],
  FindUniqueContributionStatusOrThrowArgs: ["where"],
  GroupByContributionStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyContributionStatusArgs: ["data", "where"],
  UpdateOneContributionStatusArgs: ["data", "where"],
  UpsertOneContributionStatusArgs: ["where", "create", "update"],
  AggregateActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyActivityTypeArgs: ["data", "skipDuplicates"],
  CreateOneActivityTypeArgs: ["data"],
  DeleteManyActivityTypeArgs: ["where"],
  DeleteOneActivityTypeArgs: ["where"],
  FindFirstActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstActivityTypeOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueActivityTypeArgs: ["where"],
  FindUniqueActivityTypeOrThrowArgs: ["where"],
  GroupByActivityTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyActivityTypeArgs: ["data", "where"],
  UpdateOneActivityTypeArgs: ["data", "where"],
  UpsertOneActivityTypeArgs: ["where", "create", "update"],
  AggregateUserActivityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyUserActivityArgs: ["data", "skipDuplicates"],
  CreateOneUserActivityArgs: ["data"],
  DeleteManyUserActivityArgs: ["where"],
  DeleteOneUserActivityArgs: ["where"],
  FindFirstUserActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstUserActivityOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueUserActivityArgs: ["where"],
  FindUniqueUserActivityOrThrowArgs: ["where"],
  GroupByUserActivityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyUserActivityArgs: ["data", "where"],
  UpdateOneUserActivityArgs: ["data", "where"],
  UpsertOneUserActivityArgs: ["where", "create", "update"],
  AggregateCategoryActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCategoryActivityTypeArgs: ["data", "skipDuplicates"],
  CreateOneCategoryActivityTypeArgs: ["data"],
  DeleteManyCategoryActivityTypeArgs: ["where"],
  DeleteOneCategoryActivityTypeArgs: ["where"],
  FindFirstCategoryActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCategoryActivityTypeOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCategoryActivityTypeArgs: ["where"],
  FindUniqueCategoryActivityTypeOrThrowArgs: ["where"],
  GroupByCategoryActivityTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCategoryActivityTypeArgs: ["data", "where"],
  UpdateOneCategoryActivityTypeArgs: ["data", "where"],
  UpsertOneCategoryActivityTypeArgs: ["where", "create", "update"],
  AggregateCategoryActivityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCategoryActivityArgs: ["data", "skipDuplicates"],
  CreateOneCategoryActivityArgs: ["data"],
  DeleteManyCategoryActivityArgs: ["where"],
  DeleteOneCategoryActivityArgs: ["where"],
  FindFirstCategoryActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCategoryActivityOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCategoryActivityArgs: ["where"],
  FindUniqueCategoryActivityOrThrowArgs: ["where"],
  GroupByCategoryActivityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCategoryActivityArgs: ["data", "where"],
  UpdateOneCategoryActivityArgs: ["data", "where"],
  UpsertOneCategoryActivityArgs: ["where", "create", "update"],
  AggregateLinearIssueArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLinearIssueArgs: ["data", "skipDuplicates"],
  CreateOneLinearIssueArgs: ["data"],
  DeleteManyLinearIssueArgs: ["where"],
  DeleteOneLinearIssueArgs: ["where"],
  FindFirstLinearIssueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLinearIssueOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearIssueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLinearIssueArgs: ["where"],
  FindUniqueLinearIssueOrThrowArgs: ["where"],
  GroupByLinearIssueArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLinearIssueArgs: ["data", "where"],
  UpdateOneLinearIssueArgs: ["data", "where"],
  UpsertOneLinearIssueArgs: ["where", "create", "update"],
  AggregateLinearUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLinearUserArgs: ["data", "skipDuplicates"],
  CreateOneLinearUserArgs: ["data"],
  DeleteManyLinearUserArgs: ["where"],
  DeleteOneLinearUserArgs: ["where"],
  FindFirstLinearUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLinearUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLinearUserArgs: ["where"],
  FindUniqueLinearUserOrThrowArgs: ["where"],
  GroupByLinearUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLinearUserArgs: ["data", "where"],
  UpdateOneLinearUserArgs: ["data", "where"],
  UpsertOneLinearUserArgs: ["where", "create", "update"],
  AggregateLinearCycleArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLinearCycleArgs: ["data", "skipDuplicates"],
  CreateOneLinearCycleArgs: ["data"],
  DeleteManyLinearCycleArgs: ["where"],
  DeleteOneLinearCycleArgs: ["where"],
  FindFirstLinearCycleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLinearCycleOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearCycleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLinearCycleArgs: ["where"],
  FindUniqueLinearCycleOrThrowArgs: ["where"],
  GroupByLinearCycleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLinearCycleArgs: ["data", "where"],
  UpdateOneLinearCycleArgs: ["data", "where"],
  UpsertOneLinearCycleArgs: ["where", "create", "update"],
  AggregateLinearProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLinearProjectArgs: ["data", "skipDuplicates"],
  CreateOneLinearProjectArgs: ["data"],
  DeleteManyLinearProjectArgs: ["where"],
  DeleteOneLinearProjectArgs: ["where"],
  FindFirstLinearProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLinearProjectOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLinearProjectArgs: ["where"],
  FindUniqueLinearProjectOrThrowArgs: ["where"],
  GroupByLinearProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLinearProjectArgs: ["data", "where"],
  UpdateOneLinearProjectArgs: ["data", "where"],
  UpsertOneLinearProjectArgs: ["where", "create", "update"],
  AggregateLinearTeamArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLinearTeamArgs: ["data", "skipDuplicates"],
  CreateOneLinearTeamArgs: ["data"],
  DeleteManyLinearTeamArgs: ["where"],
  DeleteOneLinearTeamArgs: ["where"],
  FindFirstLinearTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLinearTeamOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLinearTeamArgs: ["where"],
  FindUniqueLinearTeamOrThrowArgs: ["where"],
  GroupByLinearTeamArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLinearTeamArgs: ["data", "where"],
  UpdateOneLinearTeamArgs: ["data", "where"],
  UpsertOneLinearTeamArgs: ["where", "create", "update"],
  AggregateJobRunArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyJobRunArgs: ["data", "skipDuplicates"],
  CreateOneJobRunArgs: ["data"],
  DeleteManyJobRunArgs: ["where"],
  DeleteOneJobRunArgs: ["where"],
  FindFirstJobRunArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstJobRunOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyJobRunArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueJobRunArgs: ["where"],
  FindUniqueJobRunOrThrowArgs: ["where"],
  GroupByJobRunArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyJobRunArgs: ["data", "where"],
  UpdateOneJobRunArgs: ["data", "where"],
  UpsertOneJobRunArgs: ["where", "create", "update"],
  AggregateTwitterUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyTwitterUserArgs: ["data", "skipDuplicates"],
  CreateOneTwitterUserArgs: ["data"],
  DeleteManyTwitterUserArgs: ["where"],
  DeleteOneTwitterUserArgs: ["where"],
  FindFirstTwitterUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstTwitterUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueTwitterUserArgs: ["where"],
  FindUniqueTwitterUserOrThrowArgs: ["where"],
  GroupByTwitterUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyTwitterUserArgs: ["data", "where"],
  UpdateOneTwitterUserArgs: ["data", "where"],
  UpsertOneTwitterUserArgs: ["where", "create", "update"],
  AggregateTwitterTweetArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyTwitterTweetArgs: ["data", "skipDuplicates"],
  CreateOneTwitterTweetArgs: ["data"],
  DeleteManyTwitterTweetArgs: ["where"],
  DeleteOneTwitterTweetArgs: ["where"],
  FindFirstTwitterTweetArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstTwitterTweetOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterTweetArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueTwitterTweetArgs: ["where"],
  FindUniqueTwitterTweetOrThrowArgs: ["where"],
  GroupByTwitterTweetArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyTwitterTweetArgs: ["data", "where"],
  UpdateOneTwitterTweetArgs: ["data", "where"],
  UpsertOneTwitterTweetArgs: ["where", "create", "update"],
  AggregateTwitterAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyTwitterAccountArgs: ["data", "skipDuplicates"],
  CreateOneTwitterAccountArgs: ["data"],
  DeleteManyTwitterAccountArgs: ["where"],
  DeleteOneTwitterAccountArgs: ["where"],
  FindFirstTwitterAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstTwitterAccountOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueTwitterAccountArgs: ["where"],
  FindUniqueTwitterAccountOrThrowArgs: ["where"],
  GroupByTwitterAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyTwitterAccountArgs: ["data", "where"],
  UpdateOneTwitterAccountArgs: ["data", "where"],
  UpsertOneTwitterAccountArgs: ["where", "create", "update"],
  AggregateTwitterTweetContributionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyTwitterTweetContributionArgs: ["data", "skipDuplicates"],
  CreateOneTwitterTweetContributionArgs: ["data"],
  DeleteManyTwitterTweetContributionArgs: ["where"],
  DeleteOneTwitterTweetContributionArgs: ["where"],
  FindFirstTwitterTweetContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstTwitterTweetContributionOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterTweetContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueTwitterTweetContributionArgs: ["where"],
  FindUniqueTwitterTweetContributionOrThrowArgs: ["where"],
  GroupByTwitterTweetContributionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyTwitterTweetContributionArgs: ["data", "where"],
  UpdateOneTwitterTweetContributionArgs: ["data", "where"],
  UpsertOneTwitterTweetContributionArgs: ["where", "create", "update"],
  AggregateVerificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyVerificationSettingsArgs: ["data", "skipDuplicates"],
  CreateOneVerificationSettingsArgs: ["data"],
  DeleteManyVerificationSettingsArgs: ["where"],
  DeleteOneVerificationSettingsArgs: ["where"],
  FindFirstVerificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstVerificationSettingsOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyVerificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueVerificationSettingsArgs: ["where"],
  FindUniqueVerificationSettingsOrThrowArgs: ["where"],
  GroupByVerificationSettingsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyVerificationSettingsArgs: ["data", "where"],
  UpdateOneVerificationSettingsArgs: ["data", "where"],
  UpsertOneVerificationSettingsArgs: ["where", "create", "update"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
> = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
> = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
> = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  User: relationResolvers.UserRelationsResolver,
  DiscordUser: relationResolvers.DiscordUserRelationsResolver,
  Guild: relationResolvers.GuildRelationsResolver,
  GuildMembershipStatus: relationResolvers.GuildMembershipStatusRelationsResolver,
  GuildUser: relationResolvers.GuildUserRelationsResolver,
  GuildContribution: relationResolvers.GuildContributionRelationsResolver,
  GuildContributionVerificationStatus: relationResolvers.GuildContributionVerificationStatusRelationsResolver,
  GuildActivityType: relationResolvers.GuildActivityTypeRelationsResolver,
  IntegrationType: relationResolvers.IntegrationTypeRelationsResolver,
  GuildImportStatus: relationResolvers.GuildImportStatusRelationsResolver,
  GuildImport: relationResolvers.GuildImportRelationsResolver,
  ChainType: relationResolvers.ChainTypeRelationsResolver,
  Chain: relationResolvers.ChainRelationsResolver,
  Contribution: relationResolvers.ContributionRelationsResolver,
  Partner: relationResolvers.PartnerRelationsResolver,
  Attestation: relationResolvers.AttestationRelationsResolver,
  AttestationConfidence: relationResolvers.AttestationConfidenceRelationsResolver,
  AttestationStatus: relationResolvers.AttestationStatusRelationsResolver,
  ContributionStatus: relationResolvers.ContributionStatusRelationsResolver,
  ActivityType: relationResolvers.ActivityTypeRelationsResolver,
  UserActivity: relationResolvers.UserActivityRelationsResolver,
  CategoryActivityType: relationResolvers.CategoryActivityTypeRelationsResolver,
  CategoryActivity: relationResolvers.CategoryActivityRelationsResolver,
  LinearIssue: relationResolvers.LinearIssueRelationsResolver,
  LinearUser: relationResolvers.LinearUserRelationsResolver,
  LinearCycle: relationResolvers.LinearCycleRelationsResolver,
  LinearProject: relationResolvers.LinearProjectRelationsResolver,
  LinearTeam: relationResolvers.LinearTeamRelationsResolver,
  TwitterUser: relationResolvers.TwitterUserRelationsResolver,
  TwitterTweet: relationResolvers.TwitterTweetRelationsResolver,
  TwitterAccount: relationResolvers.TwitterAccountRelationsResolver,
  TwitterTweetContribution: relationResolvers.TwitterTweetContributionRelationsResolver,
  VerificationSettings: relationResolvers.VerificationSettingsRelationsResolver
};
const relationResolversInfo = {
  User: ["chain_type", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  DiscordUser: ["user"],
  Guild: ["contributions", "users", "twitter_accounts", "activity_type", "guild_imports", "verificationSettings"],
  GuildMembershipStatus: ["guildUsers"],
  GuildUser: ["user", "guild", "membershipStatus", "guild_import"],
  GuildContribution: ["guild", "contribution", "verificationStatus"],
  GuildContributionVerificationStatus: ["guild_contributions"],
  GuildActivityType: ["guild", "activity_type"],
  IntegrationType: ["guild_imports"],
  GuildImportStatus: ["guild_imports"],
  GuildImport: ["guild", "integration_type", "import_status", "users"],
  ChainType: ["users"],
  Chain: ["contributions"],
  Contribution: ["status", "activity_type", "user", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain"],
  Partner: ["user", "contribution"],
  Attestation: ["confidence", "user", "contribution", "attestation_status"],
  AttestationConfidence: ["attestations"],
  AttestationStatus: ["attestation"],
  ContributionStatus: ["contributions"],
  ActivityType: ["users", "contributions", "categoryActivity", "guilds"],
  UserActivity: ["user", "activity_type"],
  CategoryActivityType: ["category_activity", "activity_type"],
  CategoryActivity: ["activityTypes"],
  LinearIssue: ["assignee", "creator", "cycle", "project", "team", "contribution"],
  LinearUser: ["user", "assigned_issues", "created_issues"],
  LinearCycle: ["issues"],
  LinearProject: ["issues"],
  LinearTeam: ["issues"],
  TwitterUser: ["user", "tweets"],
  TwitterTweet: ["twitter_user", "twitter_tweet_contributions"],
  TwitterAccount: ["guild"],
  TwitterTweetContribution: ["twitter_tweet", "contribution"],
  VerificationSettings: ["guild"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
> = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all"
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  User: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  DiscordUser: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  Guild: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildMembershipStatus: ["id", "createdAt", "updatedAt", "name"],
  GuildUser: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildContribution: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionVerificationStatus: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildActivityType: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  IntegrationType: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatus: ["id", "createdAt", "updatedAt", "name"],
  GuildImport: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  ChainType: ["id", "createdAt", "updatedAt", "name"],
  Chain: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  Contribution: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  Partner: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  Attestation: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationConfidence: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatus: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatus: ["id", "createdAt", "updatedAt", "name"],
  ActivityType: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  UserActivity: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  CategoryActivityType: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivity: ["id", "createdAt", "updatedAt", "name"],
  LinearIssue: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearUser: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearCycle: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearProject: ["id", "name", "linear_id"],
  LinearTeam: ["id", "linear_id", "name", "key"],
  JobRun: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUser: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterTweet: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterAccount: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterTweetContribution: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  VerificationSettings: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateDiscordUser: ["_count", "_avg", "_sum", "_min", "_max"],
  DiscordUserGroupBy: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuild: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildGroupBy: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildMembershipStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildMembershipStatusGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildUser: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildUserGroupBy: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildContribution: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildContributionGroupBy: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildContributionVerificationStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildContributionVerificationStatusGroupBy: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildActivityType: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildActivityTypeGroupBy: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateIntegrationType: ["_count", "_avg", "_sum", "_min", "_max"],
  IntegrationTypeGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildImportStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildImportStatusGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildImport: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildImportGroupBy: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateChainType: ["_count", "_avg", "_sum", "_min", "_max"],
  ChainTypeGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateChain: ["_count", "_avg", "_sum", "_min", "_max"],
  ChainGroupBy: ["id", "createdAt", "updatedAt", "name", "chain_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateContribution: ["_count", "_avg", "_sum", "_min", "_max"],
  ContributionGroupBy: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash", "_count", "_avg", "_sum", "_min", "_max"],
  AggregatePartner: ["_count", "_avg", "_sum", "_min", "_max"],
  PartnerGroupBy: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAttestation: ["_count", "_avg", "_sum", "_min", "_max"],
  AttestationGroupBy: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAttestationConfidence: ["_count", "_avg", "_sum", "_min", "_max"],
  AttestationConfidenceGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAttestationStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  AttestationStatusGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateContributionStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  ContributionStatusGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateActivityType: ["_count", "_avg", "_sum", "_min", "_max"],
  ActivityTypeGroupBy: ["id", "createdAt", "updatedAt", "name", "active", "default", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateUserActivity: ["_count", "_avg", "_sum", "_min", "_max"],
  UserActivityGroupBy: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCategoryActivityType: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryActivityTypeGroupBy: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCategoryActivity: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryActivityGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearIssue: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearIssueGroupBy: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearUser: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearUserGroupBy: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearCycle: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearCycleGroupBy: ["id", "number", "startsAt", "endsAt", "linear_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearProject: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearProjectGroupBy: ["id", "name", "linear_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearTeam: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearTeamGroupBy: ["id", "linear_id", "name", "key", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateJobRun: ["_count", "_avg", "_sum", "_min", "_max"],
  JobRunGroupBy: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterUser: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterUserGroupBy: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterTweet: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterTweetGroupBy: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterAccount: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterAccountGroupBy: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterTweetContribution: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterTweetContributionGroupBy: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateVerificationSettings: ["_count", "_avg", "_sum", "_min", "_max"],
  VerificationSettingsGroupBy: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  UserCount: ["activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "discord_users"],
  UserCountAggregate: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email", "_all"],
  UserAvgAggregate: ["id", "chain_type_id"],
  UserSumAggregate: ["id", "chain_type_id"],
  UserMinAggregate: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserMaxAggregate: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  DiscordUserCountAggregate: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min", "_all"],
  DiscordUserAvgAggregate: ["id", "user_id", "submit_reminder_period_min", "mint_notification_period_min", "new_guild_notification_period_min", "attribution_notification_period_min"],
  DiscordUserSumAggregate: ["id", "user_id", "submit_reminder_period_min", "mint_notification_period_min", "new_guild_notification_period_min", "attribution_notification_period_min"],
  DiscordUserMinAggregate: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserMaxAggregate: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  GuildCount: ["contributions", "users", "twitter_accounts", "activity_type", "guild_imports", "verificationSettings"],
  GuildCountAggregate: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel", "_all"],
  GuildAvgAggregate: ["id"],
  GuildSumAggregate: ["id"],
  GuildMinAggregate: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildMaxAggregate: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildMembershipStatusCount: ["guildUsers"],
  GuildMembershipStatusCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  GuildMembershipStatusAvgAggregate: ["id"],
  GuildMembershipStatusSumAggregate: ["id"],
  GuildMembershipStatusMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  GuildMembershipStatusMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  GuildUserCountAggregate: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id", "_all"],
  GuildUserAvgAggregate: ["id", "user_id", "guild_id", "membership_status_id", "guild_import_id"],
  GuildUserSumAggregate: ["id", "user_id", "guild_id", "membership_status_id", "guild_import_id"],
  GuildUserMinAggregate: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildUserMaxAggregate: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildContributionCountAggregate: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id", "_all"],
  GuildContributionAvgAggregate: ["id", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionSumAggregate: ["id", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionMinAggregate: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionMaxAggregate: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionVerificationStatusCount: ["guild_contributions"],
  GuildContributionVerificationStatusCountAggregate: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold", "_all"],
  GuildContributionVerificationStatusAvgAggregate: ["id", "attestation_threshold"],
  GuildContributionVerificationStatusSumAggregate: ["id", "attestation_threshold"],
  GuildContributionVerificationStatusMinAggregate: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionVerificationStatusMaxAggregate: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildActivityTypeCountAggregate: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id", "_all"],
  GuildActivityTypeAvgAggregate: ["id", "guild_id", "activity_type_id"],
  GuildActivityTypeSumAggregate: ["id", "guild_id", "activity_type_id"],
  GuildActivityTypeMinAggregate: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeMaxAggregate: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  IntegrationTypeCount: ["guild_imports"],
  IntegrationTypeCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  IntegrationTypeAvgAggregate: ["id"],
  IntegrationTypeSumAggregate: ["id"],
  IntegrationTypeMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  IntegrationTypeMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatusCount: ["guild_imports"],
  GuildImportStatusCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  GuildImportStatusAvgAggregate: ["id"],
  GuildImportStatusSumAggregate: ["id"],
  GuildImportStatusMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatusMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  GuildImportCount: ["users"],
  GuildImportCountAggregate: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id", "_all"],
  GuildImportAvgAggregate: ["id", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportSumAggregate: ["id", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportMinAggregate: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportMaxAggregate: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  ChainTypeCount: ["users"],
  ChainTypeCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  ChainTypeAvgAggregate: ["id"],
  ChainTypeSumAggregate: ["id"],
  ChainTypeMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ChainCount: ["contributions"],
  ChainCountAggregate: ["id", "createdAt", "updatedAt", "name", "chain_id", "_all"],
  ChainAvgAggregate: ["id"],
  ChainSumAggregate: ["id"],
  ChainMinAggregate: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  ChainMaxAggregate: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  ContributionCount: ["attestations", "partners", "guilds", "twitter_tweet_contributions"],
  ContributionCountAggregate: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash", "_all"],
  ContributionAvgAggregate: ["id", "status_id", "activity_type_id", "user_id", "chain_id", "on_chain_id"],
  ContributionSumAggregate: ["id", "status_id", "activity_type_id", "user_id", "chain_id", "on_chain_id"],
  ContributionMinAggregate: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  ContributionMaxAggregate: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  PartnerCountAggregate: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "_all"],
  PartnerAvgAggregate: ["id", "user_id", "contribution_id"],
  PartnerSumAggregate: ["id", "user_id", "contribution_id"],
  PartnerMinAggregate: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerMaxAggregate: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  AttestationCountAggregate: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id", "_all"],
  AttestationAvgAggregate: ["id", "confidence_id", "user_id", "contribution_id", "attestation_status_id"],
  AttestationSumAggregate: ["id", "confidence_id", "user_id", "contribution_id", "attestation_status_id"],
  AttestationMinAggregate: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationMaxAggregate: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationConfidenceCount: ["attestations"],
  AttestationConfidenceCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  AttestationConfidenceAvgAggregate: ["id"],
  AttestationConfidenceSumAggregate: ["id"],
  AttestationConfidenceMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatusCount: ["attestation"],
  AttestationStatusCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  AttestationStatusAvgAggregate: ["id"],
  AttestationStatusSumAggregate: ["id"],
  AttestationStatusMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatusMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusCount: ["contributions"],
  ContributionStatusCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  ContributionStatusAvgAggregate: ["id"],
  ContributionStatusSumAggregate: ["id"],
  ContributionStatusMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ActivityTypeCount: ["users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeCountAggregate: ["id", "createdAt", "updatedAt", "name", "active", "default", "_all"],
  ActivityTypeAvgAggregate: ["id"],
  ActivityTypeSumAggregate: ["id"],
  ActivityTypeMinAggregate: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeMaxAggregate: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  UserActivityCountAggregate: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id", "_all"],
  UserActivityAvgAggregate: ["id", "user_id", "activity_type_id"],
  UserActivitySumAggregate: ["id", "user_id", "activity_type_id"],
  UserActivityMinAggregate: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityMaxAggregate: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  CategoryActivityTypeCountAggregate: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id", "_all"],
  CategoryActivityTypeAvgAggregate: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeSumAggregate: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMinAggregate: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMaxAggregate: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityCount: ["activityTypes"],
  CategoryActivityCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  CategoryActivityAvgAggregate: ["id"],
  CategoryActivitySumAggregate: ["id"],
  CategoryActivityMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  LinearIssueCountAggregate: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id", "_all"],
  LinearIssueAvgAggregate: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueSumAggregate: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMinAggregate: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMaxAggregate: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearUserCount: ["assigned_issues", "created_issues"],
  LinearUserCountAggregate: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id", "_all"],
  LinearUserAvgAggregate: ["id", "user_id"],
  LinearUserSumAggregate: ["id", "user_id"],
  LinearUserMinAggregate: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearUserMaxAggregate: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearCycleCount: ["issues"],
  LinearCycleCountAggregate: ["id", "number", "startsAt", "endsAt", "linear_id", "_all"],
  LinearCycleAvgAggregate: ["id", "number"],
  LinearCycleSumAggregate: ["id", "number"],
  LinearCycleMinAggregate: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleMaxAggregate: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearProjectCount: ["issues"],
  LinearProjectCountAggregate: ["id", "name", "linear_id", "_all"],
  LinearProjectAvgAggregate: ["id"],
  LinearProjectSumAggregate: ["id"],
  LinearProjectMinAggregate: ["id", "name", "linear_id"],
  LinearProjectMaxAggregate: ["id", "name", "linear_id"],
  LinearTeamCount: ["issues"],
  LinearTeamCountAggregate: ["id", "linear_id", "name", "key", "_all"],
  LinearTeamAvgAggregate: ["id"],
  LinearTeamSumAggregate: ["id"],
  LinearTeamMinAggregate: ["id", "linear_id", "name", "key"],
  LinearTeamMaxAggregate: ["id", "linear_id", "name", "key"],
  JobRunCountAggregate: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name", "_all"],
  JobRunAvgAggregate: ["id"],
  JobRunSumAggregate: ["id"],
  JobRunMinAggregate: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunMaxAggregate: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUserCount: ["tweets"],
  TwitterUserCountAggregate: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "_all"],
  TwitterUserAvgAggregate: ["id", "user_id"],
  TwitterUserSumAggregate: ["id", "user_id"],
  TwitterUserMinAggregate: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserMaxAggregate: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterTweetCount: ["twitter_tweet_contributions"],
  TwitterTweetCountAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids", "_all"],
  TwitterTweetAvgAggregate: ["id", "twitter_tweet_id", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterTweetSumAggregate: ["id", "twitter_tweet_id", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterTweetMinAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id"],
  TwitterTweetMaxAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id"],
  TwitterAccountCountAggregate: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "_all"],
  TwitterAccountAvgAggregate: ["id", "guild_id"],
  TwitterAccountSumAggregate: ["id", "guild_id"],
  TwitterAccountMinAggregate: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountMaxAggregate: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterTweetContributionCountAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id", "_all"],
  TwitterTweetContributionAvgAggregate: ["id", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionSumAggregate: ["id", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionMinAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionMaxAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  VerificationSettingsCountAggregate: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt", "_all"],
  VerificationSettingsAvgAggregate: ["id", "guild_id", "num_of_attestations"],
  VerificationSettingsSumAggregate: ["id", "guild_id", "num_of_attestations"],
  VerificationSettingsMinAggregate: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsMaxAggregate: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
> = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  UserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserWhereUniqueInput: ["id", "address"],
  UserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email", "_count", "_avg", "_max", "_min", "_sum"],
  UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  DiscordUserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "user", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "user", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserWhereUniqueInput: ["id", "discord_id"],
  DiscordUserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min", "_count", "_avg", "_max", "_min", "_sum"],
  DiscordUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  GuildWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildWhereUniqueInput: ["id", "discord_id"],
  GuildOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel", "_count", "_avg", "_max", "_min", "_sum"],
  GuildScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildMembershipStatusWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "guildUsers"],
  GuildMembershipStatusOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "guildUsers"],
  GuildMembershipStatusWhereUniqueInput: ["id", "name"],
  GuildMembershipStatusOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  GuildMembershipStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  GuildUserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "user", "guild_id", "guild", "membership_status_id", "membershipStatus", "favorite", "guild_import_id", "guild_import"],
  GuildUserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "user_id", "user", "guild_id", "guild", "membership_status_id", "membershipStatus", "favorite", "guild_import_id", "guild_import"],
  GuildUserWhereUniqueInput: ["id", "user_id_guild_id"],
  GuildUserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildContributionWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "guild", "contribution_id", "contribution", "verification_status_id", "verificationStatus"],
  GuildContributionOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "guild_id", "guild", "contribution_id", "contribution", "verification_status_id", "verificationStatus"],
  GuildContributionWhereUniqueInput: ["id", "guild_id_contribution_id"],
  GuildContributionOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildContributionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionVerificationStatusWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold", "guild_contributions"],
  GuildContributionVerificationStatusOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold", "guild_contributions"],
  GuildContributionVerificationStatusWhereUniqueInput: ["id", "name"],
  GuildContributionVerificationStatusOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold", "_count", "_avg", "_max", "_min", "_sum"],
  GuildContributionVerificationStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildActivityTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "guild", "activity_type_id", "activity_type"],
  GuildActivityTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "guild_id", "guild", "activity_type_id", "activity_type"],
  GuildActivityTypeWhereUniqueInput: ["id", "guild_id_activity_type_id"],
  GuildActivityTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildActivityTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  IntegrationTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "guild_imports"],
  IntegrationTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "guild_imports"],
  IntegrationTypeWhereUniqueInput: ["id", "name"],
  IntegrationTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  IntegrationTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  GuildImportStatusWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "guild_imports"],
  GuildImportStatusOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "guild_imports"],
  GuildImportStatusWhereUniqueInput: ["id", "name"],
  GuildImportStatusOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  GuildImportStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  GuildImportWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "authentication_token", "guild_id", "guild", "integration_type_id", "integration_type", "import_status_id", "import_status", "users"],
  GuildImportOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "guild", "integration_type_id", "integration_type", "import_status_id", "import_status", "users"],
  GuildImportWhereUniqueInput: ["id"],
  GuildImportOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildImportScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  ChainTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "users"],
  ChainTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "users"],
  ChainTypeWhereUniqueInput: ["id", "name"],
  ChainTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  ChainTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  ChainWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "chain_id", "contributions"],
  ChainOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "chain_id", "contributions"],
  ChainWhereUniqueInput: ["id", "name", "chain_id"],
  ChainOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "chain_id", "_count", "_avg", "_max", "_min", "_sum"],
  ChainScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "chain_id"],
  ContributionWhereInput: ["AND", "OR", "NOT", "id", "updatedAt", "name", "status_id", "status", "activity_type_id", "activity_type", "user_id", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain_id", "chain", "on_chain_id", "tx_hash"],
  ContributionOrderByWithRelationInput: ["id", "updatedAt", "name", "status_id", "status", "activity_type_id", "activity_type", "user_id", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain_id", "chain", "on_chain_id", "tx_hash"],
  ContributionWhereUniqueInput: ["id", "chain_id_on_chain_id"],
  ContributionOrderByWithAggregationInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash", "_count", "_avg", "_max", "_min", "_sum"],
  ContributionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  PartnerWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "user", "contribution_id", "contribution"],
  PartnerOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "user_id", "user", "contribution_id", "contribution"],
  PartnerWhereUniqueInput: ["id", "user_id_contribution_id"],
  PartnerOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  PartnerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  AttestationWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "confidence_id", "confidence", "user_id", "user", "contribution_id", "contribution", "date_of_attestation", "attestation_status_id", "attestation_status"],
  AttestationOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "confidence_id", "confidence", "user_id", "user", "contribution_id", "contribution", "date_of_attestation", "attestation_status_id", "attestation_status"],
  AttestationWhereUniqueInput: ["id", "user_id_contribution_id"],
  AttestationOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id", "_count", "_avg", "_max", "_min", "_sum"],
  AttestationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationConfidenceWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceWhereUniqueInput: ["id", "name"],
  AttestationConfidenceOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  AttestationConfidenceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  AttestationStatusWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "attestation"],
  AttestationStatusOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "attestation"],
  AttestationStatusWhereUniqueInput: ["id", "name"],
  AttestationStatusOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  AttestationStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  ContributionStatusWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusWhereUniqueInput: ["id", "name"],
  ContributionStatusOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  ContributionStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  ActivityTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeWhereUniqueInput: ["id", "name"],
  ActivityTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "active", "default", "_count", "_avg", "_max", "_min", "_sum"],
  ActivityTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "active", "default"],
  UserActivityWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "user", "activity_type_id", "activity_type"],
  UserActivityOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "user_id", "user", "activity_type_id", "activity_type"],
  UserActivityWhereUniqueInput: ["id", "user_id_activity_type_id"],
  UserActivityOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id", "_count", "_avg", "_max", "_min", "_sum"],
  UserActivityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  CategoryActivityTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "category_activity_id", "category_activity", "activity_type_id", "activity_type"],
  CategoryActivityTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "category_activity_id", "category_activity", "activity_type_id", "activity_type"],
  CategoryActivityTypeWhereUniqueInput: ["id", "category_activity_id_activity_type_id"],
  CategoryActivityTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id", "_count", "_avg", "_max", "_min", "_sum"],
  CategoryActivityTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityWhereUniqueInput: ["id", "name"],
  CategoryActivityOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  CategoryActivityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  LinearIssueWhereInput: ["AND", "OR", "NOT", "id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "assignee", "creator_id", "creator", "cycle_id", "cycle", "project_id", "project", "team_id", "team", "contribution_id", "contribution"],
  LinearIssueOrderByWithRelationInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "assignee", "creator_id", "creator", "cycle_id", "cycle", "project_id", "project", "team_id", "team", "contribution_id", "contribution"],
  LinearIssueWhereUniqueInput: ["id", "linear_id", "contribution_id"],
  LinearIssueOrderByWithAggregationInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearIssueScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearUserWhereInput: ["AND", "OR", "NOT", "id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id", "user", "assigned_issues", "created_issues"],
  LinearUserOrderByWithRelationInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id", "user", "assigned_issues", "created_issues"],
  LinearUserWhereUniqueInput: ["id", "linear_id"],
  LinearUserOrderByWithAggregationInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearCycleWhereInput: ["AND", "OR", "NOT", "id", "number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleOrderByWithRelationInput: ["id", "number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleWhereUniqueInput: ["id", "linear_id"],
  LinearCycleOrderByWithAggregationInput: ["id", "number", "startsAt", "endsAt", "linear_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearCycleScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "number", "startsAt", "endsAt", "linear_id"],
  LinearProjectWhereInput: ["AND", "OR", "NOT", "id", "name", "linear_id", "issues"],
  LinearProjectOrderByWithRelationInput: ["id", "name", "linear_id", "issues"],
  LinearProjectWhereUniqueInput: ["id", "linear_id"],
  LinearProjectOrderByWithAggregationInput: ["id", "name", "linear_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "linear_id"],
  LinearTeamWhereInput: ["AND", "OR", "NOT", "id", "linear_id", "name", "key", "issues"],
  LinearTeamOrderByWithRelationInput: ["id", "linear_id", "name", "key", "issues"],
  LinearTeamWhereUniqueInput: ["id", "linear_id"],
  LinearTeamOrderByWithAggregationInput: ["id", "linear_id", "name", "key", "_count", "_avg", "_max", "_min", "_sum"],
  LinearTeamScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "linear_id", "name", "key"],
  JobRunWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunWhereUniqueInput: ["id"],
  JobRunOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name", "_count", "_avg", "_max", "_min", "_sum"],
  JobRunScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "user", "tweets"],
  TwitterUserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "user", "tweets"],
  TwitterUserWhereUniqueInput: ["id", "twitter_user_id", "username", "user_id"],
  TwitterUserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterTweetWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_user", "twitter_tweet_contribution_ids", "twitter_tweet_contributions"],
  TwitterTweetOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_user", "twitter_tweet_contribution_ids", "twitter_tweet_contributions"],
  TwitterTweetWhereUniqueInput: ["id", "twitter_tweet_id"],
  TwitterTweetOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterTweetScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterAccountWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "account_name", "guild_id", "guild"],
  TwitterAccountOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "guild"],
  TwitterAccountWhereUniqueInput: ["id", "account_name"],
  TwitterAccountOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterTweetContributionWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "twitter_tweet", "contribution_id", "contribution"],
  TwitterTweetContributionOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "twitter_tweet", "contribution_id", "contribution"],
  TwitterTweetContributionWhereUniqueInput: ["id"],
  TwitterTweetContributionOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterTweetContributionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  VerificationSettingsWhereInput: ["AND", "OR", "NOT", "id", "guild_id", "guild", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsOrderByWithRelationInput: ["id", "guild_id", "guild", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsWhereUniqueInput: ["id"],
  VerificationSettingsOrderByWithAggregationInput: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
  VerificationSettingsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  UserCreateInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserUpdateInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateManyInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email"],
  DiscordUserCreateInput: ["createdAt", "updatedAt", "display_name", "discord_id", "user", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserUpdateInput: ["createdAt", "updatedAt", "display_name", "discord_id", "user", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserCreateManyInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserUpdateManyMutationInput: ["createdAt", "updatedAt", "display_name", "discord_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  GuildCreateInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildUpdateInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildCreateManyInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildUpdateManyMutationInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildMembershipStatusCreateInput: ["createdAt", "updatedAt", "name", "guildUsers"],
  GuildMembershipStatusUpdateInput: ["createdAt", "updatedAt", "name", "guildUsers"],
  GuildMembershipStatusCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  GuildMembershipStatusUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  GuildUserCreateInput: ["createdAt", "updatedAt", "user", "guild", "membershipStatus", "favorite", "guild_import"],
  GuildUserUpdateInput: ["createdAt", "updatedAt", "user", "guild", "membershipStatus", "favorite", "guild_import"],
  GuildUserCreateManyInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildUserUpdateManyMutationInput: ["createdAt", "updatedAt", "favorite"],
  GuildContributionCreateInput: ["createdAt", "updatedAt", "guild", "contribution", "verificationStatus"],
  GuildContributionUpdateInput: ["createdAt", "updatedAt", "guild", "contribution", "verificationStatus"],
  GuildContributionCreateManyInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionUpdateManyMutationInput: ["createdAt", "updatedAt"],
  GuildContributionVerificationStatusCreateInput: ["createdAt", "updatedAt", "name", "verified", "attestation_threshold", "guild_contributions"],
  GuildContributionVerificationStatusUpdateInput: ["createdAt", "updatedAt", "name", "verified", "attestation_threshold", "guild_contributions"],
  GuildContributionVerificationStatusCreateManyInput: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionVerificationStatusUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildActivityTypeCreateInput: ["createdAt", "updatedAt", "guild", "activity_type"],
  GuildActivityTypeUpdateInput: ["createdAt", "updatedAt", "guild", "activity_type"],
  GuildActivityTypeCreateManyInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeUpdateManyMutationInput: ["createdAt", "updatedAt"],
  IntegrationTypeCreateInput: ["createdAt", "updatedAt", "name", "guild_imports"],
  IntegrationTypeUpdateInput: ["createdAt", "updatedAt", "name", "guild_imports"],
  IntegrationTypeCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  IntegrationTypeUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  GuildImportStatusCreateInput: ["createdAt", "updatedAt", "name", "guild_imports"],
  GuildImportStatusUpdateInput: ["createdAt", "updatedAt", "name", "guild_imports"],
  GuildImportStatusCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatusUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  GuildImportCreateInput: ["createdAt", "updatedAt", "authentication_token", "guild", "integration_type", "import_status", "users"],
  GuildImportUpdateInput: ["createdAt", "updatedAt", "authentication_token", "guild", "integration_type", "import_status", "users"],
  GuildImportCreateManyInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportUpdateManyMutationInput: ["createdAt", "updatedAt", "authentication_token"],
  ChainTypeCreateInput: ["createdAt", "updatedAt", "name", "users"],
  ChainTypeUpdateInput: ["createdAt", "updatedAt", "name", "users"],
  ChainTypeCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  ChainCreateInput: ["createdAt", "updatedAt", "name", "chain_id", "contributions"],
  ChainUpdateInput: ["createdAt", "updatedAt", "name", "chain_id", "contributions"],
  ChainCreateManyInput: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  ChainUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "chain_id"],
  ContributionCreateInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionUpdateInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateManyInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  ContributionUpdateManyMutationInput: ["updatedAt", "name", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id", "tx_hash"],
  PartnerCreateInput: ["createdAt", "updatedAt", "user", "contribution"],
  PartnerUpdateInput: ["createdAt", "updatedAt", "user", "contribution"],
  PartnerCreateManyInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerUpdateManyMutationInput: ["createdAt", "updatedAt"],
  AttestationCreateInput: ["createdAt", "updatedAt", "confidence", "user", "contribution", "date_of_attestation", "attestation_status"],
  AttestationUpdateInput: ["createdAt", "updatedAt", "confidence", "user", "contribution", "date_of_attestation", "attestation_status"],
  AttestationCreateManyInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationUpdateManyMutationInput: ["createdAt", "updatedAt", "date_of_attestation"],
  AttestationConfidenceCreateInput: ["createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceUpdateInput: ["createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  AttestationStatusCreateInput: ["createdAt", "updatedAt", "name", "attestation"],
  AttestationStatusUpdateInput: ["createdAt", "updatedAt", "name", "attestation"],
  AttestationStatusCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatusUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  ContributionStatusCreateInput: ["createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusUpdateInput: ["createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  ActivityTypeCreateInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeUpdateInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeCreateManyInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "active", "default"],
  UserActivityCreateInput: ["createdAt", "updatedAt", "user", "activity_type"],
  UserActivityUpdateInput: ["createdAt", "updatedAt", "user", "activity_type"],
  UserActivityCreateManyInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityUpdateManyMutationInput: ["createdAt", "updatedAt"],
  CategoryActivityTypeCreateInput: ["createdAt", "updatedAt", "category_activity", "activity_type"],
  CategoryActivityTypeUpdateInput: ["createdAt", "updatedAt", "category_activity", "activity_type"],
  CategoryActivityTypeCreateManyInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeUpdateManyMutationInput: ["createdAt", "updatedAt"],
  CategoryActivityCreateInput: ["createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityUpdateInput: ["createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  LinearIssueCreateInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueUpdateInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueCreateManyInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpdateManyMutationInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url"],
  LinearUserCreateInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user", "assigned_issues", "created_issues"],
  LinearUserUpdateInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user", "assigned_issues", "created_issues"],
  LinearUserCreateManyInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearUserUpdateManyMutationInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token"],
  LinearCycleCreateInput: ["number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleUpdateInput: ["number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleCreateManyInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleUpdateManyMutationInput: ["number", "startsAt", "endsAt", "linear_id"],
  LinearProjectCreateInput: ["name", "linear_id", "issues"],
  LinearProjectUpdateInput: ["name", "linear_id", "issues"],
  LinearProjectCreateManyInput: ["id", "name", "linear_id"],
  LinearProjectUpdateManyMutationInput: ["name", "linear_id"],
  LinearTeamCreateInput: ["linear_id", "name", "key", "issues"],
  LinearTeamUpdateInput: ["linear_id", "name", "key", "issues"],
  LinearTeamCreateManyInput: ["id", "linear_id", "name", "key"],
  LinearTeamUpdateManyMutationInput: ["linear_id", "name", "key"],
  JobRunCreateInput: ["createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunUpdateInput: ["createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunCreateManyInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunUpdateManyMutationInput: ["createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUserCreateInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user", "tweets"],
  TwitterUserUpdateInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user", "tweets"],
  TwitterUserCreateManyInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserUpdateManyMutationInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description"],
  TwitterTweetCreateInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user", "twitter_tweet_contribution_ids", "twitter_tweet_contributions"],
  TwitterTweetUpdateInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user", "twitter_tweet_contribution_ids", "twitter_tweet_contributions"],
  TwitterTweetCreateManyInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterTweetUpdateManyMutationInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_tweet_contribution_ids"],
  TwitterAccountCreateInput: ["createdAt", "updatedAt", "account_name", "guild"],
  TwitterAccountUpdateInput: ["createdAt", "updatedAt", "account_name", "guild"],
  TwitterAccountCreateManyInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountUpdateManyMutationInput: ["createdAt", "updatedAt", "account_name"],
  TwitterTweetContributionCreateInput: ["createdAt", "updatedAt", "twitter_tweet", "contribution"],
  TwitterTweetContributionUpdateInput: ["createdAt", "updatedAt", "twitter_tweet", "contribution"],
  TwitterTweetContributionCreateManyInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionUpdateManyMutationInput: ["createdAt", "updatedAt"],
  VerificationSettingsCreateInput: ["guild", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsUpdateInput: ["guild", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsCreateManyInput: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsUpdateManyMutationInput: ["num_of_attestations", "createdAt", "updatedAt"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  ChainTypeRelationFilter: ["is", "isNot"],
  BoolFilter: ["equals", "not"],
  UserActivityListRelationFilter: ["every", "some", "none"],
  AttestationListRelationFilter: ["every", "some", "none"],
  PartnerListRelationFilter: ["every", "some", "none"],
  ContributionListRelationFilter: ["every", "some", "none"],
  LinearUserListRelationFilter: ["every", "some", "none"],
  GuildUserListRelationFilter: ["every", "some", "none"],
  TwitterUserRelationFilter: ["is", "isNot"],
  DiscordUserListRelationFilter: ["every", "some", "none"],
  UserActivityOrderByRelationAggregateInput: ["_count"],
  AttestationOrderByRelationAggregateInput: ["_count"],
  PartnerOrderByRelationAggregateInput: ["_count"],
  ContributionOrderByRelationAggregateInput: ["_count"],
  LinearUserOrderByRelationAggregateInput: ["_count"],
  GuildUserOrderByRelationAggregateInput: ["_count"],
  DiscordUserOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserAvgOrderByAggregateInput: ["id", "chain_type_id"],
  UserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserSumOrderByAggregateInput: ["id", "chain_type_id"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  UserRelationFilter: ["is", "isNot"],
  DiscordUserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserAvgOrderByAggregateInput: ["id", "user_id", "submit_reminder_period_min", "mint_notification_period_min", "new_guild_notification_period_min", "attribution_notification_period_min"],
  DiscordUserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserSumOrderByAggregateInput: ["id", "user_id", "submit_reminder_period_min", "mint_notification_period_min", "new_guild_notification_period_min", "attribution_notification_period_min"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  EnumGuildStatusFilter: ["equals", "in", "notIn", "not"],
  GuildContributionListRelationFilter: ["every", "some", "none"],
  TwitterAccountListRelationFilter: ["every", "some", "none"],
  GuildActivityTypeListRelationFilter: ["every", "some", "none"],
  GuildImportListRelationFilter: ["every", "some", "none"],
  VerificationSettingsListRelationFilter: ["every", "some", "none"],
  GuildContributionOrderByRelationAggregateInput: ["_count"],
  TwitterAccountOrderByRelationAggregateInput: ["_count"],
  GuildActivityTypeOrderByRelationAggregateInput: ["_count"],
  GuildImportOrderByRelationAggregateInput: ["_count"],
  VerificationSettingsOrderByRelationAggregateInput: ["_count"],
  GuildCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildAvgOrderByAggregateInput: ["id"],
  GuildMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contribution_reporting_channel"],
  GuildSumOrderByAggregateInput: ["id"],
  EnumGuildStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  GuildMembershipStatusCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  GuildMembershipStatusAvgOrderByAggregateInput: ["id"],
  GuildMembershipStatusMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  GuildMembershipStatusMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  GuildMembershipStatusSumOrderByAggregateInput: ["id"],
  GuildRelationFilter: ["is", "isNot"],
  GuildMembershipStatusRelationFilter: ["is", "isNot"],
  GuildImportRelationFilter: ["is", "isNot"],
  GuildUserUser_idGuild_idCompoundUniqueInput: ["user_id", "guild_id"],
  GuildUserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildUserAvgOrderByAggregateInput: ["id", "user_id", "guild_id", "membership_status_id", "guild_import_id"],
  GuildUserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildUserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  GuildUserSumOrderByAggregateInput: ["id", "user_id", "guild_id", "membership_status_id", "guild_import_id"],
  ContributionRelationFilter: ["is", "isNot"],
  GuildContributionVerificationStatusRelationFilter: ["is", "isNot"],
  GuildContributionGuild_idContribution_idCompoundUniqueInput: ["guild_id", "contribution_id"],
  GuildContributionCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionAvgOrderByAggregateInput: ["id", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionSumOrderByAggregateInput: ["id", "guild_id", "contribution_id", "verification_status_id"],
  GuildContributionVerificationStatusCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionVerificationStatusAvgOrderByAggregateInput: ["id", "attestation_threshold"],
  GuildContributionVerificationStatusMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionVerificationStatusMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionVerificationStatusSumOrderByAggregateInput: ["id", "attestation_threshold"],
  ActivityTypeRelationFilter: ["is", "isNot"],
  GuildActivityTypeGuild_idActivity_type_idCompoundUniqueInput: ["guild_id", "activity_type_id"],
  GuildActivityTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeAvgOrderByAggregateInput: ["id", "guild_id", "activity_type_id"],
  GuildActivityTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeSumOrderByAggregateInput: ["id", "guild_id", "activity_type_id"],
  IntegrationTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  IntegrationTypeAvgOrderByAggregateInput: ["id"],
  IntegrationTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  IntegrationTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  IntegrationTypeSumOrderByAggregateInput: ["id"],
  GuildImportStatusCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatusAvgOrderByAggregateInput: ["id"],
  GuildImportStatusMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatusMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  GuildImportStatusSumOrderByAggregateInput: ["id"],
  IntegrationTypeRelationFilter: ["is", "isNot"],
  GuildImportStatusRelationFilter: ["is", "isNot"],
  GuildImportCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportAvgOrderByAggregateInput: ["id", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  GuildImportSumOrderByAggregateInput: ["id", "guild_id", "integration_type_id", "import_status_id"],
  UserListRelationFilter: ["every", "some", "none"],
  UserOrderByRelationAggregateInput: ["_count"],
  ChainTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeAvgOrderByAggregateInput: ["id"],
  ChainTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeSumOrderByAggregateInput: ["id"],
  ChainCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  ChainAvgOrderByAggregateInput: ["id"],
  ChainMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  ChainMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "chain_id"],
  ChainSumOrderByAggregateInput: ["id"],
  ContributionStatusRelationFilter: ["is", "isNot"],
  LinearIssueRelationFilter: ["is", "isNot"],
  TwitterTweetContributionListRelationFilter: ["every", "some", "none"],
  ChainRelationFilter: ["is", "isNot"],
  TwitterTweetContributionOrderByRelationAggregateInput: ["_count"],
  ContributionChain_idOn_chain_idCompoundUniqueInput: ["chain_id", "on_chain_id"],
  ContributionCountOrderByAggregateInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  ContributionAvgOrderByAggregateInput: ["id", "status_id", "activity_type_id", "user_id", "chain_id", "on_chain_id"],
  ContributionMaxOrderByAggregateInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  ContributionMinOrderByAggregateInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  ContributionSumOrderByAggregateInput: ["id", "status_id", "activity_type_id", "user_id", "chain_id", "on_chain_id"],
  PartnerUser_idContribution_idCompoundUniqueInput: ["user_id", "contribution_id"],
  PartnerCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerAvgOrderByAggregateInput: ["id", "user_id", "contribution_id"],
  PartnerMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerSumOrderByAggregateInput: ["id", "user_id", "contribution_id"],
  AttestationConfidenceRelationFilter: ["is", "isNot"],
  AttestationStatusRelationFilter: ["is", "isNot"],
  AttestationUser_idContribution_idCompoundUniqueInput: ["user_id", "contribution_id"],
  AttestationCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationAvgOrderByAggregateInput: ["id", "confidence_id", "user_id", "contribution_id", "attestation_status_id"],
  AttestationMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationSumOrderByAggregateInput: ["id", "confidence_id", "user_id", "contribution_id", "attestation_status_id"],
  AttestationConfidenceCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceAvgOrderByAggregateInput: ["id"],
  AttestationConfidenceMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceSumOrderByAggregateInput: ["id"],
  AttestationStatusCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatusAvgOrderByAggregateInput: ["id"],
  AttestationStatusMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatusMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationStatusSumOrderByAggregateInput: ["id"],
  ContributionStatusCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusAvgOrderByAggregateInput: ["id"],
  ContributionStatusMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusSumOrderByAggregateInput: ["id"],
  CategoryActivityTypeListRelationFilter: ["every", "some", "none"],
  CategoryActivityTypeOrderByRelationAggregateInput: ["_count"],
  ActivityTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeAvgOrderByAggregateInput: ["id"],
  ActivityTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeSumOrderByAggregateInput: ["id"],
  UserActivityUser_idActivity_type_idCompoundUniqueInput: ["user_id", "activity_type_id"],
  UserActivityCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityAvgOrderByAggregateInput: ["id", "user_id", "activity_type_id"],
  UserActivityMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivitySumOrderByAggregateInput: ["id", "user_id", "activity_type_id"],
  CategoryActivityRelationFilter: ["is", "isNot"],
  CategoryActivityTypeCategory_activity_idActivity_type_idCompoundUniqueInput: ["category_activity_id", "activity_type_id"],
  CategoryActivityTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeAvgOrderByAggregateInput: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeSumOrderByAggregateInput: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityAvgOrderByAggregateInput: ["id"],
  CategoryActivityMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivitySumOrderByAggregateInput: ["id"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  BoolNullableFilter: ["equals", "not"],
  LinearUserRelationFilter: ["is", "isNot"],
  LinearCycleRelationFilter: ["is", "isNot"],
  LinearProjectRelationFilter: ["is", "isNot"],
  LinearTeamRelationFilter: ["is", "isNot"],
  LinearIssueCountOrderByAggregateInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueAvgOrderByAggregateInput: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMaxOrderByAggregateInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMinOrderByAggregateInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueSumOrderByAggregateInput: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  LinearIssueListRelationFilter: ["every", "some", "none"],
  LinearIssueOrderByRelationAggregateInput: ["_count"],
  LinearUserCountOrderByAggregateInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearUserAvgOrderByAggregateInput: ["id", "user_id"],
  LinearUserMaxOrderByAggregateInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearUserMinOrderByAggregateInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  LinearUserSumOrderByAggregateInput: ["id", "user_id"],
  LinearCycleCountOrderByAggregateInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleAvgOrderByAggregateInput: ["id", "number"],
  LinearCycleMaxOrderByAggregateInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleMinOrderByAggregateInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleSumOrderByAggregateInput: ["id", "number"],
  LinearProjectCountOrderByAggregateInput: ["id", "name", "linear_id"],
  LinearProjectAvgOrderByAggregateInput: ["id"],
  LinearProjectMaxOrderByAggregateInput: ["id", "name", "linear_id"],
  LinearProjectMinOrderByAggregateInput: ["id", "name", "linear_id"],
  LinearProjectSumOrderByAggregateInput: ["id"],
  LinearTeamCountOrderByAggregateInput: ["id", "linear_id", "name", "key"],
  LinearTeamAvgOrderByAggregateInput: ["id"],
  LinearTeamMaxOrderByAggregateInput: ["id", "linear_id", "name", "key"],
  LinearTeamMinOrderByAggregateInput: ["id", "linear_id", "name", "key"],
  LinearTeamSumOrderByAggregateInput: ["id"],
  JobRunCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunAvgOrderByAggregateInput: ["id"],
  JobRunMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunSumOrderByAggregateInput: ["id"],
  TwitterTweetListRelationFilter: ["every", "some", "none"],
  TwitterTweetOrderByRelationAggregateInput: ["_count"],
  TwitterUserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserAvgOrderByAggregateInput: ["id", "user_id"],
  TwitterUserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserSumOrderByAggregateInput: ["id", "user_id"],
  IntNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
  TwitterTweetCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterTweetAvgOrderByAggregateInput: ["id", "twitter_tweet_id", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterTweetMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id"],
  TwitterTweetMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id"],
  TwitterTweetSumOrderByAggregateInput: ["id", "twitter_tweet_id", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterAccountCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountAvgOrderByAggregateInput: ["id", "guild_id"],
  TwitterAccountMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountSumOrderByAggregateInput: ["id", "guild_id"],
  TwitterTweetRelationFilter: ["is", "isNot"],
  TwitterTweetContributionCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionAvgOrderByAggregateInput: ["id", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  TwitterTweetContributionSumOrderByAggregateInput: ["id", "twitter_tweet_id", "contribution_id"],
  VerificationSettingsCountOrderByAggregateInput: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsAvgOrderByAggregateInput: ["id", "guild_id", "num_of_attestations"],
  VerificationSettingsMaxOrderByAggregateInput: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsMinOrderByAggregateInput: ["id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsSumOrderByAggregateInput: ["id", "guild_id", "num_of_attestations"],
  ChainTypeCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  UserActivityCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  AttestationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  PartnerCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  TwitterUserCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
  DiscordUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  StringFieldUpdateOperationsInput: ["set"],
  ChainTypeUpdateOneRequiredWithoutUsersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  BoolFieldUpdateOperationsInput: ["set"],
  UserActivityUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AttestationUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PartnerUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearUserUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildUserUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TwitterUserUpdateOneWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  DiscordUserUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  UserCreateNestedOneWithoutDiscord_usersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutDiscord_usersNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  GuildContributionCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildUserCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  TwitterAccountCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildActivityTypeCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildImportCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  VerificationSettingsCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumGuildStatusFieldUpdateOperationsInput: ["set"],
  GuildContributionUpdateManyWithoutGuildNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildUserUpdateManyWithoutGuildNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TwitterAccountUpdateManyWithoutGuildNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildActivityTypeUpdateManyWithoutGuildNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildImportUpdateManyWithoutGuildNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  VerificationSettingsUpdateManyWithoutGuildNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildUserCreateNestedManyWithoutMembershipStatusInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildUserUpdateManyWithoutMembershipStatusNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutGuild_usersInput: ["create", "connectOrCreate", "connect"],
  GuildCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  GuildMembershipStatusCreateNestedOneWithoutGuildUsersInput: ["create", "connectOrCreate", "connect"],
  GuildImportCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutGuild_usersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildUpdateOneRequiredWithoutUsersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildMembershipStatusUpdateOneRequiredWithoutGuildUsersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildImportUpdateOneWithoutUsersNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  GuildCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutGuildsInput: ["create", "connectOrCreate", "connect"],
  GuildContributionVerificationStatusCreateNestedOneWithoutGuild_contributionsInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneRequiredWithoutContributionsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutGuildsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildContributionVerificationStatusUpdateOneWithoutGuild_contributionsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  GuildContributionCreateNestedManyWithoutVerificationStatusInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildContributionUpdateManyWithoutVerificationStatusNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildCreateNestedOneWithoutActivity_typeInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutGuildsInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneRequiredWithoutActivity_typeNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutGuildsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildImportCreateNestedManyWithoutIntegration_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildImportUpdateManyWithoutIntegration_typeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildImportCreateNestedManyWithoutImport_statusInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildImportUpdateManyWithoutImport_statusNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildCreateNestedOneWithoutGuild_importsInput: ["create", "connectOrCreate", "connect"],
  IntegrationTypeCreateNestedOneWithoutGuild_importsInput: ["create", "connectOrCreate", "connect"],
  GuildImportStatusCreateNestedOneWithoutGuild_importsInput: ["create", "connectOrCreate", "connect"],
  GuildUserCreateNestedManyWithoutGuild_importInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildUpdateOneRequiredWithoutGuild_importsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  IntegrationTypeUpdateOneRequiredWithoutGuild_importsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildImportStatusUpdateOneRequiredWithoutGuild_importsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildUserUpdateManyWithoutGuild_importNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedManyWithoutChain_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateManyWithoutChain_typeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionCreateNestedManyWithoutChainInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionUpdateManyWithoutChainNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionStatusCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  AttestationCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  PartnerCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildContributionCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueCreateNestedOneWithoutContributionInput: ["create", "connectOrCreate", "connect"],
  TwitterTweetContributionCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  ChainCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  ContributionStatusUpdateOneRequiredWithoutContributionsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutContributionsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutContributionsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AttestationUpdateManyWithoutContributionNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PartnerUpdateManyWithoutContributionNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildContributionUpdateManyWithoutContributionNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueUpdateOneWithoutContributionNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TwitterTweetContributionUpdateManyWithoutContributionNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ChainUpdateOneWithoutContributionsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutContributionPartnersInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutPartnersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutContributionPartnersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutPartnersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AttestationConfidenceCreateNestedOneWithoutAttestationsInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutAttestationsInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutAttestationsInput: ["create", "connectOrCreate", "connect"],
  AttestationStatusCreateNestedOneWithoutAttestationInput: ["create", "connectOrCreate", "connect"],
  AttestationConfidenceUpdateOneWithoutAttestationsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserUpdateOneRequiredWithoutAttestationsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutAttestationsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AttestationStatusUpdateOneWithoutAttestationNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AttestationCreateNestedManyWithoutConfidenceInput: ["create", "connectOrCreate", "createMany", "connect"],
  AttestationUpdateManyWithoutConfidenceNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AttestationCreateNestedManyWithoutAttestation_statusInput: ["create", "connectOrCreate", "createMany", "connect"],
  AttestationUpdateManyWithoutAttestation_statusNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionCreateNestedManyWithoutStatusInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionUpdateManyWithoutStatusNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserActivityCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  CategoryActivityTypeCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildActivityTypeCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserActivityUpdateManyWithoutActivity_typeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionUpdateManyWithoutActivity_typeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CategoryActivityTypeUpdateManyWithoutActivity_typeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildActivityTypeUpdateManyWithoutActivity_typeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutActivitiesInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutActivitiesNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutUsersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CategoryActivityCreateNestedOneWithoutActivityTypesInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutCategoryActivityInput: ["create", "connectOrCreate", "connect"],
  CategoryActivityUpdateOneRequiredWithoutActivityTypesNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutCategoryActivityNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CategoryActivityTypeCreateNestedManyWithoutCategory_activityInput: ["create", "connectOrCreate", "createMany", "connect"],
  CategoryActivityTypeUpdateManyWithoutCategory_activityNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearUserCreateNestedOneWithoutAssigned_issuesInput: ["create", "connectOrCreate", "connect"],
  LinearUserCreateNestedOneWithoutCreated_issuesInput: ["create", "connectOrCreate", "connect"],
  LinearCycleCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
  LinearProjectCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
  LinearTeamCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutLinear_issueInput: ["create", "connectOrCreate", "connect"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableBoolFieldUpdateOperationsInput: ["set"],
  LinearUserUpdateOneWithoutAssigned_issuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearUserUpdateOneWithoutCreated_issuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearCycleUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearProjectUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearTeamUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  ContributionUpdateOneWithoutLinear_issueNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutLinear_usersInput: ["create", "connectOrCreate", "connect"],
  LinearIssueCreateNestedManyWithoutAssigneeInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueCreateNestedManyWithoutCreatorInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneWithoutLinear_usersNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearIssueUpdateManyWithoutAssigneeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueUpdateManyWithoutCreatorNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueCreateNestedManyWithoutCycleInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueUpdateManyWithoutCycleNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueUpdateManyWithoutProjectNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueCreateNestedManyWithoutTeamInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueUpdateManyWithoutTeamNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutTwitter_userInput: ["create", "connectOrCreate", "connect"],
  TwitterTweetCreateNestedManyWithoutTwitter_userInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneWithoutTwitter_userNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TwitterTweetUpdateManyWithoutTwitter_userNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TwitterUserCreateNestedOneWithoutTweetsInput: ["create", "connectOrCreate", "connect"],
  TwitterTweetCreatetwitter_tweet_contribution_idsInput: ["set"],
  TwitterTweetContributionCreateNestedManyWithoutTwitter_tweetInput: ["create", "connectOrCreate", "createMany", "connect"],
  TwitterUserUpdateOneWithoutTweetsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TwitterTweetUpdatetwitter_tweet_contribution_idsInput: ["set", "push"],
  TwitterTweetContributionUpdateManyWithoutTwitter_tweetNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildCreateNestedOneWithoutTwitter_accountsInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneWithoutTwitter_accountsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TwitterTweetCreateNestedOneWithoutTwitter_tweet_contributionsInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutTwitter_tweet_contributionsInput: ["create", "connectOrCreate", "connect"],
  TwitterTweetUpdateOneRequiredWithoutTwitter_tweet_contributionsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutTwitter_tweet_contributionsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildCreateNestedOneWithoutVerificationSettingsInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneWithoutVerificationSettingsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumGuildStatusFilter: ["equals", "in", "notIn", "not"],
  NestedEnumGuildStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolNullableFilter: ["equals", "not"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  ChainTypeCreateWithoutUsersInput: ["createdAt", "updatedAt", "name"],
  ChainTypeCreateOrConnectWithoutUsersInput: ["where", "create"],
  UserActivityCreateWithoutUserInput: ["createdAt", "updatedAt", "activity_type"],
  UserActivityCreateOrConnectWithoutUserInput: ["where", "create"],
  UserActivityCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  AttestationCreateWithoutUserInput: ["createdAt", "updatedAt", "confidence", "contribution", "date_of_attestation", "attestation_status"],
  AttestationCreateOrConnectWithoutUserInput: ["where", "create"],
  AttestationCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  PartnerCreateWithoutUserInput: ["createdAt", "updatedAt", "contribution"],
  PartnerCreateOrConnectWithoutUserInput: ["where", "create"],
  PartnerCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ContributionCreateWithoutUserInput: ["updatedAt", "name", "status", "activity_type", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutUserInput: ["where", "create"],
  ContributionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  LinearUserCreateWithoutUserInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "assigned_issues", "created_issues"],
  LinearUserCreateOrConnectWithoutUserInput: ["where", "create"],
  LinearUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  GuildUserCreateWithoutUserInput: ["createdAt", "updatedAt", "guild", "membershipStatus", "favorite", "guild_import"],
  GuildUserCreateOrConnectWithoutUserInput: ["where", "create"],
  GuildUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  TwitterUserCreateWithoutUserInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "tweets"],
  TwitterUserCreateOrConnectWithoutUserInput: ["where", "create"],
  DiscordUserCreateWithoutUserInput: ["createdAt", "updatedAt", "display_name", "discord_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  DiscordUserCreateOrConnectWithoutUserInput: ["where", "create"],
  DiscordUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ChainTypeUpsertWithoutUsersInput: ["update", "create"],
  ChainTypeUpdateWithoutUsersInput: ["createdAt", "updatedAt", "name"],
  UserActivityUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  UserActivityUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  UserActivityUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  UserActivityScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  AttestationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  AttestationScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  PartnerUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  PartnerUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  PartnerUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  PartnerScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  ContributionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ContributionScalarWhereInput: ["AND", "OR", "NOT", "id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  LinearUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  LinearUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  LinearUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  LinearUserScalarWhereInput: ["AND", "OR", "NOT", "id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user_id"],
  GuildUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  GuildUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  GuildUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  GuildUserScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  TwitterUserUpsertWithoutUserInput: ["update", "create"],
  TwitterUserUpdateWithoutUserInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "tweets"],
  DiscordUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  DiscordUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  DiscordUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  DiscordUserScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  UserCreateWithoutDiscord_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user"],
  UserCreateOrConnectWithoutDiscord_usersInput: ["where", "create"],
  UserUpsertWithoutDiscord_usersInput: ["update", "create"],
  UserUpdateWithoutDiscord_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user"],
  GuildContributionCreateWithoutGuildInput: ["createdAt", "updatedAt", "contribution", "verificationStatus"],
  GuildContributionCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildContributionCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  GuildUserCreateWithoutGuildInput: ["createdAt", "updatedAt", "user", "membershipStatus", "favorite", "guild_import"],
  GuildUserCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildUserCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  TwitterAccountCreateWithoutGuildInput: ["createdAt", "updatedAt", "account_name"],
  TwitterAccountCreateOrConnectWithoutGuildInput: ["where", "create"],
  TwitterAccountCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  GuildActivityTypeCreateWithoutGuildInput: ["createdAt", "updatedAt", "activity_type"],
  GuildActivityTypeCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildActivityTypeCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  GuildImportCreateWithoutGuildInput: ["createdAt", "updatedAt", "authentication_token", "integration_type", "import_status", "users"],
  GuildImportCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildImportCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  VerificationSettingsCreateWithoutGuildInput: ["num_of_attestations", "createdAt", "updatedAt"],
  VerificationSettingsCreateOrConnectWithoutGuildInput: ["where", "create"],
  VerificationSettingsCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  GuildContributionUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildContributionUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildContributionUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  GuildContributionScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "contribution_id", "verification_status_id"],
  GuildUserUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildUserUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildUserUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  TwitterAccountUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  TwitterAccountUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  TwitterAccountUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  TwitterAccountScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "account_name", "guild_id"],
  GuildActivityTypeUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildActivityTypeUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildActivityTypeUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  GuildActivityTypeScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildImportUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildImportUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildImportUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  GuildImportScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id", "import_status_id"],
  VerificationSettingsUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  VerificationSettingsUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  VerificationSettingsUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  VerificationSettingsScalarWhereInput: ["AND", "OR", "NOT", "id", "guild_id", "num_of_attestations", "createdAt", "updatedAt"],
  GuildUserCreateWithoutMembershipStatusInput: ["createdAt", "updatedAt", "user", "guild", "favorite", "guild_import"],
  GuildUserCreateOrConnectWithoutMembershipStatusInput: ["where", "create"],
  GuildUserCreateManyMembershipStatusInputEnvelope: ["data", "skipDuplicates"],
  GuildUserUpsertWithWhereUniqueWithoutMembershipStatusInput: ["where", "update", "create"],
  GuildUserUpdateWithWhereUniqueWithoutMembershipStatusInput: ["where", "data"],
  GuildUserUpdateManyWithWhereWithoutMembershipStatusInput: ["where", "data"],
  UserCreateWithoutGuild_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutGuild_usersInput: ["where", "create"],
  GuildCreateWithoutUsersInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildCreateOrConnectWithoutUsersInput: ["where", "create"],
  GuildMembershipStatusCreateWithoutGuildUsersInput: ["createdAt", "updatedAt", "name"],
  GuildMembershipStatusCreateOrConnectWithoutGuildUsersInput: ["where", "create"],
  GuildImportCreateWithoutUsersInput: ["createdAt", "updatedAt", "authentication_token", "guild", "integration_type", "import_status"],
  GuildImportCreateOrConnectWithoutUsersInput: ["where", "create"],
  UserUpsertWithoutGuild_usersInput: ["update", "create"],
  UserUpdateWithoutGuild_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "twitter_user", "discord_users"],
  GuildUpsertWithoutUsersInput: ["update", "create"],
  GuildUpdateWithoutUsersInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildMembershipStatusUpsertWithoutGuildUsersInput: ["update", "create"],
  GuildMembershipStatusUpdateWithoutGuildUsersInput: ["createdAt", "updatedAt", "name"],
  GuildImportUpsertWithoutUsersInput: ["update", "create"],
  GuildImportUpdateWithoutUsersInput: ["createdAt", "updatedAt", "authentication_token", "guild", "integration_type", "import_status"],
  GuildCreateWithoutContributionsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildCreateOrConnectWithoutContributionsInput: ["where", "create"],
  ContributionCreateWithoutGuildsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutGuildsInput: ["where", "create"],
  GuildContributionVerificationStatusCreateWithoutGuild_contributionsInput: ["createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionVerificationStatusCreateOrConnectWithoutGuild_contributionsInput: ["where", "create"],
  GuildUpsertWithoutContributionsInput: ["update", "create"],
  GuildUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  ContributionUpsertWithoutGuildsInput: ["update", "create"],
  ContributionUpdateWithoutGuildsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  GuildContributionVerificationStatusUpsertWithoutGuild_contributionsInput: ["update", "create"],
  GuildContributionVerificationStatusUpdateWithoutGuild_contributionsInput: ["createdAt", "updatedAt", "name", "verified", "attestation_threshold"],
  GuildContributionCreateWithoutVerificationStatusInput: ["createdAt", "updatedAt", "guild", "contribution"],
  GuildContributionCreateOrConnectWithoutVerificationStatusInput: ["where", "create"],
  GuildContributionCreateManyVerificationStatusInputEnvelope: ["data", "skipDuplicates"],
  GuildContributionUpsertWithWhereUniqueWithoutVerificationStatusInput: ["where", "update", "create"],
  GuildContributionUpdateWithWhereUniqueWithoutVerificationStatusInput: ["where", "data"],
  GuildContributionUpdateManyWithWhereWithoutVerificationStatusInput: ["where", "data"],
  GuildCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  ActivityTypeCreateWithoutGuildsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity"],
  ActivityTypeCreateOrConnectWithoutGuildsInput: ["where", "create"],
  GuildUpsertWithoutActivity_typeInput: ["update", "create"],
  GuildUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  ActivityTypeUpsertWithoutGuildsInput: ["update", "create"],
  ActivityTypeUpdateWithoutGuildsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity"],
  GuildImportCreateWithoutIntegration_typeInput: ["createdAt", "updatedAt", "authentication_token", "guild", "import_status", "users"],
  GuildImportCreateOrConnectWithoutIntegration_typeInput: ["where", "create"],
  GuildImportCreateManyIntegration_typeInputEnvelope: ["data", "skipDuplicates"],
  GuildImportUpsertWithWhereUniqueWithoutIntegration_typeInput: ["where", "update", "create"],
  GuildImportUpdateWithWhereUniqueWithoutIntegration_typeInput: ["where", "data"],
  GuildImportUpdateManyWithWhereWithoutIntegration_typeInput: ["where", "data"],
  GuildImportCreateWithoutImport_statusInput: ["createdAt", "updatedAt", "authentication_token", "guild", "integration_type", "users"],
  GuildImportCreateOrConnectWithoutImport_statusInput: ["where", "create"],
  GuildImportCreateManyImport_statusInputEnvelope: ["data", "skipDuplicates"],
  GuildImportUpsertWithWhereUniqueWithoutImport_statusInput: ["where", "update", "create"],
  GuildImportUpdateWithWhereUniqueWithoutImport_statusInput: ["where", "data"],
  GuildImportUpdateManyWithWhereWithoutImport_statusInput: ["where", "data"],
  GuildCreateWithoutGuild_importsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "verificationSettings"],
  GuildCreateOrConnectWithoutGuild_importsInput: ["where", "create"],
  IntegrationTypeCreateWithoutGuild_importsInput: ["createdAt", "updatedAt", "name"],
  IntegrationTypeCreateOrConnectWithoutGuild_importsInput: ["where", "create"],
  GuildImportStatusCreateWithoutGuild_importsInput: ["createdAt", "updatedAt", "name"],
  GuildImportStatusCreateOrConnectWithoutGuild_importsInput: ["where", "create"],
  GuildUserCreateWithoutGuild_importInput: ["createdAt", "updatedAt", "user", "guild", "membershipStatus", "favorite"],
  GuildUserCreateOrConnectWithoutGuild_importInput: ["where", "create"],
  GuildUserCreateManyGuild_importInputEnvelope: ["data", "skipDuplicates"],
  GuildUpsertWithoutGuild_importsInput: ["update", "create"],
  GuildUpdateWithoutGuild_importsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "verificationSettings"],
  IntegrationTypeUpsertWithoutGuild_importsInput: ["update", "create"],
  IntegrationTypeUpdateWithoutGuild_importsInput: ["createdAt", "updatedAt", "name"],
  GuildImportStatusUpsertWithoutGuild_importsInput: ["update", "create"],
  GuildImportStatusUpdateWithoutGuild_importsInput: ["createdAt", "updatedAt", "name"],
  GuildUserUpsertWithWhereUniqueWithoutGuild_importInput: ["where", "update", "create"],
  GuildUserUpdateWithWhereUniqueWithoutGuild_importInput: ["where", "data"],
  GuildUserUpdateManyWithWhereWithoutGuild_importInput: ["where", "data"],
  UserCreateWithoutChain_typeInput: ["createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutChain_typeInput: ["where", "create"],
  UserCreateManyChain_typeInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithWhereUniqueWithoutChain_typeInput: ["where", "update", "create"],
  UserUpdateWithWhereUniqueWithoutChain_typeInput: ["where", "data"],
  UserUpdateManyWithWhereWithoutChain_typeInput: ["where", "data"],
  UserScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  ContributionCreateWithoutChainInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutChainInput: ["where", "create"],
  ContributionCreateManyChainInputEnvelope: ["data", "skipDuplicates"],
  ContributionUpsertWithWhereUniqueWithoutChainInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutChainInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutChainInput: ["where", "data"],
  ContributionStatusCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name"],
  ContributionStatusCreateOrConnectWithoutContributionsInput: ["where", "create"],
  ActivityTypeCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "categoryActivity", "guilds"],
  ActivityTypeCreateOrConnectWithoutContributionsInput: ["where", "create"],
  UserCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutContributionsInput: ["where", "create"],
  AttestationCreateWithoutContributionInput: ["createdAt", "updatedAt", "confidence", "user", "date_of_attestation", "attestation_status"],
  AttestationCreateOrConnectWithoutContributionInput: ["where", "create"],
  AttestationCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  PartnerCreateWithoutContributionInput: ["createdAt", "updatedAt", "user"],
  PartnerCreateOrConnectWithoutContributionInput: ["where", "create"],
  PartnerCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  GuildContributionCreateWithoutContributionInput: ["createdAt", "updatedAt", "guild", "verificationStatus"],
  GuildContributionCreateOrConnectWithoutContributionInput: ["where", "create"],
  GuildContributionCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueCreateWithoutContributionInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team"],
  LinearIssueCreateOrConnectWithoutContributionInput: ["where", "create"],
  TwitterTweetContributionCreateWithoutContributionInput: ["createdAt", "updatedAt", "twitter_tweet"],
  TwitterTweetContributionCreateOrConnectWithoutContributionInput: ["where", "create"],
  TwitterTweetContributionCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  ChainCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "chain_id"],
  ChainCreateOrConnectWithoutContributionsInput: ["where", "create"],
  ContributionStatusUpsertWithoutContributionsInput: ["update", "create"],
  ContributionStatusUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name"],
  ActivityTypeUpsertWithoutContributionsInput: ["update", "create"],
  ActivityTypeUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "categoryActivity", "guilds"],
  UserUpsertWithoutContributionsInput: ["update", "create"],
  UserUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "linear_users", "guild_users", "twitter_user", "discord_users"],
  AttestationUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  PartnerUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  PartnerUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  PartnerUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  GuildContributionUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  GuildContributionUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  GuildContributionUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  LinearIssueUpsertWithoutContributionInput: ["update", "create"],
  LinearIssueUpdateWithoutContributionInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team"],
  TwitterTweetContributionUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  TwitterTweetContributionUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  TwitterTweetContributionUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  TwitterTweetContributionScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "contribution_id"],
  ChainUpsertWithoutContributionsInput: ["update", "create"],
  ChainUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "chain_id"],
  UserCreateWithoutContributionPartnersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutContributionPartnersInput: ["where", "create"],
  ContributionCreateWithoutPartnersInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutPartnersInput: ["where", "create"],
  UserUpsertWithoutContributionPartnersInput: ["update", "create"],
  UserUpdateWithoutContributionPartnersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ContributionUpsertWithoutPartnersInput: ["update", "create"],
  ContributionUpdateWithoutPartnersInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  AttestationConfidenceCreateWithoutAttestationsInput: ["createdAt", "updatedAt", "name"],
  AttestationConfidenceCreateOrConnectWithoutAttestationsInput: ["where", "create"],
  UserCreateWithoutAttestationsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutAttestationsInput: ["where", "create"],
  ContributionCreateWithoutAttestationsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutAttestationsInput: ["where", "create"],
  AttestationStatusCreateWithoutAttestationInput: ["createdAt", "updatedAt", "name"],
  AttestationStatusCreateOrConnectWithoutAttestationInput: ["where", "create"],
  AttestationConfidenceUpsertWithoutAttestationsInput: ["update", "create"],
  AttestationConfidenceUpdateWithoutAttestationsInput: ["createdAt", "updatedAt", "name"],
  UserUpsertWithoutAttestationsInput: ["update", "create"],
  UserUpdateWithoutAttestationsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ContributionUpsertWithoutAttestationsInput: ["update", "create"],
  ContributionUpdateWithoutAttestationsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  AttestationStatusUpsertWithoutAttestationInput: ["update", "create"],
  AttestationStatusUpdateWithoutAttestationInput: ["createdAt", "updatedAt", "name"],
  AttestationCreateWithoutConfidenceInput: ["createdAt", "updatedAt", "user", "contribution", "date_of_attestation", "attestation_status"],
  AttestationCreateOrConnectWithoutConfidenceInput: ["where", "create"],
  AttestationCreateManyConfidenceInputEnvelope: ["data", "skipDuplicates"],
  AttestationUpsertWithWhereUniqueWithoutConfidenceInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutConfidenceInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutConfidenceInput: ["where", "data"],
  AttestationCreateWithoutAttestation_statusInput: ["createdAt", "updatedAt", "confidence", "user", "contribution", "date_of_attestation"],
  AttestationCreateOrConnectWithoutAttestation_statusInput: ["where", "create"],
  AttestationCreateManyAttestation_statusInputEnvelope: ["data", "skipDuplicates"],
  AttestationUpsertWithWhereUniqueWithoutAttestation_statusInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutAttestation_statusInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutAttestation_statusInput: ["where", "data"],
  ContributionCreateWithoutStatusInput: ["updatedAt", "name", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutStatusInput: ["where", "create"],
  ContributionCreateManyStatusInputEnvelope: ["data", "skipDuplicates"],
  ContributionUpsertWithWhereUniqueWithoutStatusInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutStatusInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutStatusInput: ["where", "data"],
  UserActivityCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "user"],
  UserActivityCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  UserActivityCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  ContributionCreateWithoutActivity_typeInput: ["updatedAt", "name", "status", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  ContributionCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  CategoryActivityTypeCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "category_activity"],
  CategoryActivityTypeCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  CategoryActivityTypeCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  GuildActivityTypeCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "guild"],
  GuildActivityTypeCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  GuildActivityTypeCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  UserActivityUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  UserActivityUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  UserActivityUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  ContributionUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  CategoryActivityTypeUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  CategoryActivityTypeUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  CategoryActivityTypeUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  CategoryActivityTypeScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  GuildActivityTypeUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  GuildActivityTypeUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  GuildActivityTypeUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  UserCreateWithoutActivitiesInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutActivitiesInput: ["where", "create"],
  ActivityTypeCreateWithoutUsersInput: ["createdAt", "updatedAt", "name", "active", "default", "contributions", "categoryActivity", "guilds"],
  ActivityTypeCreateOrConnectWithoutUsersInput: ["where", "create"],
  UserUpsertWithoutActivitiesInput: ["update", "create"],
  UserUpdateWithoutActivitiesInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ActivityTypeUpsertWithoutUsersInput: ["update", "create"],
  ActivityTypeUpdateWithoutUsersInput: ["createdAt", "updatedAt", "name", "active", "default", "contributions", "categoryActivity", "guilds"],
  CategoryActivityCreateWithoutActivityTypesInput: ["createdAt", "updatedAt", "name"],
  CategoryActivityCreateOrConnectWithoutActivityTypesInput: ["where", "create"],
  ActivityTypeCreateWithoutCategoryActivityInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "guilds"],
  ActivityTypeCreateOrConnectWithoutCategoryActivityInput: ["where", "create"],
  CategoryActivityUpsertWithoutActivityTypesInput: ["update", "create"],
  CategoryActivityUpdateWithoutActivityTypesInput: ["createdAt", "updatedAt", "name"],
  ActivityTypeUpsertWithoutCategoryActivityInput: ["update", "create"],
  ActivityTypeUpdateWithoutCategoryActivityInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "guilds"],
  CategoryActivityTypeCreateWithoutCategory_activityInput: ["createdAt", "updatedAt", "activity_type"],
  CategoryActivityTypeCreateOrConnectWithoutCategory_activityInput: ["where", "create"],
  CategoryActivityTypeCreateManyCategory_activityInputEnvelope: ["data", "skipDuplicates"],
  CategoryActivityTypeUpsertWithWhereUniqueWithoutCategory_activityInput: ["where", "update", "create"],
  CategoryActivityTypeUpdateWithWhereUniqueWithoutCategory_activityInput: ["where", "data"],
  CategoryActivityTypeUpdateManyWithWhereWithoutCategory_activityInput: ["where", "data"],
  LinearUserCreateWithoutAssigned_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user", "created_issues"],
  LinearUserCreateOrConnectWithoutAssigned_issuesInput: ["where", "create"],
  LinearUserCreateWithoutCreated_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user", "assigned_issues"],
  LinearUserCreateOrConnectWithoutCreated_issuesInput: ["where", "create"],
  LinearCycleCreateWithoutIssuesInput: ["number", "startsAt", "endsAt", "linear_id"],
  LinearCycleCreateOrConnectWithoutIssuesInput: ["where", "create"],
  LinearProjectCreateWithoutIssuesInput: ["name", "linear_id"],
  LinearProjectCreateOrConnectWithoutIssuesInput: ["where", "create"],
  LinearTeamCreateWithoutIssuesInput: ["linear_id", "name", "key"],
  LinearTeamCreateOrConnectWithoutIssuesInput: ["where", "create"],
  ContributionCreateWithoutLinear_issueInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutLinear_issueInput: ["where", "create"],
  LinearUserUpsertWithoutAssigned_issuesInput: ["update", "create"],
  LinearUserUpdateWithoutAssigned_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user", "created_issues"],
  LinearUserUpsertWithoutCreated_issuesInput: ["update", "create"],
  LinearUserUpdateWithoutCreated_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "user", "assigned_issues"],
  LinearCycleUpsertWithoutIssuesInput: ["update", "create"],
  LinearCycleUpdateWithoutIssuesInput: ["number", "startsAt", "endsAt", "linear_id"],
  LinearProjectUpsertWithoutIssuesInput: ["update", "create"],
  LinearProjectUpdateWithoutIssuesInput: ["name", "linear_id"],
  LinearTeamUpsertWithoutIssuesInput: ["update", "create"],
  LinearTeamUpdateWithoutIssuesInput: ["linear_id", "name", "key"],
  ContributionUpsertWithoutLinear_issueInput: ["update", "create"],
  ContributionUpdateWithoutLinear_issueInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  UserCreateWithoutLinear_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutLinear_usersInput: ["where", "create"],
  LinearIssueCreateWithoutAssigneeInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutAssigneeInput: ["where", "create"],
  LinearIssueCreateManyAssigneeInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueCreateWithoutCreatorInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "cycle", "project", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutCreatorInput: ["where", "create"],
  LinearIssueCreateManyCreatorInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutLinear_usersInput: ["update", "create"],
  UserUpdateWithoutLinear_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "guild_users", "twitter_user", "discord_users"],
  LinearIssueUpsertWithWhereUniqueWithoutAssigneeInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutAssigneeInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutAssigneeInput: ["where", "data"],
  LinearIssueScalarWhereInput: ["AND", "OR", "NOT", "id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpsertWithWhereUniqueWithoutCreatorInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutCreatorInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutCreatorInput: ["where", "data"],
  LinearIssueCreateWithoutCycleInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "project", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutCycleInput: ["where", "create"],
  LinearIssueCreateManyCycleInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueUpsertWithWhereUniqueWithoutCycleInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutCycleInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutCycleInput: ["where", "data"],
  LinearIssueCreateWithoutProjectInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutProjectInput: ["where", "create"],
  LinearIssueCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  LinearIssueCreateWithoutTeamInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "contribution"],
  LinearIssueCreateOrConnectWithoutTeamInput: ["where", "create"],
  LinearIssueCreateManyTeamInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueUpsertWithWhereUniqueWithoutTeamInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutTeamInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutTeamInput: ["where", "data"],
  UserCreateWithoutTwitter_userInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "discord_users"],
  UserCreateOrConnectWithoutTwitter_userInput: ["where", "create"],
  TwitterTweetCreateWithoutTwitter_userInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_tweet_contribution_ids", "twitter_tweet_contributions"],
  TwitterTweetCreateOrConnectWithoutTwitter_userInput: ["where", "create"],
  TwitterTweetCreateManyTwitter_userInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutTwitter_userInput: ["update", "create"],
  UserUpdateWithoutTwitter_userInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "discord_users"],
  TwitterTweetUpsertWithWhereUniqueWithoutTwitter_userInput: ["where", "update", "create"],
  TwitterTweetUpdateWithWhereUniqueWithoutTwitter_userInput: ["where", "data"],
  TwitterTweetUpdateManyWithWhereWithoutTwitter_userInput: ["where", "data"],
  TwitterTweetScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_tweet_contribution_ids"],
  TwitterUserCreateWithoutTweetsInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user"],
  TwitterUserCreateOrConnectWithoutTweetsInput: ["where", "create"],
  TwitterTweetContributionCreateWithoutTwitter_tweetInput: ["createdAt", "updatedAt", "contribution"],
  TwitterTweetContributionCreateOrConnectWithoutTwitter_tweetInput: ["where", "create"],
  TwitterTweetContributionCreateManyTwitter_tweetInputEnvelope: ["data", "skipDuplicates"],
  TwitterUserUpsertWithoutTweetsInput: ["update", "create"],
  TwitterUserUpdateWithoutTweetsInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user"],
  TwitterTweetContributionUpsertWithWhereUniqueWithoutTwitter_tweetInput: ["where", "update", "create"],
  TwitterTweetContributionUpdateWithWhereUniqueWithoutTwitter_tweetInput: ["where", "data"],
  TwitterTweetContributionUpdateManyWithWhereWithoutTwitter_tweetInput: ["where", "data"],
  GuildCreateWithoutTwitter_accountsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  GuildCreateOrConnectWithoutTwitter_accountsInput: ["where", "create"],
  GuildUpsertWithoutTwitter_accountsInput: ["update", "create"],
  GuildUpdateWithoutTwitter_accountsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "activity_type", "contribution_reporting_channel", "guild_imports", "verificationSettings"],
  TwitterTweetCreateWithoutTwitter_tweet_contributionsInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user", "twitter_tweet_contribution_ids"],
  TwitterTweetCreateOrConnectWithoutTwitter_tweet_contributionsInput: ["where", "create"],
  ContributionCreateWithoutTwitter_tweet_contributionsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "chain", "on_chain_id", "tx_hash"],
  ContributionCreateOrConnectWithoutTwitter_tweet_contributionsInput: ["where", "create"],
  TwitterTweetUpsertWithoutTwitter_tweet_contributionsInput: ["update", "create"],
  TwitterTweetUpdateWithoutTwitter_tweet_contributionsInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user", "twitter_tweet_contribution_ids"],
  ContributionUpsertWithoutTwitter_tweet_contributionsInput: ["update", "create"],
  ContributionUpdateWithoutTwitter_tweet_contributionsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "chain", "on_chain_id", "tx_hash"],
  GuildCreateWithoutVerificationSettingsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports"],
  GuildCreateOrConnectWithoutVerificationSettingsInput: ["where", "create"],
  GuildUpsertWithoutVerificationSettingsInput: ["update", "create"],
  GuildUpdateWithoutVerificationSettingsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "status", "contributions", "users", "twitter_accounts", "activity_type", "contribution_reporting_channel", "guild_imports"],
  UserActivityCreateManyUserInput: ["id", "createdAt", "updatedAt", "activity_type_id"],
  AttestationCreateManyUserInput: ["id", "createdAt", "updatedAt", "confidence_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  PartnerCreateManyUserInput: ["id", "createdAt", "updatedAt", "contribution_id"],
  ContributionCreateManyUserInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  LinearUserCreateManyUserInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token"],
  GuildUserCreateManyUserInput: ["id", "createdAt", "updatedAt", "guild_id", "membership_status_id", "favorite", "guild_import_id"],
  DiscordUserCreateManyUserInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  UserActivityUpdateWithoutUserInput: ["createdAt", "updatedAt", "activity_type"],
  AttestationUpdateWithoutUserInput: ["createdAt", "updatedAt", "confidence", "contribution", "date_of_attestation", "attestation_status"],
  PartnerUpdateWithoutUserInput: ["createdAt", "updatedAt", "contribution"],
  ContributionUpdateWithoutUserInput: ["updatedAt", "name", "status", "activity_type", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  LinearUserUpdateWithoutUserInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "access_token", "active_token", "assigned_issues", "created_issues"],
  GuildUserUpdateWithoutUserInput: ["createdAt", "updatedAt", "guild", "membershipStatus", "favorite", "guild_import"],
  DiscordUserUpdateWithoutUserInput: ["createdAt", "updatedAt", "display_name", "discord_id", "access_token", "active_token", "enable_notifications", "enable_submit_reminder", "submit_reminder_period_min", "enable_mint_notification", "mint_notification_period_min", "enable_new_guild_notification", "new_guild_notification_period_min", "enable_attribution_notification", "attribution_notification_period_min"],
  GuildContributionCreateManyGuildInput: ["id", "createdAt", "updatedAt", "contribution_id", "verification_status_id"],
  GuildUserCreateManyGuildInput: ["id", "createdAt", "updatedAt", "user_id", "membership_status_id", "favorite", "guild_import_id"],
  TwitterAccountCreateManyGuildInput: ["id", "createdAt", "updatedAt", "account_name"],
  GuildActivityTypeCreateManyGuildInput: ["id", "createdAt", "updatedAt", "activity_type_id"],
  GuildImportCreateManyGuildInput: ["id", "createdAt", "updatedAt", "authentication_token", "integration_type_id", "import_status_id"],
  VerificationSettingsCreateManyGuildInput: ["id", "num_of_attestations", "createdAt", "updatedAt"],
  GuildContributionUpdateWithoutGuildInput: ["createdAt", "updatedAt", "contribution", "verificationStatus"],
  GuildUserUpdateWithoutGuildInput: ["createdAt", "updatedAt", "user", "membershipStatus", "favorite", "guild_import"],
  TwitterAccountUpdateWithoutGuildInput: ["createdAt", "updatedAt", "account_name"],
  GuildActivityTypeUpdateWithoutGuildInput: ["createdAt", "updatedAt", "activity_type"],
  GuildImportUpdateWithoutGuildInput: ["createdAt", "updatedAt", "authentication_token", "integration_type", "import_status", "users"],
  VerificationSettingsUpdateWithoutGuildInput: ["num_of_attestations", "createdAt", "updatedAt"],
  GuildUserCreateManyMembershipStatusInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "favorite", "guild_import_id"],
  GuildUserUpdateWithoutMembershipStatusInput: ["createdAt", "updatedAt", "user", "guild", "favorite", "guild_import"],
  GuildContributionCreateManyVerificationStatusInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildContributionUpdateWithoutVerificationStatusInput: ["createdAt", "updatedAt", "guild", "contribution"],
  GuildImportCreateManyIntegration_typeInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "import_status_id"],
  GuildImportUpdateWithoutIntegration_typeInput: ["createdAt", "updatedAt", "authentication_token", "guild", "import_status", "users"],
  GuildImportCreateManyImport_statusInput: ["id", "createdAt", "updatedAt", "authentication_token", "guild_id", "integration_type_id"],
  GuildImportUpdateWithoutImport_statusInput: ["createdAt", "updatedAt", "authentication_token", "guild", "integration_type", "users"],
  GuildUserCreateManyGuild_importInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "membership_status_id", "favorite"],
  GuildUserUpdateWithoutGuild_importInput: ["createdAt", "updatedAt", "user", "guild", "membershipStatus", "favorite"],
  UserCreateManyChain_typeInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email"],
  UserUpdateWithoutChain_typeInput: ["createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ContributionCreateManyChainInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id", "tx_hash"],
  ContributionUpdateWithoutChainInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "on_chain_id", "tx_hash"],
  AttestationCreateManyContributionInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "date_of_attestation", "attestation_status_id"],
  PartnerCreateManyContributionInput: ["id", "createdAt", "updatedAt", "user_id"],
  GuildContributionCreateManyContributionInput: ["id", "createdAt", "updatedAt", "guild_id", "verification_status_id"],
  TwitterTweetContributionCreateManyContributionInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id"],
  AttestationUpdateWithoutContributionInput: ["createdAt", "updatedAt", "confidence", "user", "date_of_attestation", "attestation_status"],
  PartnerUpdateWithoutContributionInput: ["createdAt", "updatedAt", "user"],
  GuildContributionUpdateWithoutContributionInput: ["createdAt", "updatedAt", "guild", "verificationStatus"],
  TwitterTweetContributionUpdateWithoutContributionInput: ["createdAt", "updatedAt", "twitter_tweet"],
  AttestationCreateManyConfidenceInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "date_of_attestation", "attestation_status_id"],
  AttestationUpdateWithoutConfidenceInput: ["createdAt", "updatedAt", "user", "contribution", "date_of_attestation", "attestation_status"],
  AttestationCreateManyAttestation_statusInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationUpdateWithoutAttestation_statusInput: ["createdAt", "updatedAt", "confidence", "user", "contribution", "date_of_attestation"],
  ContributionCreateManyStatusInput: ["id", "updatedAt", "name", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  ContributionUpdateWithoutStatusInput: ["updatedAt", "name", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  UserActivityCreateManyActivity_typeInput: ["id", "createdAt", "updatedAt", "user_id"],
  ContributionCreateManyActivity_typeInput: ["id", "updatedAt", "name", "status_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "chain_id", "on_chain_id", "tx_hash"],
  CategoryActivityTypeCreateManyActivity_typeInput: ["id", "createdAt", "updatedAt", "category_activity_id"],
  GuildActivityTypeCreateManyActivity_typeInput: ["id", "createdAt", "updatedAt", "guild_id"],
  UserActivityUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "user"],
  ContributionUpdateWithoutActivity_typeInput: ["updatedAt", "name", "status", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "twitter_tweet_contributions", "chain", "on_chain_id", "tx_hash"],
  CategoryActivityTypeUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "category_activity"],
  GuildActivityTypeUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "guild"],
  CategoryActivityTypeCreateManyCategory_activityInput: ["id", "createdAt", "updatedAt", "activity_type_id"],
  CategoryActivityTypeUpdateWithoutCategory_activityInput: ["createdAt", "updatedAt", "activity_type"],
  LinearIssueCreateManyAssigneeInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueCreateManyCreatorInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpdateWithoutAssigneeInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueUpdateWithoutCreatorInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "cycle", "project", "team", "contribution"],
  LinearIssueCreateManyCycleInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpdateWithoutCycleInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "project", "team", "contribution"],
  LinearIssueCreateManyProjectInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "team_id", "contribution_id"],
  LinearIssueUpdateWithoutProjectInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "team", "contribution"],
  LinearIssueCreateManyTeamInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "contribution_id"],
  LinearIssueUpdateWithoutTeamInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "contribution"],
  TwitterTweetCreateManyTwitter_userInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_tweet_contribution_ids"],
  TwitterTweetUpdateWithoutTwitter_userInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_tweet_contribution_ids", "twitter_tweet_contributions"],
  TwitterTweetContributionCreateManyTwitter_tweetInput: ["id", "createdAt", "updatedAt", "contribution_id"],
  TwitterTweetContributionUpdateWithoutTwitter_tweetInput: ["createdAt", "updatedAt", "contribution"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
> = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

