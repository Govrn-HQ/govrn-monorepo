import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  User: crudResolvers.UserCrudResolver,
  DiscordUser: crudResolvers.DiscordUserCrudResolver,
  Guild: crudResolvers.GuildCrudResolver,
  GuildUser: crudResolvers.GuildUserCrudResolver,
  GuildContribution: crudResolvers.GuildContributionCrudResolver,
  GuildActivityType: crudResolvers.GuildActivityTypeCrudResolver,
  ChainType: crudResolvers.ChainTypeCrudResolver,
  Contribution: crudResolvers.ContributionCrudResolver,
  Partner: crudResolvers.PartnerCrudResolver,
  Attestation: crudResolvers.AttestationCrudResolver,
  AttestationConfidence: crudResolvers.AttestationConfidenceCrudResolver,
  ContributionStatus: crudResolvers.ContributionStatusCrudResolver,
  ActivityType: crudResolvers.ActivityTypeCrudResolver,
  UserActivity: crudResolvers.UserActivityCrudResolver,
  CategoryActivityType: crudResolvers.CategoryActivityTypeCrudResolver,
  CategoryActivity: crudResolvers.CategoryActivityCrudResolver,
  LinearIssue: crudResolvers.LinearIssueCrudResolver,
  LinearUser: crudResolvers.LinearUserCrudResolver,
  LinearCycle: crudResolvers.LinearCycleCrudResolver,
  LinearProject: crudResolvers.LinearProjectCrudResolver,
  LinearTeam: crudResolvers.LinearTeamCrudResolver,
  JobRun: crudResolvers.JobRunCrudResolver,
  TwitterUser: crudResolvers.TwitterUserCrudResolver,
  TwitterTweet: crudResolvers.TwitterTweetCrudResolver,
  TwitterAccount: crudResolvers.TwitterAccountCrudResolver
};
const actionResolversMap = {
  User: {
    user: actionResolvers.FindUniqueUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    users: actionResolvers.FindManyUserResolver,
    createUser: actionResolvers.CreateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    deleteUser: actionResolvers.DeleteUserResolver,
    updateUser: actionResolvers.UpdateUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    upsertUser: actionResolvers.UpsertUserResolver,
    aggregateUser: actionResolvers.AggregateUserResolver,
    groupByUser: actionResolvers.GroupByUserResolver
  },
  DiscordUser: {
    discordUser: actionResolvers.FindUniqueDiscordUserResolver,
    findFirstDiscordUser: actionResolvers.FindFirstDiscordUserResolver,
    discordUsers: actionResolvers.FindManyDiscordUserResolver,
    createDiscordUser: actionResolvers.CreateDiscordUserResolver,
    createManyDiscordUser: actionResolvers.CreateManyDiscordUserResolver,
    deleteDiscordUser: actionResolvers.DeleteDiscordUserResolver,
    updateDiscordUser: actionResolvers.UpdateDiscordUserResolver,
    deleteManyDiscordUser: actionResolvers.DeleteManyDiscordUserResolver,
    updateManyDiscordUser: actionResolvers.UpdateManyDiscordUserResolver,
    upsertDiscordUser: actionResolvers.UpsertDiscordUserResolver,
    aggregateDiscordUser: actionResolvers.AggregateDiscordUserResolver,
    groupByDiscordUser: actionResolvers.GroupByDiscordUserResolver
  },
  Guild: {
    guild: actionResolvers.FindUniqueGuildResolver,
    findFirstGuild: actionResolvers.FindFirstGuildResolver,
    allGuilds: actionResolvers.FindManyGuildResolver,
    createGuild: actionResolvers.CreateGuildResolver,
    createManyGuild: actionResolvers.CreateManyGuildResolver,
    deleteGuild: actionResolvers.DeleteGuildResolver,
    updateGuild: actionResolvers.UpdateGuildResolver,
    deleteManyGuild: actionResolvers.DeleteManyGuildResolver,
    updateManyGuild: actionResolvers.UpdateManyGuildResolver,
    upsertGuild: actionResolvers.UpsertGuildResolver,
    aggregateGuild: actionResolvers.AggregateGuildResolver,
    groupByGuild: actionResolvers.GroupByGuildResolver
  },
  GuildUser: {
    guildUser: actionResolvers.FindUniqueGuildUserResolver,
    findFirstGuildUser: actionResolvers.FindFirstGuildUserResolver,
    guildUsers: actionResolvers.FindManyGuildUserResolver,
    createGuildUser: actionResolvers.CreateGuildUserResolver,
    createManyGuildUser: actionResolvers.CreateManyGuildUserResolver,
    deleteGuildUser: actionResolvers.DeleteGuildUserResolver,
    updateGuildUser: actionResolvers.UpdateGuildUserResolver,
    deleteManyGuildUser: actionResolvers.DeleteManyGuildUserResolver,
    updateManyGuildUser: actionResolvers.UpdateManyGuildUserResolver,
    upsertGuildUser: actionResolvers.UpsertGuildUserResolver,
    aggregateGuildUser: actionResolvers.AggregateGuildUserResolver,
    groupByGuildUser: actionResolvers.GroupByGuildUserResolver
  },
  GuildContribution: {
    guildContribution: actionResolvers.FindUniqueGuildContributionResolver,
    findFirstGuildContribution: actionResolvers.FindFirstGuildContributionResolver,
    guildContributions: actionResolvers.FindManyGuildContributionResolver,
    createGuildContribution: actionResolvers.CreateGuildContributionResolver,
    createManyGuildContribution: actionResolvers.CreateManyGuildContributionResolver,
    deleteGuildContribution: actionResolvers.DeleteGuildContributionResolver,
    updateGuildContribution: actionResolvers.UpdateGuildContributionResolver,
    deleteManyGuildContribution: actionResolvers.DeleteManyGuildContributionResolver,
    updateManyGuildContribution: actionResolvers.UpdateManyGuildContributionResolver,
    upsertGuildContribution: actionResolvers.UpsertGuildContributionResolver,
    aggregateGuildContribution: actionResolvers.AggregateGuildContributionResolver,
    groupByGuildContribution: actionResolvers.GroupByGuildContributionResolver
  },
  GuildActivityType: {
    guildActivityType: actionResolvers.FindUniqueGuildActivityTypeResolver,
    findFirstGuildActivityType: actionResolvers.FindFirstGuildActivityTypeResolver,
    guildActivityTypes: actionResolvers.FindManyGuildActivityTypeResolver,
    createGuildActivityType: actionResolvers.CreateGuildActivityTypeResolver,
    createManyGuildActivityType: actionResolvers.CreateManyGuildActivityTypeResolver,
    deleteGuildActivityType: actionResolvers.DeleteGuildActivityTypeResolver,
    updateGuildActivityType: actionResolvers.UpdateGuildActivityTypeResolver,
    deleteManyGuildActivityType: actionResolvers.DeleteManyGuildActivityTypeResolver,
    updateManyGuildActivityType: actionResolvers.UpdateManyGuildActivityTypeResolver,
    upsertGuildActivityType: actionResolvers.UpsertGuildActivityTypeResolver,
    aggregateGuildActivityType: actionResolvers.AggregateGuildActivityTypeResolver,
    groupByGuildActivityType: actionResolvers.GroupByGuildActivityTypeResolver
  },
  ChainType: {
    chainType: actionResolvers.FindUniqueChainTypeResolver,
    findFirstChainType: actionResolvers.FindFirstChainTypeResolver,
    chainTypes: actionResolvers.FindManyChainTypeResolver,
    createChainType: actionResolvers.CreateChainTypeResolver,
    createManyChainType: actionResolvers.CreateManyChainTypeResolver,
    deleteChainType: actionResolvers.DeleteChainTypeResolver,
    updateChainType: actionResolvers.UpdateChainTypeResolver,
    deleteManyChainType: actionResolvers.DeleteManyChainTypeResolver,
    updateManyChainType: actionResolvers.UpdateManyChainTypeResolver,
    upsertChainType: actionResolvers.UpsertChainTypeResolver,
    aggregateChainType: actionResolvers.AggregateChainTypeResolver,
    groupByChainType: actionResolvers.GroupByChainTypeResolver
  },
  Contribution: {
    contribution: actionResolvers.FindUniqueContributionResolver,
    findFirstContribution: actionResolvers.FindFirstContributionResolver,
    contributions: actionResolvers.FindManyContributionResolver,
    createContribution: actionResolvers.CreateContributionResolver,
    createManyContribution: actionResolvers.CreateManyContributionResolver,
    deleteContribution: actionResolvers.DeleteContributionResolver,
    updateContribution: actionResolvers.UpdateContributionResolver,
    deleteManyContribution: actionResolvers.DeleteManyContributionResolver,
    updateManyContribution: actionResolvers.UpdateManyContributionResolver,
    upsertContribution: actionResolvers.UpsertContributionResolver,
    aggregateContribution: actionResolvers.AggregateContributionResolver,
    groupByContribution: actionResolvers.GroupByContributionResolver
  },
  Partner: {
    partner: actionResolvers.FindUniquePartnerResolver,
    findFirstPartner: actionResolvers.FindFirstPartnerResolver,
    partners: actionResolvers.FindManyPartnerResolver,
    createPartner: actionResolvers.CreatePartnerResolver,
    createManyPartner: actionResolvers.CreateManyPartnerResolver,
    deletePartner: actionResolvers.DeletePartnerResolver,
    updatePartner: actionResolvers.UpdatePartnerResolver,
    deleteManyPartner: actionResolvers.DeleteManyPartnerResolver,
    updateManyPartner: actionResolvers.UpdateManyPartnerResolver,
    upsertPartner: actionResolvers.UpsertPartnerResolver,
    aggregatePartner: actionResolvers.AggregatePartnerResolver,
    groupByPartner: actionResolvers.GroupByPartnerResolver
  },
  Attestation: {
    attestation: actionResolvers.FindUniqueAttestationResolver,
    findFirstAttestation: actionResolvers.FindFirstAttestationResolver,
    attestations: actionResolvers.FindManyAttestationResolver,
    createAttestation: actionResolvers.CreateAttestationResolver,
    createManyAttestation: actionResolvers.CreateManyAttestationResolver,
    deleteAttestation: actionResolvers.DeleteAttestationResolver,
    updateAttestation: actionResolvers.UpdateAttestationResolver,
    deleteManyAttestation: actionResolvers.DeleteManyAttestationResolver,
    updateManyAttestation: actionResolvers.UpdateManyAttestationResolver,
    upsertAttestation: actionResolvers.UpsertAttestationResolver,
    aggregateAttestation: actionResolvers.AggregateAttestationResolver,
    groupByAttestation: actionResolvers.GroupByAttestationResolver
  },
  AttestationConfidence: {
    attestationConfidence: actionResolvers.FindUniqueAttestationConfidenceResolver,
    findFirstAttestationConfidence: actionResolvers.FindFirstAttestationConfidenceResolver,
    attestationConfidences: actionResolvers.FindManyAttestationConfidenceResolver,
    createAttestationConfidence: actionResolvers.CreateAttestationConfidenceResolver,
    createManyAttestationConfidence: actionResolvers.CreateManyAttestationConfidenceResolver,
    deleteAttestationConfidence: actionResolvers.DeleteAttestationConfidenceResolver,
    updateAttestationConfidence: actionResolvers.UpdateAttestationConfidenceResolver,
    deleteManyAttestationConfidence: actionResolvers.DeleteManyAttestationConfidenceResolver,
    updateManyAttestationConfidence: actionResolvers.UpdateManyAttestationConfidenceResolver,
    upsertAttestationConfidence: actionResolvers.UpsertAttestationConfidenceResolver,
    aggregateAttestationConfidence: actionResolvers.AggregateAttestationConfidenceResolver,
    groupByAttestationConfidence: actionResolvers.GroupByAttestationConfidenceResolver
  },
  ContributionStatus: {
    contributionStatus: actionResolvers.FindUniqueContributionStatusResolver,
    findFirstContributionStatus: actionResolvers.FindFirstContributionStatusResolver,
    contributionStatuses: actionResolvers.FindManyContributionStatusResolver,
    createContributionStatus: actionResolvers.CreateContributionStatusResolver,
    createManyContributionStatus: actionResolvers.CreateManyContributionStatusResolver,
    deleteContributionStatus: actionResolvers.DeleteContributionStatusResolver,
    updateContributionStatus: actionResolvers.UpdateContributionStatusResolver,
    deleteManyContributionStatus: actionResolvers.DeleteManyContributionStatusResolver,
    updateManyContributionStatus: actionResolvers.UpdateManyContributionStatusResolver,
    upsertContributionStatus: actionResolvers.UpsertContributionStatusResolver,
    aggregateContributionStatus: actionResolvers.AggregateContributionStatusResolver,
    groupByContributionStatus: actionResolvers.GroupByContributionStatusResolver
  },
  ActivityType: {
    activityType: actionResolvers.FindUniqueActivityTypeResolver,
    findFirstActivityType: actionResolvers.FindFirstActivityTypeResolver,
    activityTypes: actionResolvers.FindManyActivityTypeResolver,
    createActivityType: actionResolvers.CreateActivityTypeResolver,
    createManyActivityType: actionResolvers.CreateManyActivityTypeResolver,
    deleteActivityType: actionResolvers.DeleteActivityTypeResolver,
    updateActivityType: actionResolvers.UpdateActivityTypeResolver,
    deleteManyActivityType: actionResolvers.DeleteManyActivityTypeResolver,
    updateManyActivityType: actionResolvers.UpdateManyActivityTypeResolver,
    upsertActivityType: actionResolvers.UpsertActivityTypeResolver,
    aggregateActivityType: actionResolvers.AggregateActivityTypeResolver,
    groupByActivityType: actionResolvers.GroupByActivityTypeResolver
  },
  UserActivity: {
    userActivity: actionResolvers.FindUniqueUserActivityResolver,
    findFirstUserActivity: actionResolvers.FindFirstUserActivityResolver,
    userActivities: actionResolvers.FindManyUserActivityResolver,
    createUserActivity: actionResolvers.CreateUserActivityResolver,
    createManyUserActivity: actionResolvers.CreateManyUserActivityResolver,
    deleteUserActivity: actionResolvers.DeleteUserActivityResolver,
    updateUserActivity: actionResolvers.UpdateUserActivityResolver,
    deleteManyUserActivity: actionResolvers.DeleteManyUserActivityResolver,
    updateManyUserActivity: actionResolvers.UpdateManyUserActivityResolver,
    upsertUserActivity: actionResolvers.UpsertUserActivityResolver,
    aggregateUserActivity: actionResolvers.AggregateUserActivityResolver,
    groupByUserActivity: actionResolvers.GroupByUserActivityResolver
  },
  CategoryActivityType: {
    categoryActivityType: actionResolvers.FindUniqueCategoryActivityTypeResolver,
    findFirstCategoryActivityType: actionResolvers.FindFirstCategoryActivityTypeResolver,
    categoryActivityTypes: actionResolvers.FindManyCategoryActivityTypeResolver,
    createCategoryActivityType: actionResolvers.CreateCategoryActivityTypeResolver,
    createManyCategoryActivityType: actionResolvers.CreateManyCategoryActivityTypeResolver,
    deleteCategoryActivityType: actionResolvers.DeleteCategoryActivityTypeResolver,
    updateCategoryActivityType: actionResolvers.UpdateCategoryActivityTypeResolver,
    deleteManyCategoryActivityType: actionResolvers.DeleteManyCategoryActivityTypeResolver,
    updateManyCategoryActivityType: actionResolvers.UpdateManyCategoryActivityTypeResolver,
    upsertCategoryActivityType: actionResolvers.UpsertCategoryActivityTypeResolver,
    aggregateCategoryActivityType: actionResolvers.AggregateCategoryActivityTypeResolver,
    groupByCategoryActivityType: actionResolvers.GroupByCategoryActivityTypeResolver
  },
  CategoryActivity: {
    categoryActivity: actionResolvers.FindUniqueCategoryActivityResolver,
    findFirstCategoryActivity: actionResolvers.FindFirstCategoryActivityResolver,
    categoryActivities: actionResolvers.FindManyCategoryActivityResolver,
    createCategoryActivity: actionResolvers.CreateCategoryActivityResolver,
    createManyCategoryActivity: actionResolvers.CreateManyCategoryActivityResolver,
    deleteCategoryActivity: actionResolvers.DeleteCategoryActivityResolver,
    updateCategoryActivity: actionResolvers.UpdateCategoryActivityResolver,
    deleteManyCategoryActivity: actionResolvers.DeleteManyCategoryActivityResolver,
    updateManyCategoryActivity: actionResolvers.UpdateManyCategoryActivityResolver,
    upsertCategoryActivity: actionResolvers.UpsertCategoryActivityResolver,
    aggregateCategoryActivity: actionResolvers.AggregateCategoryActivityResolver,
    groupByCategoryActivity: actionResolvers.GroupByCategoryActivityResolver
  },
  LinearIssue: {
    linearIssue: actionResolvers.FindUniqueLinearIssueResolver,
    findFirstLinearIssue: actionResolvers.FindFirstLinearIssueResolver,
    linearIssues: actionResolvers.FindManyLinearIssueResolver,
    createLinearIssue: actionResolvers.CreateLinearIssueResolver,
    createManyLinearIssue: actionResolvers.CreateManyLinearIssueResolver,
    deleteLinearIssue: actionResolvers.DeleteLinearIssueResolver,
    updateLinearIssue: actionResolvers.UpdateLinearIssueResolver,
    deleteManyLinearIssue: actionResolvers.DeleteManyLinearIssueResolver,
    updateManyLinearIssue: actionResolvers.UpdateManyLinearIssueResolver,
    upsertLinearIssue: actionResolvers.UpsertLinearIssueResolver,
    aggregateLinearIssue: actionResolvers.AggregateLinearIssueResolver,
    groupByLinearIssue: actionResolvers.GroupByLinearIssueResolver
  },
  LinearUser: {
    linearUser: actionResolvers.FindUniqueLinearUserResolver,
    findFirstLinearUser: actionResolvers.FindFirstLinearUserResolver,
    linearUsers: actionResolvers.FindManyLinearUserResolver,
    createLinearUser: actionResolvers.CreateLinearUserResolver,
    createManyLinearUser: actionResolvers.CreateManyLinearUserResolver,
    deleteLinearUser: actionResolvers.DeleteLinearUserResolver,
    updateLinearUser: actionResolvers.UpdateLinearUserResolver,
    deleteManyLinearUser: actionResolvers.DeleteManyLinearUserResolver,
    updateManyLinearUser: actionResolvers.UpdateManyLinearUserResolver,
    upsertLinearUser: actionResolvers.UpsertLinearUserResolver,
    aggregateLinearUser: actionResolvers.AggregateLinearUserResolver,
    groupByLinearUser: actionResolvers.GroupByLinearUserResolver
  },
  LinearCycle: {
    linearCycle: actionResolvers.FindUniqueLinearCycleResolver,
    findFirstLinearCycle: actionResolvers.FindFirstLinearCycleResolver,
    linearCycles: actionResolvers.FindManyLinearCycleResolver,
    createLinearCycle: actionResolvers.CreateLinearCycleResolver,
    createManyLinearCycle: actionResolvers.CreateManyLinearCycleResolver,
    deleteLinearCycle: actionResolvers.DeleteLinearCycleResolver,
    updateLinearCycle: actionResolvers.UpdateLinearCycleResolver,
    deleteManyLinearCycle: actionResolvers.DeleteManyLinearCycleResolver,
    updateManyLinearCycle: actionResolvers.UpdateManyLinearCycleResolver,
    upsertLinearCycle: actionResolvers.UpsertLinearCycleResolver,
    aggregateLinearCycle: actionResolvers.AggregateLinearCycleResolver,
    groupByLinearCycle: actionResolvers.GroupByLinearCycleResolver
  },
  LinearProject: {
    linearProject: actionResolvers.FindUniqueLinearProjectResolver,
    findFirstLinearProject: actionResolvers.FindFirstLinearProjectResolver,
    linearProjects: actionResolvers.FindManyLinearProjectResolver,
    createLinearProject: actionResolvers.CreateLinearProjectResolver,
    createManyLinearProject: actionResolvers.CreateManyLinearProjectResolver,
    deleteLinearProject: actionResolvers.DeleteLinearProjectResolver,
    updateLinearProject: actionResolvers.UpdateLinearProjectResolver,
    deleteManyLinearProject: actionResolvers.DeleteManyLinearProjectResolver,
    updateManyLinearProject: actionResolvers.UpdateManyLinearProjectResolver,
    upsertLinearProject: actionResolvers.UpsertLinearProjectResolver,
    aggregateLinearProject: actionResolvers.AggregateLinearProjectResolver,
    groupByLinearProject: actionResolvers.GroupByLinearProjectResolver
  },
  LinearTeam: {
    linearTeam: actionResolvers.FindUniqueLinearTeamResolver,
    findFirstLinearTeam: actionResolvers.FindFirstLinearTeamResolver,
    linearTeams: actionResolvers.FindManyLinearTeamResolver,
    createLinearTeam: actionResolvers.CreateLinearTeamResolver,
    createManyLinearTeam: actionResolvers.CreateManyLinearTeamResolver,
    deleteLinearTeam: actionResolvers.DeleteLinearTeamResolver,
    updateLinearTeam: actionResolvers.UpdateLinearTeamResolver,
    deleteManyLinearTeam: actionResolvers.DeleteManyLinearTeamResolver,
    updateManyLinearTeam: actionResolvers.UpdateManyLinearTeamResolver,
    upsertLinearTeam: actionResolvers.UpsertLinearTeamResolver,
    aggregateLinearTeam: actionResolvers.AggregateLinearTeamResolver,
    groupByLinearTeam: actionResolvers.GroupByLinearTeamResolver
  },
  JobRun: {
    jobRun: actionResolvers.FindUniqueJobRunResolver,
    findFirstJobRun: actionResolvers.FindFirstJobRunResolver,
    jobRuns: actionResolvers.FindManyJobRunResolver,
    createJobRun: actionResolvers.CreateJobRunResolver,
    createManyJobRun: actionResolvers.CreateManyJobRunResolver,
    deleteJobRun: actionResolvers.DeleteJobRunResolver,
    updateJobRun: actionResolvers.UpdateJobRunResolver,
    deleteManyJobRun: actionResolvers.DeleteManyJobRunResolver,
    updateManyJobRun: actionResolvers.UpdateManyJobRunResolver,
    upsertJobRun: actionResolvers.UpsertJobRunResolver,
    aggregateJobRun: actionResolvers.AggregateJobRunResolver,
    groupByJobRun: actionResolvers.GroupByJobRunResolver
  },
  TwitterUser: {
    twitterUser: actionResolvers.FindUniqueTwitterUserResolver,
    findFirstTwitterUser: actionResolvers.FindFirstTwitterUserResolver,
    twitterUsers: actionResolvers.FindManyTwitterUserResolver,
    createTwitterUser: actionResolvers.CreateTwitterUserResolver,
    createManyTwitterUser: actionResolvers.CreateManyTwitterUserResolver,
    deleteTwitterUser: actionResolvers.DeleteTwitterUserResolver,
    updateTwitterUser: actionResolvers.UpdateTwitterUserResolver,
    deleteManyTwitterUser: actionResolvers.DeleteManyTwitterUserResolver,
    updateManyTwitterUser: actionResolvers.UpdateManyTwitterUserResolver,
    upsertTwitterUser: actionResolvers.UpsertTwitterUserResolver,
    aggregateTwitterUser: actionResolvers.AggregateTwitterUserResolver,
    groupByTwitterUser: actionResolvers.GroupByTwitterUserResolver
  },
  TwitterTweet: {
    twitterTweet: actionResolvers.FindUniqueTwitterTweetResolver,
    findFirstTwitterTweet: actionResolvers.FindFirstTwitterTweetResolver,
    twitterTweets: actionResolvers.FindManyTwitterTweetResolver,
    createTwitterTweet: actionResolvers.CreateTwitterTweetResolver,
    createManyTwitterTweet: actionResolvers.CreateManyTwitterTweetResolver,
    deleteTwitterTweet: actionResolvers.DeleteTwitterTweetResolver,
    updateTwitterTweet: actionResolvers.UpdateTwitterTweetResolver,
    deleteManyTwitterTweet: actionResolvers.DeleteManyTwitterTweetResolver,
    updateManyTwitterTweet: actionResolvers.UpdateManyTwitterTweetResolver,
    upsertTwitterTweet: actionResolvers.UpsertTwitterTweetResolver,
    aggregateTwitterTweet: actionResolvers.AggregateTwitterTweetResolver,
    groupByTwitterTweet: actionResolvers.GroupByTwitterTweetResolver
  },
  TwitterAccount: {
    twitterAccount: actionResolvers.FindUniqueTwitterAccountResolver,
    findFirstTwitterAccount: actionResolvers.FindFirstTwitterAccountResolver,
    twitterAccounts: actionResolvers.FindManyTwitterAccountResolver,
    createTwitterAccount: actionResolvers.CreateTwitterAccountResolver,
    createManyTwitterAccount: actionResolvers.CreateManyTwitterAccountResolver,
    deleteTwitterAccount: actionResolvers.DeleteTwitterAccountResolver,
    updateTwitterAccount: actionResolvers.UpdateTwitterAccountResolver,
    deleteManyTwitterAccount: actionResolvers.DeleteManyTwitterAccountResolver,
    updateManyTwitterAccount: actionResolvers.UpdateManyTwitterAccountResolver,
    upsertTwitterAccount: actionResolvers.UpsertTwitterAccountResolver,
    aggregateTwitterAccount: actionResolvers.AggregateTwitterAccountResolver,
    groupByTwitterAccount: actionResolvers.GroupByTwitterAccountResolver
  }
};
const crudResolversInfo = {
  User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
  DiscordUser: ["discordUser", "findFirstDiscordUser", "discordUsers", "createDiscordUser", "createManyDiscordUser", "deleteDiscordUser", "updateDiscordUser", "deleteManyDiscordUser", "updateManyDiscordUser", "upsertDiscordUser", "aggregateDiscordUser", "groupByDiscordUser"],
  Guild: ["guild", "findFirstGuild", "guilds", "createGuild", "createManyGuild", "deleteGuild", "updateGuild", "deleteManyGuild", "updateManyGuild", "upsertGuild", "aggregateGuild", "groupByGuild"],
  GuildUser: ["guildUser", "findFirstGuildUser", "guildUsers", "createGuildUser", "createManyGuildUser", "deleteGuildUser", "updateGuildUser", "deleteManyGuildUser", "updateManyGuildUser", "upsertGuildUser", "aggregateGuildUser", "groupByGuildUser"],
  GuildContribution: ["guildContribution", "findFirstGuildContribution", "guildContributions", "createGuildContribution", "createManyGuildContribution", "deleteGuildContribution", "updateGuildContribution", "deleteManyGuildContribution", "updateManyGuildContribution", "upsertGuildContribution", "aggregateGuildContribution", "groupByGuildContribution"],
  GuildActivityType: ["guildActivityType", "findFirstGuildActivityType", "guildActivityTypes", "createGuildActivityType", "createManyGuildActivityType", "deleteGuildActivityType", "updateGuildActivityType", "deleteManyGuildActivityType", "updateManyGuildActivityType", "upsertGuildActivityType", "aggregateGuildActivityType", "groupByGuildActivityType"],
  ChainType: ["chainType", "findFirstChainType", "chainTypes", "createChainType", "createManyChainType", "deleteChainType", "updateChainType", "deleteManyChainType", "updateManyChainType", "upsertChainType", "aggregateChainType", "groupByChainType"],
  Contribution: ["contribution", "findFirstContribution", "contributions", "createContribution", "createManyContribution", "deleteContribution", "updateContribution", "deleteManyContribution", "updateManyContribution", "upsertContribution", "aggregateContribution", "groupByContribution"],
  Partner: ["partner", "findFirstPartner", "partners", "createPartner", "createManyPartner", "deletePartner", "updatePartner", "deleteManyPartner", "updateManyPartner", "upsertPartner", "aggregatePartner", "groupByPartner"],
  Attestation: ["attestation", "findFirstAttestation", "attestations", "createAttestation", "createManyAttestation", "deleteAttestation", "updateAttestation", "deleteManyAttestation", "updateManyAttestation", "upsertAttestation", "aggregateAttestation", "groupByAttestation"],
  AttestationConfidence: ["attestationConfidence", "findFirstAttestationConfidence", "attestationConfidences", "createAttestationConfidence", "createManyAttestationConfidence", "deleteAttestationConfidence", "updateAttestationConfidence", "deleteManyAttestationConfidence", "updateManyAttestationConfidence", "upsertAttestationConfidence", "aggregateAttestationConfidence", "groupByAttestationConfidence"],
  ContributionStatus: ["contributionStatus", "findFirstContributionStatus", "contributionStatuses", "createContributionStatus", "createManyContributionStatus", "deleteContributionStatus", "updateContributionStatus", "deleteManyContributionStatus", "updateManyContributionStatus", "upsertContributionStatus", "aggregateContributionStatus", "groupByContributionStatus"],
  ActivityType: ["activityType", "findFirstActivityType", "activityTypes", "createActivityType", "createManyActivityType", "deleteActivityType", "updateActivityType", "deleteManyActivityType", "updateManyActivityType", "upsertActivityType", "aggregateActivityType", "groupByActivityType"],
  UserActivity: ["userActivity", "findFirstUserActivity", "userActivities", "createUserActivity", "createManyUserActivity", "deleteUserActivity", "updateUserActivity", "deleteManyUserActivity", "updateManyUserActivity", "upsertUserActivity", "aggregateUserActivity", "groupByUserActivity"],
  CategoryActivityType: ["categoryActivityType", "findFirstCategoryActivityType", "categoryActivityTypes", "createCategoryActivityType", "createManyCategoryActivityType", "deleteCategoryActivityType", "updateCategoryActivityType", "deleteManyCategoryActivityType", "updateManyCategoryActivityType", "upsertCategoryActivityType", "aggregateCategoryActivityType", "groupByCategoryActivityType"],
  CategoryActivity: ["categoryActivity", "findFirstCategoryActivity", "categoryActivities", "createCategoryActivity", "createManyCategoryActivity", "deleteCategoryActivity", "updateCategoryActivity", "deleteManyCategoryActivity", "updateManyCategoryActivity", "upsertCategoryActivity", "aggregateCategoryActivity", "groupByCategoryActivity"],
  LinearIssue: ["linearIssue", "findFirstLinearIssue", "linearIssues", "createLinearIssue", "createManyLinearIssue", "deleteLinearIssue", "updateLinearIssue", "deleteManyLinearIssue", "updateManyLinearIssue", "upsertLinearIssue", "aggregateLinearIssue", "groupByLinearIssue"],
  LinearUser: ["linearUser", "findFirstLinearUser", "linearUsers", "createLinearUser", "createManyLinearUser", "deleteLinearUser", "updateLinearUser", "deleteManyLinearUser", "updateManyLinearUser", "upsertLinearUser", "aggregateLinearUser", "groupByLinearUser"],
  LinearCycle: ["linearCycle", "findFirstLinearCycle", "linearCycles", "createLinearCycle", "createManyLinearCycle", "deleteLinearCycle", "updateLinearCycle", "deleteManyLinearCycle", "updateManyLinearCycle", "upsertLinearCycle", "aggregateLinearCycle", "groupByLinearCycle"],
  LinearProject: ["linearProject", "findFirstLinearProject", "linearProjects", "createLinearProject", "createManyLinearProject", "deleteLinearProject", "updateLinearProject", "deleteManyLinearProject", "updateManyLinearProject", "upsertLinearProject", "aggregateLinearProject", "groupByLinearProject"],
  LinearTeam: ["linearTeam", "findFirstLinearTeam", "linearTeams", "createLinearTeam", "createManyLinearTeam", "deleteLinearTeam", "updateLinearTeam", "deleteManyLinearTeam", "updateManyLinearTeam", "upsertLinearTeam", "aggregateLinearTeam", "groupByLinearTeam"],
  JobRun: ["jobRun", "findFirstJobRun", "jobRuns", "createJobRun", "createManyJobRun", "deleteJobRun", "updateJobRun", "deleteManyJobRun", "updateManyJobRun", "upsertJobRun", "aggregateJobRun", "groupByJobRun"],
  TwitterUser: ["twitterUser", "findFirstTwitterUser", "twitterUsers", "createTwitterUser", "createManyTwitterUser", "deleteTwitterUser", "updateTwitterUser", "deleteManyTwitterUser", "updateManyTwitterUser", "upsertTwitterUser", "aggregateTwitterUser", "groupByTwitterUser"],
  TwitterTweet: ["twitterTweet", "findFirstTwitterTweet", "twitterTweets", "createTwitterTweet", "createManyTwitterTweet", "deleteTwitterTweet", "updateTwitterTweet", "deleteManyTwitterTweet", "updateManyTwitterTweet", "upsertTwitterTweet", "aggregateTwitterTweet", "groupByTwitterTweet"],
  TwitterAccount: ["twitterAccount", "findFirstTwitterAccount", "twitterAccounts", "createTwitterAccount", "createManyTwitterAccount", "deleteTwitterAccount", "updateTwitterAccount", "deleteManyTwitterAccount", "updateManyTwitterAccount", "upsertTwitterAccount", "aggregateTwitterAccount", "groupByTwitterAccount"]
};
const argsInfo = {
  FindUniqueUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserArgs: ["data"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  DeleteUserArgs: ["where"],
  UpdateUserArgs: ["data", "where"],
  DeleteManyUserArgs: ["where"],
  UpdateManyUserArgs: ["data", "where"],
  UpsertUserArgs: ["where", "create", "update"],
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueDiscordUserArgs: ["where"],
  FindFirstDiscordUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyDiscordUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateDiscordUserArgs: ["data"],
  CreateManyDiscordUserArgs: ["data", "skipDuplicates"],
  DeleteDiscordUserArgs: ["where"],
  UpdateDiscordUserArgs: ["data", "where"],
  DeleteManyDiscordUserArgs: ["where"],
  UpdateManyDiscordUserArgs: ["data", "where"],
  UpsertDiscordUserArgs: ["where", "create", "update"],
  AggregateDiscordUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByDiscordUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueGuildArgs: ["where"],
  FindFirstGuildArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateGuildArgs: ["data"],
  CreateManyGuildArgs: ["data", "skipDuplicates"],
  DeleteGuildArgs: ["where"],
  UpdateGuildArgs: ["data", "where"],
  DeleteManyGuildArgs: ["where"],
  UpdateManyGuildArgs: ["data", "where"],
  UpsertGuildArgs: ["where", "create", "update"],
  AggregateGuildArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByGuildArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueGuildUserArgs: ["where"],
  FindFirstGuildUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateGuildUserArgs: ["data"],
  CreateManyGuildUserArgs: ["data", "skipDuplicates"],
  DeleteGuildUserArgs: ["where"],
  UpdateGuildUserArgs: ["data", "where"],
  DeleteManyGuildUserArgs: ["where"],
  UpdateManyGuildUserArgs: ["data", "where"],
  UpsertGuildUserArgs: ["where", "create", "update"],
  AggregateGuildUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByGuildUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueGuildContributionArgs: ["where"],
  FindFirstGuildContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateGuildContributionArgs: ["data"],
  CreateManyGuildContributionArgs: ["data", "skipDuplicates"],
  DeleteGuildContributionArgs: ["where"],
  UpdateGuildContributionArgs: ["data", "where"],
  DeleteManyGuildContributionArgs: ["where"],
  UpdateManyGuildContributionArgs: ["data", "where"],
  UpsertGuildContributionArgs: ["where", "create", "update"],
  AggregateGuildContributionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByGuildContributionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueGuildActivityTypeArgs: ["where"],
  FindFirstGuildActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGuildActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateGuildActivityTypeArgs: ["data"],
  CreateManyGuildActivityTypeArgs: ["data", "skipDuplicates"],
  DeleteGuildActivityTypeArgs: ["where"],
  UpdateGuildActivityTypeArgs: ["data", "where"],
  DeleteManyGuildActivityTypeArgs: ["where"],
  UpdateManyGuildActivityTypeArgs: ["data", "where"],
  UpsertGuildActivityTypeArgs: ["where", "create", "update"],
  AggregateGuildActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByGuildActivityTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueChainTypeArgs: ["where"],
  FindFirstChainTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyChainTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateChainTypeArgs: ["data"],
  CreateManyChainTypeArgs: ["data", "skipDuplicates"],
  DeleteChainTypeArgs: ["where"],
  UpdateChainTypeArgs: ["data", "where"],
  DeleteManyChainTypeArgs: ["where"],
  UpdateManyChainTypeArgs: ["data", "where"],
  UpsertChainTypeArgs: ["where", "create", "update"],
  AggregateChainTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByChainTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueContributionArgs: ["where"],
  FindFirstContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyContributionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateContributionArgs: ["data"],
  CreateManyContributionArgs: ["data", "skipDuplicates"],
  DeleteContributionArgs: ["where"],
  UpdateContributionArgs: ["data", "where"],
  DeleteManyContributionArgs: ["where"],
  UpdateManyContributionArgs: ["data", "where"],
  UpsertContributionArgs: ["where", "create", "update"],
  AggregateContributionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByContributionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePartnerArgs: ["where"],
  FindFirstPartnerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPartnerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePartnerArgs: ["data"],
  CreateManyPartnerArgs: ["data", "skipDuplicates"],
  DeletePartnerArgs: ["where"],
  UpdatePartnerArgs: ["data", "where"],
  DeleteManyPartnerArgs: ["where"],
  UpdateManyPartnerArgs: ["data", "where"],
  UpsertPartnerArgs: ["where", "create", "update"],
  AggregatePartnerArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPartnerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAttestationArgs: ["where"],
  FindFirstAttestationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAttestationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAttestationArgs: ["data"],
  CreateManyAttestationArgs: ["data", "skipDuplicates"],
  DeleteAttestationArgs: ["where"],
  UpdateAttestationArgs: ["data", "where"],
  DeleteManyAttestationArgs: ["where"],
  UpdateManyAttestationArgs: ["data", "where"],
  UpsertAttestationArgs: ["where", "create", "update"],
  AggregateAttestationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAttestationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAttestationConfidenceArgs: ["where"],
  FindFirstAttestationConfidenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAttestationConfidenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAttestationConfidenceArgs: ["data"],
  CreateManyAttestationConfidenceArgs: ["data", "skipDuplicates"],
  DeleteAttestationConfidenceArgs: ["where"],
  UpdateAttestationConfidenceArgs: ["data", "where"],
  DeleteManyAttestationConfidenceArgs: ["where"],
  UpdateManyAttestationConfidenceArgs: ["data", "where"],
  UpsertAttestationConfidenceArgs: ["where", "create", "update"],
  AggregateAttestationConfidenceArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAttestationConfidenceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueContributionStatusArgs: ["where"],
  FindFirstContributionStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyContributionStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateContributionStatusArgs: ["data"],
  CreateManyContributionStatusArgs: ["data", "skipDuplicates"],
  DeleteContributionStatusArgs: ["where"],
  UpdateContributionStatusArgs: ["data", "where"],
  DeleteManyContributionStatusArgs: ["where"],
  UpdateManyContributionStatusArgs: ["data", "where"],
  UpsertContributionStatusArgs: ["where", "create", "update"],
  AggregateContributionStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByContributionStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActivityTypeArgs: ["where"],
  FindFirstActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActivityTypeArgs: ["data"],
  CreateManyActivityTypeArgs: ["data", "skipDuplicates"],
  DeleteActivityTypeArgs: ["where"],
  UpdateActivityTypeArgs: ["data", "where"],
  DeleteManyActivityTypeArgs: ["where"],
  UpdateManyActivityTypeArgs: ["data", "where"],
  UpsertActivityTypeArgs: ["where", "create", "update"],
  AggregateActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActivityTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueUserActivityArgs: ["where"],
  FindFirstUserActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserActivityArgs: ["data"],
  CreateManyUserActivityArgs: ["data", "skipDuplicates"],
  DeleteUserActivityArgs: ["where"],
  UpdateUserActivityArgs: ["data", "where"],
  DeleteManyUserActivityArgs: ["where"],
  UpdateManyUserActivityArgs: ["data", "where"],
  UpsertUserActivityArgs: ["where", "create", "update"],
  AggregateUserActivityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserActivityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCategoryActivityTypeArgs: ["where"],
  FindFirstCategoryActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCategoryActivityTypeArgs: ["data"],
  CreateManyCategoryActivityTypeArgs: ["data", "skipDuplicates"],
  DeleteCategoryActivityTypeArgs: ["where"],
  UpdateCategoryActivityTypeArgs: ["data", "where"],
  DeleteManyCategoryActivityTypeArgs: ["where"],
  UpdateManyCategoryActivityTypeArgs: ["data", "where"],
  UpsertCategoryActivityTypeArgs: ["where", "create", "update"],
  AggregateCategoryActivityTypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCategoryActivityTypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueCategoryActivityArgs: ["where"],
  FindFirstCategoryActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryActivityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateCategoryActivityArgs: ["data"],
  CreateManyCategoryActivityArgs: ["data", "skipDuplicates"],
  DeleteCategoryActivityArgs: ["where"],
  UpdateCategoryActivityArgs: ["data", "where"],
  DeleteManyCategoryActivityArgs: ["where"],
  UpdateManyCategoryActivityArgs: ["data", "where"],
  UpsertCategoryActivityArgs: ["where", "create", "update"],
  AggregateCategoryActivityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByCategoryActivityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueLinearIssueArgs: ["where"],
  FindFirstLinearIssueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearIssueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateLinearIssueArgs: ["data"],
  CreateManyLinearIssueArgs: ["data", "skipDuplicates"],
  DeleteLinearIssueArgs: ["where"],
  UpdateLinearIssueArgs: ["data", "where"],
  DeleteManyLinearIssueArgs: ["where"],
  UpdateManyLinearIssueArgs: ["data", "where"],
  UpsertLinearIssueArgs: ["where", "create", "update"],
  AggregateLinearIssueArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByLinearIssueArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueLinearUserArgs: ["where"],
  FindFirstLinearUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateLinearUserArgs: ["data"],
  CreateManyLinearUserArgs: ["data", "skipDuplicates"],
  DeleteLinearUserArgs: ["where"],
  UpdateLinearUserArgs: ["data", "where"],
  DeleteManyLinearUserArgs: ["where"],
  UpdateManyLinearUserArgs: ["data", "where"],
  UpsertLinearUserArgs: ["where", "create", "update"],
  AggregateLinearUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByLinearUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueLinearCycleArgs: ["where"],
  FindFirstLinearCycleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearCycleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateLinearCycleArgs: ["data"],
  CreateManyLinearCycleArgs: ["data", "skipDuplicates"],
  DeleteLinearCycleArgs: ["where"],
  UpdateLinearCycleArgs: ["data", "where"],
  DeleteManyLinearCycleArgs: ["where"],
  UpdateManyLinearCycleArgs: ["data", "where"],
  UpsertLinearCycleArgs: ["where", "create", "update"],
  AggregateLinearCycleArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByLinearCycleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueLinearProjectArgs: ["where"],
  FindFirstLinearProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateLinearProjectArgs: ["data"],
  CreateManyLinearProjectArgs: ["data", "skipDuplicates"],
  DeleteLinearProjectArgs: ["where"],
  UpdateLinearProjectArgs: ["data", "where"],
  DeleteManyLinearProjectArgs: ["where"],
  UpdateManyLinearProjectArgs: ["data", "where"],
  UpsertLinearProjectArgs: ["where", "create", "update"],
  AggregateLinearProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByLinearProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueLinearTeamArgs: ["where"],
  FindFirstLinearTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLinearTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateLinearTeamArgs: ["data"],
  CreateManyLinearTeamArgs: ["data", "skipDuplicates"],
  DeleteLinearTeamArgs: ["where"],
  UpdateLinearTeamArgs: ["data", "where"],
  DeleteManyLinearTeamArgs: ["where"],
  UpdateManyLinearTeamArgs: ["data", "where"],
  UpsertLinearTeamArgs: ["where", "create", "update"],
  AggregateLinearTeamArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByLinearTeamArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueJobRunArgs: ["where"],
  FindFirstJobRunArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyJobRunArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateJobRunArgs: ["data"],
  CreateManyJobRunArgs: ["data", "skipDuplicates"],
  DeleteJobRunArgs: ["where"],
  UpdateJobRunArgs: ["data", "where"],
  DeleteManyJobRunArgs: ["where"],
  UpdateManyJobRunArgs: ["data", "where"],
  UpsertJobRunArgs: ["where", "create", "update"],
  AggregateJobRunArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByJobRunArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTwitterUserArgs: ["where"],
  FindFirstTwitterUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTwitterUserArgs: ["data"],
  CreateManyTwitterUserArgs: ["data", "skipDuplicates"],
  DeleteTwitterUserArgs: ["where"],
  UpdateTwitterUserArgs: ["data", "where"],
  DeleteManyTwitterUserArgs: ["where"],
  UpdateManyTwitterUserArgs: ["data", "where"],
  UpsertTwitterUserArgs: ["where", "create", "update"],
  AggregateTwitterUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTwitterUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTwitterTweetArgs: ["where"],
  FindFirstTwitterTweetArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterTweetArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTwitterTweetArgs: ["data"],
  CreateManyTwitterTweetArgs: ["data", "skipDuplicates"],
  DeleteTwitterTweetArgs: ["where"],
  UpdateTwitterTweetArgs: ["data", "where"],
  DeleteManyTwitterTweetArgs: ["where"],
  UpdateManyTwitterTweetArgs: ["data", "where"],
  UpsertTwitterTweetArgs: ["where", "create", "update"],
  AggregateTwitterTweetArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTwitterTweetArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTwitterAccountArgs: ["where"],
  FindFirstTwitterAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTwitterAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTwitterAccountArgs: ["data"],
  CreateManyTwitterAccountArgs: ["data", "skipDuplicates"],
  DeleteTwitterAccountArgs: ["where"],
  UpdateTwitterAccountArgs: ["data", "where"],
  DeleteManyTwitterAccountArgs: ["where"],
  UpdateManyTwitterAccountArgs: ["data", "where"],
  UpsertTwitterAccountArgs: ["where", "create", "update"],
  AggregateTwitterAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTwitterAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
  > = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
  > = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
  > = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  User: relationResolvers.UserRelationsResolver,
  DiscordUser: relationResolvers.DiscordUserRelationsResolver,
  Guild: relationResolvers.GuildRelationsResolver,
  GuildUser: relationResolvers.GuildUserRelationsResolver,
  GuildContribution: relationResolvers.GuildContributionRelationsResolver,
  GuildActivityType: relationResolvers.GuildActivityTypeRelationsResolver,
  ChainType: relationResolvers.ChainTypeRelationsResolver,
  Contribution: relationResolvers.ContributionRelationsResolver,
  Partner: relationResolvers.PartnerRelationsResolver,
  Attestation: relationResolvers.AttestationRelationsResolver,
  AttestationConfidence: relationResolvers.AttestationConfidenceRelationsResolver,
  ContributionStatus: relationResolvers.ContributionStatusRelationsResolver,
  ActivityType: relationResolvers.ActivityTypeRelationsResolver,
  UserActivity: relationResolvers.UserActivityRelationsResolver,
  CategoryActivityType: relationResolvers.CategoryActivityTypeRelationsResolver,
  CategoryActivity: relationResolvers.CategoryActivityRelationsResolver,
  LinearIssue: relationResolvers.LinearIssueRelationsResolver,
  LinearUser: relationResolvers.LinearUserRelationsResolver,
  LinearCycle: relationResolvers.LinearCycleRelationsResolver,
  LinearProject: relationResolvers.LinearProjectRelationsResolver,
  LinearTeam: relationResolvers.LinearTeamRelationsResolver,
  TwitterUser: relationResolvers.TwitterUserRelationsResolver,
  TwitterTweet: relationResolvers.TwitterTweetRelationsResolver,
  TwitterAccount: relationResolvers.TwitterAccountRelationsResolver
};
const relationResolversInfo = {
  User: ["chain_type", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  DiscordUser: ["user"],
  Guild: ["contributions", "users", "twitter_account", "activity_type"],
  GuildUser: ["user", "guild"],
  GuildContribution: ["guild", "contribution"],
  GuildActivityType: ["guild", "activity_type"],
  ChainType: ["users"],
  Contribution: ["status", "activity_type", "user", "attestations", "partners", "guilds", "linear_issue", "tweet"],
  Partner: ["user", "contribution"],
  Attestation: ["confidence", "user", "contribution"],
  AttestationConfidence: ["attestations"],
  ContributionStatus: ["contributions"],
  ActivityType: ["users", "contributions", "categoryActivity", "guilds"],
  UserActivity: ["user", "activity_type"],
  CategoryActivityType: ["category_activity", "activity_type"],
  CategoryActivity: ["activityTypes"],
  LinearIssue: ["assignee", "creator", "cycle", "project", "team", "contribution"],
  LinearUser: ["user", "assigned_issues", "created_issues"],
  LinearCycle: ["issues"],
  LinearProject: ["issues"],
  LinearTeam: ["issues"],
  TwitterUser: ["user", "tweets"],
  TwitterTweet: ["twitter_user", "contribution"],
  TwitterAccount: ["guild"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
  > = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all"
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  User: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  DiscordUser: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  Guild: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildUser: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildContribution: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildActivityType: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  ChainType: ["id", "createdAt", "updatedAt", "name"],
  Contribution: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  Partner: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  Attestation: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationConfidence: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatus: ["id", "createdAt", "updatedAt", "name"],
  ActivityType: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  UserActivity: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  CategoryActivityType: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivity: ["id", "createdAt", "updatedAt", "name"],
  LinearIssue: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearUser: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearCycle: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearProject: ["id", "name", "linear_id"],
  LinearTeam: ["id", "linear_id", "name", "key"],
  JobRun: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUser: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterTweet: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterAccount: ["id", "createdAt", "updatedAt", "account_name", "guild_id"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateDiscordUser: ["_count", "_avg", "_sum", "_min", "_max"],
  DiscordUserGroupBy: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuild: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildGroupBy: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildUser: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildUserGroupBy: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildContribution: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildContributionGroupBy: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGuildActivityType: ["_count", "_avg", "_sum", "_min", "_max"],
  GuildActivityTypeGroupBy: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateChainType: ["_count", "_avg", "_sum", "_min", "_max"],
  ChainTypeGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateContribution: ["_count", "_avg", "_sum", "_min", "_max"],
  ContributionGroupBy: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregatePartner: ["_count", "_avg", "_sum", "_min", "_max"],
  PartnerGroupBy: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAttestation: ["_count", "_avg", "_sum", "_min", "_max"],
  AttestationGroupBy: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAttestationConfidence: ["_count", "_avg", "_sum", "_min", "_max"],
  AttestationConfidenceGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateContributionStatus: ["_count", "_avg", "_sum", "_min", "_max"],
  ContributionStatusGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateActivityType: ["_count", "_avg", "_sum", "_min", "_max"],
  ActivityTypeGroupBy: ["id", "createdAt", "updatedAt", "name", "active", "default", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateUserActivity: ["_count", "_avg", "_sum", "_min", "_max"],
  UserActivityGroupBy: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCategoryActivityType: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryActivityTypeGroupBy: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCategoryActivity: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryActivityGroupBy: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearIssue: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearIssueGroupBy: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearUser: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearUserGroupBy: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearCycle: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearCycleGroupBy: ["id", "number", "startsAt", "endsAt", "linear_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearProject: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearProjectGroupBy: ["id", "name", "linear_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLinearTeam: ["_count", "_avg", "_sum", "_min", "_max"],
  LinearTeamGroupBy: ["id", "linear_id", "name", "key", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateJobRun: ["_count", "_avg", "_sum", "_min", "_max"],
  JobRunGroupBy: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterUser: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterUserGroupBy: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterTweet: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterTweetGroupBy: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateTwitterAccount: ["_count", "_avg", "_sum", "_min", "_max"],
  TwitterAccountGroupBy: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "_count", "_avg", "_sum", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  UserCount: ["activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "discord_users"],
  UserCountAggregate: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email", "_all"],
  UserAvgAggregate: ["id", "chain_type_id"],
  UserSumAggregate: ["id", "chain_type_id"],
  UserMinAggregate: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserMaxAggregate: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  DiscordUserCountAggregate: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "_all"],
  DiscordUserAvgAggregate: ["id", "user_id"],
  DiscordUserSumAggregate: ["id", "user_id"],
  DiscordUserMinAggregate: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  DiscordUserMaxAggregate: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  GuildCount: ["contributions", "users", "activity_type"],
  GuildCountAggregate: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "_all"],
  GuildAvgAggregate: ["id", "congrats_channel"],
  GuildSumAggregate: ["id", "congrats_channel"],
  GuildMinAggregate: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildMaxAggregate: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildUserCountAggregate: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "_all"],
  GuildUserAvgAggregate: ["id", "user_id", "guild_id"],
  GuildUserSumAggregate: ["id", "user_id", "guild_id"],
  GuildUserMinAggregate: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildUserMaxAggregate: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildContributionCountAggregate: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "_all"],
  GuildContributionAvgAggregate: ["id", "guild_id", "contribution_id"],
  GuildContributionSumAggregate: ["id", "guild_id", "contribution_id"],
  GuildContributionMinAggregate: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildContributionMaxAggregate: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildActivityTypeCountAggregate: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id", "_all"],
  GuildActivityTypeAvgAggregate: ["id", "guild_id", "activity_type_id"],
  GuildActivityTypeSumAggregate: ["id", "guild_id", "activity_type_id"],
  GuildActivityTypeMinAggregate: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeMaxAggregate: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  ChainTypeCount: ["users"],
  ChainTypeCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  ChainTypeAvgAggregate: ["id"],
  ChainTypeSumAggregate: ["id"],
  ChainTypeMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ContributionCount: ["attestations", "partners", "guilds"],
  ContributionCountAggregate: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id", "_all"],
  ContributionAvgAggregate: ["id", "status_id", "activity_type_id", "user_id", "on_chain_id"],
  ContributionSumAggregate: ["id", "status_id", "activity_type_id", "user_id", "on_chain_id"],
  ContributionMinAggregate: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  ContributionMaxAggregate: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  PartnerCountAggregate: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "_all"],
  PartnerAvgAggregate: ["id", "user_id", "contribution_id"],
  PartnerSumAggregate: ["id", "user_id", "contribution_id"],
  PartnerMinAggregate: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerMaxAggregate: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  AttestationCountAggregate: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "_all"],
  AttestationAvgAggregate: ["id", "confidence_id", "user_id", "contribution_id"],
  AttestationSumAggregate: ["id", "confidence_id", "user_id", "contribution_id"],
  AttestationMinAggregate: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationMaxAggregate: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationConfidenceCount: ["attestations"],
  AttestationConfidenceCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  AttestationConfidenceAvgAggregate: ["id"],
  AttestationConfidenceSumAggregate: ["id"],
  AttestationConfidenceMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusCount: ["contributions"],
  ContributionStatusCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  ContributionStatusAvgAggregate: ["id"],
  ContributionStatusSumAggregate: ["id"],
  ContributionStatusMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ActivityTypeCount: ["users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeCountAggregate: ["id", "createdAt", "updatedAt", "name", "active", "default", "_all"],
  ActivityTypeAvgAggregate: ["id"],
  ActivityTypeSumAggregate: ["id"],
  ActivityTypeMinAggregate: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeMaxAggregate: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  UserActivityCountAggregate: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id", "_all"],
  UserActivityAvgAggregate: ["id", "user_id", "activity_type_id"],
  UserActivitySumAggregate: ["id", "user_id", "activity_type_id"],
  UserActivityMinAggregate: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityMaxAggregate: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  CategoryActivityTypeCountAggregate: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id", "_all"],
  CategoryActivityTypeAvgAggregate: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeSumAggregate: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMinAggregate: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMaxAggregate: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityCount: ["activityTypes"],
  CategoryActivityCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  CategoryActivityAvgAggregate: ["id"],
  CategoryActivitySumAggregate: ["id"],
  CategoryActivityMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  LinearIssueCountAggregate: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id", "_all"],
  LinearIssueAvgAggregate: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueSumAggregate: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMinAggregate: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMaxAggregate: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearUserCount: ["assigned_issues", "created_issues"],
  LinearUserCountAggregate: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id", "_all"],
  LinearUserAvgAggregate: ["id", "user_id"],
  LinearUserSumAggregate: ["id", "user_id"],
  LinearUserMinAggregate: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearUserMaxAggregate: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearCycleCount: ["issues"],
  LinearCycleCountAggregate: ["id", "number", "startsAt", "endsAt", "linear_id", "_all"],
  LinearCycleAvgAggregate: ["id", "number"],
  LinearCycleSumAggregate: ["id", "number"],
  LinearCycleMinAggregate: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleMaxAggregate: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearProjectCount: ["issues"],
  LinearProjectCountAggregate: ["id", "name", "linear_id", "_all"],
  LinearProjectAvgAggregate: ["id"],
  LinearProjectSumAggregate: ["id"],
  LinearProjectMinAggregate: ["id", "name", "linear_id"],
  LinearProjectMaxAggregate: ["id", "name", "linear_id"],
  LinearTeamCount: ["issues"],
  LinearTeamCountAggregate: ["id", "linear_id", "name", "key", "_all"],
  LinearTeamAvgAggregate: ["id"],
  LinearTeamSumAggregate: ["id"],
  LinearTeamMinAggregate: ["id", "linear_id", "name", "key"],
  LinearTeamMaxAggregate: ["id", "linear_id", "name", "key"],
  JobRunCountAggregate: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name", "_all"],
  JobRunAvgAggregate: ["id"],
  JobRunSumAggregate: ["id"],
  JobRunMinAggregate: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunMaxAggregate: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUserCount: ["tweets"],
  TwitterUserCountAggregate: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "_all"],
  TwitterUserAvgAggregate: ["id", "user_id"],
  TwitterUserSumAggregate: ["id", "user_id"],
  TwitterUserMinAggregate: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserMaxAggregate: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterTweetCountAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id", "_all"],
  TwitterTweetAvgAggregate: ["id", "twitter_tweet_id", "twitter_user_id", "contribution_id"],
  TwitterTweetSumAggregate: ["id", "twitter_tweet_id", "twitter_user_id", "contribution_id"],
  TwitterTweetMinAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterTweetMaxAggregate: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterAccountCountAggregate: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "_all"],
  TwitterAccountAvgAggregate: ["id", "guild_id"],
  TwitterAccountSumAggregate: ["id", "guild_id"],
  TwitterAccountMinAggregate: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountMaxAggregate: ["id", "createdAt", "updatedAt", "account_name", "guild_id"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
  > = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  UserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserWhereUniqueInput: ["id", "address"],
  UserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email", "_count", "_avg", "_max", "_min", "_sum"],
  UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  DiscordUserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "user"],
  DiscordUserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "user"],
  DiscordUserWhereUniqueInput: ["id", "discord_id"],
  DiscordUserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id", "_count", "_avg", "_max", "_min", "_sum"],
  DiscordUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  GuildWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "twitter_account", "activity_type"],
  GuildOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "twitter_account", "activity_type"],
  GuildWhereUniqueInput: ["id", "discord_id"],
  GuildOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "_count", "_avg", "_max", "_min", "_sum"],
  GuildScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildUserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "user", "guild_id", "guild"],
  GuildUserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "user_id", "user", "guild_id", "guild"],
  GuildUserWhereUniqueInput: ["id", "user_id_guild_id"],
  GuildUserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildContributionWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "guild", "contribution_id", "contribution"],
  GuildContributionOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "guild_id", "guild", "contribution_id", "contribution"],
  GuildContributionWhereUniqueInput: ["id", "guild_id_contribution_id"],
  GuildContributionOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildContributionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildActivityTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "guild", "activity_type_id", "activity_type"],
  GuildActivityTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "guild_id", "guild", "activity_type_id", "activity_type"],
  GuildActivityTypeWhereUniqueInput: ["id", "guild_id_activity_type_id"],
  GuildActivityTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id", "_count", "_avg", "_max", "_min", "_sum"],
  GuildActivityTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  ChainTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "users"],
  ChainTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "users"],
  ChainTypeWhereUniqueInput: ["id", "name"],
  ChainTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  ChainTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  ContributionWhereInput: ["AND", "OR", "NOT", "id", "updatedAt", "name", "status_id", "status", "activity_type_id", "activity_type", "user_id", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionOrderByWithRelationInput: ["id", "updatedAt", "name", "status_id", "status", "activity_type_id", "activity_type", "user_id", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionWhereUniqueInput: ["id", "on_chain_id"],
  ContributionOrderByWithAggregationInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id", "_count", "_avg", "_max", "_min", "_sum"],
  ContributionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  PartnerWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "user", "contribution_id", "contribution"],
  PartnerOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "user_id", "user", "contribution_id", "contribution"],
  PartnerWhereUniqueInput: ["id", "user_id_contribution_id"],
  PartnerOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  PartnerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  AttestationWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "confidence_id", "confidence", "user_id", "user", "contribution_id", "contribution", "date_of_attestation"],
  AttestationOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "confidence_id", "confidence", "user_id", "user", "contribution_id", "contribution", "date_of_attestation"],
  AttestationWhereUniqueInput: ["id", "user_id_contribution_id"],
  AttestationOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation", "_count", "_avg", "_max", "_min", "_sum"],
  AttestationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationConfidenceWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceWhereUniqueInput: ["id", "name"],
  AttestationConfidenceOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  AttestationConfidenceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  ContributionStatusWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusWhereUniqueInput: ["id", "name"],
  ContributionStatusOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  ContributionStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  ActivityTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeWhereUniqueInput: ["id", "name"],
  ActivityTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "active", "default", "_count", "_avg", "_max", "_min", "_sum"],
  ActivityTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "active", "default"],
  UserActivityWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "user", "activity_type_id", "activity_type"],
  UserActivityOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "user_id", "user", "activity_type_id", "activity_type"],
  UserActivityWhereUniqueInput: ["id", "user_id_activity_type_id"],
  UserActivityOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id", "_count", "_avg", "_max", "_min", "_sum"],
  UserActivityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  CategoryActivityTypeWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "category_activity_id", "category_activity", "activity_type_id", "activity_type"],
  CategoryActivityTypeOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "category_activity_id", "category_activity", "activity_type_id", "activity_type"],
  CategoryActivityTypeWhereUniqueInput: ["id", "category_activity_id_activity_type_id"],
  CategoryActivityTypeOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id", "_count", "_avg", "_max", "_min", "_sum"],
  CategoryActivityTypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityWhereUniqueInput: ["id", "name"],
  CategoryActivityOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "_count", "_avg", "_max", "_min", "_sum"],
  CategoryActivityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name"],
  LinearIssueWhereInput: ["AND", "OR", "NOT", "id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "assignee", "creator_id", "creator", "cycle_id", "cycle", "project_id", "project", "team_id", "team", "contribution_id", "contribution"],
  LinearIssueOrderByWithRelationInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "assignee", "creator_id", "creator", "cycle_id", "cycle", "project_id", "project", "team_id", "team", "contribution_id", "contribution"],
  LinearIssueWhereUniqueInput: ["id", "linear_id", "contribution_id"],
  LinearIssueOrderByWithAggregationInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearIssueScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearUserWhereInput: ["AND", "OR", "NOT", "id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id", "user", "assigned_issues", "created_issues"],
  LinearUserOrderByWithRelationInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id", "user", "assigned_issues", "created_issues"],
  LinearUserWhereUniqueInput: ["id", "linear_id"],
  LinearUserOrderByWithAggregationInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearCycleWhereInput: ["AND", "OR", "NOT", "id", "number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleOrderByWithRelationInput: ["id", "number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleWhereUniqueInput: ["id", "linear_id"],
  LinearCycleOrderByWithAggregationInput: ["id", "number", "startsAt", "endsAt", "linear_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearCycleScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "number", "startsAt", "endsAt", "linear_id"],
  LinearProjectWhereInput: ["AND", "OR", "NOT", "id", "name", "linear_id", "issues"],
  LinearProjectOrderByWithRelationInput: ["id", "name", "linear_id", "issues"],
  LinearProjectWhereUniqueInput: ["id", "linear_id"],
  LinearProjectOrderByWithAggregationInput: ["id", "name", "linear_id", "_count", "_avg", "_max", "_min", "_sum"],
  LinearProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "linear_id"],
  LinearTeamWhereInput: ["AND", "OR", "NOT", "id", "linear_id", "name", "key", "issues"],
  LinearTeamOrderByWithRelationInput: ["id", "linear_id", "name", "key", "issues"],
  LinearTeamWhereUniqueInput: ["id", "linear_id"],
  LinearTeamOrderByWithAggregationInput: ["id", "linear_id", "name", "key", "_count", "_avg", "_max", "_min", "_sum"],
  LinearTeamScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "linear_id", "name", "key"],
  JobRunWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunWhereUniqueInput: ["id"],
  JobRunOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name", "_count", "_avg", "_max", "_min", "_sum"],
  JobRunScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "user", "tweets"],
  TwitterUserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "user", "tweets"],
  TwitterUserWhereUniqueInput: ["id", "twitter_user_id", "username", "user_id"],
  TwitterUserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterUserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterTweetWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_user", "contribution_id", "contribution"],
  TwitterTweetOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "twitter_user", "contribution_id", "contribution"],
  TwitterTweetWhereUniqueInput: ["id", "twitter_tweet_id", "contribution_id"],
  TwitterTweetOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterTweetScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterAccountWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "account_name", "guild_id", "guild"],
  TwitterAccountOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "guild"],
  TwitterAccountWhereUniqueInput: ["id", "account_name", "guild_id"],
  TwitterAccountOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id", "_count", "_avg", "_max", "_min", "_sum"],
  TwitterAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "account_name", "guild_id"],
  UserCreateInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserUpdateInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateManyInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email"],
  DiscordUserCreateInput: ["createdAt", "updatedAt", "display_name", "discord_id", "user"],
  DiscordUserUpdateInput: ["createdAt", "updatedAt", "display_name", "discord_id", "user"],
  DiscordUserCreateManyInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  DiscordUserUpdateManyMutationInput: ["createdAt", "updatedAt", "display_name", "discord_id"],
  GuildCreateInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "twitter_account", "activity_type"],
  GuildUpdateInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "twitter_account", "activity_type"],
  GuildCreateManyInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildUpdateManyMutationInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildUserCreateInput: ["createdAt", "updatedAt", "user", "guild"],
  GuildUserUpdateInput: ["createdAt", "updatedAt", "user", "guild"],
  GuildUserCreateManyInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildUserUpdateManyMutationInput: ["createdAt", "updatedAt"],
  GuildContributionCreateInput: ["createdAt", "updatedAt", "guild", "contribution"],
  GuildContributionUpdateInput: ["createdAt", "updatedAt", "guild", "contribution"],
  GuildContributionCreateManyInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildContributionUpdateManyMutationInput: ["createdAt", "updatedAt"],
  GuildActivityTypeCreateInput: ["createdAt", "updatedAt", "guild", "activity_type"],
  GuildActivityTypeUpdateInput: ["createdAt", "updatedAt", "guild", "activity_type"],
  GuildActivityTypeCreateManyInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeUpdateManyMutationInput: ["createdAt", "updatedAt"],
  ChainTypeCreateInput: ["createdAt", "updatedAt", "name", "users"],
  ChainTypeUpdateInput: ["createdAt", "updatedAt", "name", "users"],
  ChainTypeCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  ContributionCreateInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionUpdateInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateManyInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  ContributionUpdateManyMutationInput: ["updatedAt", "name", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  PartnerCreateInput: ["createdAt", "updatedAt", "user", "contribution"],
  PartnerUpdateInput: ["createdAt", "updatedAt", "user", "contribution"],
  PartnerCreateManyInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerUpdateManyMutationInput: ["createdAt", "updatedAt"],
  AttestationCreateInput: ["createdAt", "updatedAt", "confidence", "user", "contribution", "date_of_attestation"],
  AttestationUpdateInput: ["createdAt", "updatedAt", "confidence", "user", "contribution", "date_of_attestation"],
  AttestationCreateManyInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationUpdateManyMutationInput: ["createdAt", "updatedAt", "date_of_attestation"],
  AttestationConfidenceCreateInput: ["createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceUpdateInput: ["createdAt", "updatedAt", "name", "attestations"],
  AttestationConfidenceCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  ContributionStatusCreateInput: ["createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusUpdateInput: ["createdAt", "updatedAt", "name", "contributions"],
  ContributionStatusCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  ActivityTypeCreateInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeUpdateInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity", "guilds"],
  ActivityTypeCreateManyInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "active", "default"],
  UserActivityCreateInput: ["createdAt", "updatedAt", "user", "activity_type"],
  UserActivityUpdateInput: ["createdAt", "updatedAt", "user", "activity_type"],
  UserActivityCreateManyInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityUpdateManyMutationInput: ["createdAt", "updatedAt"],
  CategoryActivityTypeCreateInput: ["createdAt", "updatedAt", "category_activity", "activity_type"],
  CategoryActivityTypeUpdateInput: ["createdAt", "updatedAt", "category_activity", "activity_type"],
  CategoryActivityTypeCreateManyInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeUpdateManyMutationInput: ["createdAt", "updatedAt"],
  CategoryActivityCreateInput: ["createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityUpdateInput: ["createdAt", "updatedAt", "name", "activityTypes"],
  CategoryActivityCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityUpdateManyMutationInput: ["createdAt", "updatedAt", "name"],
  LinearIssueCreateInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueUpdateInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueCreateManyInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpdateManyMutationInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url"],
  LinearUserCreateInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user", "assigned_issues", "created_issues"],
  LinearUserUpdateInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user", "assigned_issues", "created_issues"],
  LinearUserCreateManyInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearUserUpdateManyMutationInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url"],
  LinearCycleCreateInput: ["number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleUpdateInput: ["number", "startsAt", "endsAt", "linear_id", "issues"],
  LinearCycleCreateManyInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleUpdateManyMutationInput: ["number", "startsAt", "endsAt", "linear_id"],
  LinearProjectCreateInput: ["name", "linear_id", "issues"],
  LinearProjectUpdateInput: ["name", "linear_id", "issues"],
  LinearProjectCreateManyInput: ["id", "name", "linear_id"],
  LinearProjectUpdateManyMutationInput: ["name", "linear_id"],
  LinearTeamCreateInput: ["linear_id", "name", "key", "issues"],
  LinearTeamUpdateInput: ["linear_id", "name", "key", "issues"],
  LinearTeamCreateManyInput: ["id", "linear_id", "name", "key"],
  LinearTeamUpdateManyMutationInput: ["linear_id", "name", "key"],
  JobRunCreateInput: ["createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunUpdateInput: ["createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunCreateManyInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunUpdateManyMutationInput: ["createdAt", "updatedAt", "completedDate", "startDate", "name"],
  TwitterUserCreateInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user", "tweets"],
  TwitterUserUpdateInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user", "tweets"],
  TwitterUserCreateManyInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserUpdateManyMutationInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description"],
  TwitterTweetCreateInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user", "contribution"],
  TwitterTweetUpdateInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user", "contribution"],
  TwitterTweetCreateManyInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterTweetUpdateManyMutationInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text"],
  TwitterAccountCreateInput: ["createdAt", "updatedAt", "account_name", "guild"],
  TwitterAccountUpdateInput: ["createdAt", "updatedAt", "account_name", "guild"],
  TwitterAccountCreateManyInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountUpdateManyMutationInput: ["createdAt", "updatedAt", "account_name"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  ChainTypeRelationFilter: ["is", "isNot"],
  BoolFilter: ["equals", "not"],
  UserActivityListRelationFilter: ["every", "some", "none"],
  AttestationListRelationFilter: ["every", "some", "none"],
  PartnerListRelationFilter: ["every", "some", "none"],
  ContributionListRelationFilter: ["every", "some", "none"],
  LinearUserListRelationFilter: ["every", "some", "none"],
  GuildUserListRelationFilter: ["every", "some", "none"],
  TwitterUserRelationFilter: ["is", "isNot"],
  DiscordUserListRelationFilter: ["every", "some", "none"],
  UserActivityOrderByRelationAggregateInput: ["_count"],
  AttestationOrderByRelationAggregateInput: ["_count"],
  PartnerOrderByRelationAggregateInput: ["_count"],
  ContributionOrderByRelationAggregateInput: ["_count"],
  LinearUserOrderByRelationAggregateInput: ["_count"],
  GuildUserOrderByRelationAggregateInput: ["_count"],
  DiscordUserOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserAvgOrderByAggregateInput: ["id", "chain_type_id"],
  UserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  UserSumOrderByAggregateInput: ["id", "chain_type_id"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  UserRelationFilter: ["is", "isNot"],
  DiscordUserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  DiscordUserAvgOrderByAggregateInput: ["id", "user_id"],
  DiscordUserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  DiscordUserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  DiscordUserSumOrderByAggregateInput: ["id", "user_id"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  GuildContributionListRelationFilter: ["every", "some", "none"],
  TwitterAccountRelationFilter: ["is", "isNot"],
  GuildActivityTypeListRelationFilter: ["every", "some", "none"],
  GuildContributionOrderByRelationAggregateInput: ["_count"],
  GuildActivityTypeOrderByRelationAggregateInput: ["_count"],
  GuildCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildAvgOrderByAggregateInput: ["id", "congrats_channel"],
  GuildMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo"],
  GuildSumOrderByAggregateInput: ["id", "congrats_channel"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  GuildRelationFilter: ["is", "isNot"],
  GuildUserUser_idGuild_idCompoundUniqueInput: ["user_id", "guild_id"],
  GuildUserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildUserAvgOrderByAggregateInput: ["id", "user_id", "guild_id"],
  GuildUserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildUserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "guild_id"],
  GuildUserSumOrderByAggregateInput: ["id", "user_id", "guild_id"],
  ContributionRelationFilter: ["is", "isNot"],
  GuildContributionGuild_idContribution_idCompoundUniqueInput: ["guild_id", "contribution_id"],
  GuildContributionCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildContributionAvgOrderByAggregateInput: ["id", "guild_id", "contribution_id"],
  GuildContributionMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildContributionMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildContributionSumOrderByAggregateInput: ["id", "guild_id", "contribution_id"],
  ActivityTypeRelationFilter: ["is", "isNot"],
  GuildActivityTypeGuild_idActivity_type_idCompoundUniqueInput: ["guild_id", "activity_type_id"],
  GuildActivityTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeAvgOrderByAggregateInput: ["id", "guild_id", "activity_type_id"],
  GuildActivityTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  GuildActivityTypeSumOrderByAggregateInput: ["id", "guild_id", "activity_type_id"],
  UserListRelationFilter: ["every", "some", "none"],
  UserOrderByRelationAggregateInput: ["_count"],
  ChainTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeAvgOrderByAggregateInput: ["id"],
  ChainTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ChainTypeSumOrderByAggregateInput: ["id"],
  ContributionStatusRelationFilter: ["is", "isNot"],
  LinearIssueRelationFilter: ["is", "isNot"],
  TwitterTweetRelationFilter: ["is", "isNot"],
  ContributionCountOrderByAggregateInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  ContributionAvgOrderByAggregateInput: ["id", "status_id", "activity_type_id", "user_id", "on_chain_id"],
  ContributionMaxOrderByAggregateInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  ContributionMinOrderByAggregateInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  ContributionSumOrderByAggregateInput: ["id", "status_id", "activity_type_id", "user_id", "on_chain_id"],
  PartnerUser_idContribution_idCompoundUniqueInput: ["user_id", "contribution_id"],
  PartnerCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerAvgOrderByAggregateInput: ["id", "user_id", "contribution_id"],
  PartnerMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  PartnerSumOrderByAggregateInput: ["id", "user_id", "contribution_id"],
  AttestationConfidenceRelationFilter: ["is", "isNot"],
  AttestationUser_idContribution_idCompoundUniqueInput: ["user_id", "contribution_id"],
  AttestationCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationAvgOrderByAggregateInput: ["id", "confidence_id", "user_id", "contribution_id"],
  AttestationMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  AttestationSumOrderByAggregateInput: ["id", "confidence_id", "user_id", "contribution_id"],
  AttestationConfidenceCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceAvgOrderByAggregateInput: ["id"],
  AttestationConfidenceMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  AttestationConfidenceSumOrderByAggregateInput: ["id"],
  ContributionStatusCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusAvgOrderByAggregateInput: ["id"],
  ContributionStatusMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ContributionStatusSumOrderByAggregateInput: ["id"],
  CategoryActivityTypeListRelationFilter: ["every", "some", "none"],
  CategoryActivityTypeOrderByRelationAggregateInput: ["_count"],
  ActivityTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeAvgOrderByAggregateInput: ["id"],
  ActivityTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "active", "default"],
  ActivityTypeSumOrderByAggregateInput: ["id"],
  UserActivityUser_idActivity_type_idCompoundUniqueInput: ["user_id", "activity_type_id"],
  UserActivityCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityAvgOrderByAggregateInput: ["id", "user_id", "activity_type_id"],
  UserActivityMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivityMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  UserActivitySumOrderByAggregateInput: ["id", "user_id", "activity_type_id"],
  CategoryActivityRelationFilter: ["is", "isNot"],
  CategoryActivityTypeCategory_activity_idActivity_type_idCompoundUniqueInput: ["category_activity_id", "activity_type_id"],
  CategoryActivityTypeCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeAvgOrderByAggregateInput: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  CategoryActivityTypeSumOrderByAggregateInput: ["id", "category_activity_id", "activity_type_id"],
  CategoryActivityCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityAvgOrderByAggregateInput: ["id"],
  CategoryActivityMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivityMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryActivitySumOrderByAggregateInput: ["id"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  BoolNullableFilter: ["equals", "not"],
  LinearUserRelationFilter: ["is", "isNot"],
  LinearCycleRelationFilter: ["is", "isNot"],
  LinearProjectRelationFilter: ["is", "isNot"],
  LinearTeamRelationFilter: ["is", "isNot"],
  LinearIssueCountOrderByAggregateInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueAvgOrderByAggregateInput: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMaxOrderByAggregateInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueMinOrderByAggregateInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueSumOrderByAggregateInput: ["id", "boardOrder", "customerTickerCount", "estimate", "priority", "sortOrder", "subIssueSortOrder", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  LinearIssueListRelationFilter: ["every", "some", "none"],
  LinearIssueOrderByRelationAggregateInput: ["_count"],
  LinearUserCountOrderByAggregateInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearUserAvgOrderByAggregateInput: ["id", "user_id"],
  LinearUserMaxOrderByAggregateInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearUserMinOrderByAggregateInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  LinearUserSumOrderByAggregateInput: ["id", "user_id"],
  LinearCycleCountOrderByAggregateInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleAvgOrderByAggregateInput: ["id", "number"],
  LinearCycleMaxOrderByAggregateInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleMinOrderByAggregateInput: ["id", "number", "startsAt", "endsAt", "linear_id"],
  LinearCycleSumOrderByAggregateInput: ["id", "number"],
  LinearProjectCountOrderByAggregateInput: ["id", "name", "linear_id"],
  LinearProjectAvgOrderByAggregateInput: ["id"],
  LinearProjectMaxOrderByAggregateInput: ["id", "name", "linear_id"],
  LinearProjectMinOrderByAggregateInput: ["id", "name", "linear_id"],
  LinearProjectSumOrderByAggregateInput: ["id"],
  LinearTeamCountOrderByAggregateInput: ["id", "linear_id", "name", "key"],
  LinearTeamAvgOrderByAggregateInput: ["id"],
  LinearTeamMaxOrderByAggregateInput: ["id", "linear_id", "name", "key"],
  LinearTeamMinOrderByAggregateInput: ["id", "linear_id", "name", "key"],
  LinearTeamSumOrderByAggregateInput: ["id"],
  JobRunCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunAvgOrderByAggregateInput: ["id"],
  JobRunMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "completedDate", "startDate", "name"],
  JobRunSumOrderByAggregateInput: ["id"],
  TwitterTweetListRelationFilter: ["every", "some", "none"],
  TwitterTweetOrderByRelationAggregateInput: ["_count"],
  TwitterUserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserAvgOrderByAggregateInput: ["id", "user_id"],
  TwitterUserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user_id"],
  TwitterUserSumOrderByAggregateInput: ["id", "user_id"],
  TwitterTweetCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterTweetAvgOrderByAggregateInput: ["id", "twitter_tweet_id", "twitter_user_id", "contribution_id"],
  TwitterTweetMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterTweetMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterTweetSumOrderByAggregateInput: ["id", "twitter_tweet_id", "twitter_user_id", "contribution_id"],
  TwitterAccountCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountAvgOrderByAggregateInput: ["id", "guild_id"],
  TwitterAccountMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "account_name", "guild_id"],
  TwitterAccountSumOrderByAggregateInput: ["id", "guild_id"],
  ChainTypeCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  UserActivityCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  AttestationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  PartnerCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  TwitterUserCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
  DiscordUserCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  StringFieldUpdateOperationsInput: ["set"],
  ChainTypeUpdateOneRequiredWithoutUsersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  BoolFieldUpdateOperationsInput: ["set"],
  UserActivityUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AttestationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PartnerUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearUserUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildUserUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TwitterUserUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  DiscordUserUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  UserCreateNestedOneWithoutDiscord_usersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutDiscord_usersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildContributionCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildUserCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  TwitterAccountCreateNestedOneWithoutGuildInput: ["create", "connectOrCreate", "connect"],
  GuildActivityTypeCreateNestedManyWithoutGuildInput: ["create", "connectOrCreate", "createMany", "connect"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  GuildContributionUpdateManyWithoutGuildInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildUserUpdateManyWithoutGuildInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TwitterAccountUpdateOneWithoutGuildInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  GuildActivityTypeUpdateManyWithoutGuildInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutGuild_usersInput: ["create", "connectOrCreate", "connect"],
  GuildCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutGuild_usersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildUpdateOneRequiredWithoutUsersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutGuildsInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneRequiredWithoutContributionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutGuildsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  GuildCreateNestedOneWithoutActivity_typeInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutGuildsInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneRequiredWithoutActivity_typeInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutGuildsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserCreateNestedManyWithoutChain_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateManyWithoutChain_typeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionStatusCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutContributionsInput: ["create", "connectOrCreate", "connect"],
  AttestationCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  PartnerCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildContributionCreateNestedManyWithoutContributionInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueCreateNestedOneWithoutContributionInput: ["create", "connectOrCreate", "connect"],
  TwitterTweetCreateNestedOneWithoutContributionInput: ["create", "connectOrCreate", "connect"],
  ContributionStatusUpdateOneRequiredWithoutContributionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutContributionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutContributionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AttestationUpdateManyWithoutContributionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PartnerUpdateManyWithoutContributionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildContributionUpdateManyWithoutContributionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueUpdateOneWithoutContributionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TwitterTweetUpdateOneWithoutContributionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutContributionPartnersInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutPartnersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutContributionPartnersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutPartnersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AttestationConfidenceCreateNestedOneWithoutAttestationsInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutAttestationsInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutAttestationsInput: ["create", "connectOrCreate", "connect"],
  AttestationConfidenceUpdateOneRequiredWithoutAttestationsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutAttestationsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ContributionUpdateOneRequiredWithoutAttestationsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AttestationCreateNestedManyWithoutConfidenceInput: ["create", "connectOrCreate", "createMany", "connect"],
  AttestationUpdateManyWithoutConfidenceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionCreateNestedManyWithoutStatusInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionUpdateManyWithoutStatusInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserActivityCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContributionCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  CategoryActivityTypeCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  GuildActivityTypeCreateNestedManyWithoutActivity_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserActivityUpdateManyWithoutActivity_typeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContributionUpdateManyWithoutActivity_typeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CategoryActivityTypeUpdateManyWithoutActivity_typeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GuildActivityTypeUpdateManyWithoutActivity_typeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutActivitiesInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutActivitiesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutUsersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CategoryActivityCreateNestedOneWithoutActivityTypesInput: ["create", "connectOrCreate", "connect"],
  ActivityTypeCreateNestedOneWithoutCategoryActivityInput: ["create", "connectOrCreate", "connect"],
  CategoryActivityUpdateOneRequiredWithoutActivityTypesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ActivityTypeUpdateOneRequiredWithoutCategoryActivityInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CategoryActivityTypeCreateNestedManyWithoutCategory_activityInput: ["create", "connectOrCreate", "createMany", "connect"],
  CategoryActivityTypeUpdateManyWithoutCategory_activityInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearUserCreateNestedOneWithoutAssigned_issuesInput: ["create", "connectOrCreate", "connect"],
  LinearUserCreateNestedOneWithoutCreated_issuesInput: ["create", "connectOrCreate", "connect"],
  LinearCycleCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
  LinearProjectCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
  LinearTeamCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutLinear_issueInput: ["create", "connectOrCreate", "connect"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableBoolFieldUpdateOperationsInput: ["set"],
  LinearUserUpdateOneWithoutAssigned_issuesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearUserUpdateOneWithoutCreated_issuesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearCycleUpdateOneWithoutIssuesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearProjectUpdateOneWithoutIssuesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearTeamUpdateOneWithoutIssuesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  ContributionUpdateOneWithoutLinear_issueInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutLinear_usersInput: ["create", "connectOrCreate", "connect"],
  LinearIssueCreateNestedManyWithoutAssigneeInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueCreateNestedManyWithoutCreatorInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneWithoutLinear_usersInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  LinearIssueUpdateManyWithoutAssigneeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueUpdateManyWithoutCreatorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueCreateNestedManyWithoutCycleInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueUpdateManyWithoutCycleInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueUpdateManyWithoutProjectInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LinearIssueCreateNestedManyWithoutTeamInput: ["create", "connectOrCreate", "createMany", "connect"],
  LinearIssueUpdateManyWithoutTeamInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserCreateNestedOneWithoutTwitter_userInput: ["create", "connectOrCreate", "connect"],
  TwitterTweetCreateNestedManyWithoutTwitter_userInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserUpdateOneWithoutTwitter_userInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TwitterTweetUpdateManyWithoutTwitter_userInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TwitterUserCreateNestedOneWithoutTweetsInput: ["create", "connectOrCreate", "connect"],
  ContributionCreateNestedOneWithoutTweetInput: ["create", "connectOrCreate", "connect"],
  TwitterUserUpdateOneWithoutTweetsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  ContributionUpdateOneWithoutTweetInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  GuildCreateNestedOneWithoutTwitter_accountInput: ["create", "connectOrCreate", "connect"],
  GuildUpdateOneWithoutTwitter_accountInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolNullableFilter: ["equals", "not"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  ChainTypeCreateWithoutUsersInput: ["createdAt", "updatedAt", "name"],
  ChainTypeCreateOrConnectWithoutUsersInput: ["where", "create"],
  UserActivityCreateWithoutUserInput: ["createdAt", "updatedAt", "activity_type"],
  UserActivityCreateOrConnectWithoutUserInput: ["where", "create"],
  UserActivityCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  AttestationCreateWithoutUserInput: ["createdAt", "updatedAt", "confidence", "contribution", "date_of_attestation"],
  AttestationCreateOrConnectWithoutUserInput: ["where", "create"],
  AttestationCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  PartnerCreateWithoutUserInput: ["createdAt", "updatedAt", "contribution"],
  PartnerCreateOrConnectWithoutUserInput: ["where", "create"],
  PartnerCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ContributionCreateWithoutUserInput: ["updatedAt", "name", "status", "activity_type", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutUserInput: ["where", "create"],
  ContributionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  LinearUserCreateWithoutUserInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "assigned_issues", "created_issues"],
  LinearUserCreateOrConnectWithoutUserInput: ["where", "create"],
  LinearUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  GuildUserCreateWithoutUserInput: ["createdAt", "updatedAt", "guild"],
  GuildUserCreateOrConnectWithoutUserInput: ["where", "create"],
  GuildUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  TwitterUserCreateWithoutUserInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "tweets"],
  TwitterUserCreateOrConnectWithoutUserInput: ["where", "create"],
  DiscordUserCreateWithoutUserInput: ["createdAt", "updatedAt", "display_name", "discord_id"],
  DiscordUserCreateOrConnectWithoutUserInput: ["where", "create"],
  DiscordUserCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  ChainTypeUpsertWithoutUsersInput: ["update", "create"],
  ChainTypeUpdateWithoutUsersInput: ["createdAt", "updatedAt", "name"],
  UserActivityUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  UserActivityUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  UserActivityUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  UserActivityScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "activity_type_id"],
  AttestationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  AttestationScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "confidence_id", "user_id", "contribution_id", "date_of_attestation"],
  PartnerUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  PartnerUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  PartnerUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  PartnerScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "contribution_id"],
  ContributionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  ContributionScalarWhereInput: ["AND", "OR", "NOT", "id", "updatedAt", "name", "status_id", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  LinearUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  LinearUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  LinearUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  LinearUserScalarWhereInput: ["AND", "OR", "NOT", "id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user_id"],
  GuildUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  GuildUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  GuildUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  GuildUserScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "user_id", "guild_id"],
  TwitterUserUpsertWithoutUserInput: ["update", "create"],
  TwitterUserUpdateWithoutUserInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "tweets"],
  DiscordUserUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  DiscordUserUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  DiscordUserUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  DiscordUserScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "display_name", "discord_id", "user_id"],
  UserCreateWithoutDiscord_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user"],
  UserCreateOrConnectWithoutDiscord_usersInput: ["where", "create"],
  UserUpsertWithoutDiscord_usersInput: ["update", "create"],
  UserUpdateWithoutDiscord_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user"],
  GuildContributionCreateWithoutGuildInput: ["createdAt", "updatedAt", "contribution"],
  GuildContributionCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildContributionCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  GuildUserCreateWithoutGuildInput: ["createdAt", "updatedAt", "user"],
  GuildUserCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildUserCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  TwitterAccountCreateWithoutGuildInput: ["createdAt", "updatedAt", "account_name"],
  TwitterAccountCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildActivityTypeCreateWithoutGuildInput: ["createdAt", "updatedAt", "activity_type"],
  GuildActivityTypeCreateOrConnectWithoutGuildInput: ["where", "create"],
  GuildActivityTypeCreateManyGuildInputEnvelope: ["data", "skipDuplicates"],
  GuildContributionUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildContributionUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildContributionUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  GuildContributionScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "contribution_id"],
  GuildUserUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildUserUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildUserUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  TwitterAccountUpsertWithoutGuildInput: ["update", "create"],
  TwitterAccountUpdateWithoutGuildInput: ["createdAt", "updatedAt", "account_name"],
  GuildActivityTypeUpsertWithWhereUniqueWithoutGuildInput: ["where", "update", "create"],
  GuildActivityTypeUpdateWithWhereUniqueWithoutGuildInput: ["where", "data"],
  GuildActivityTypeUpdateManyWithWhereWithoutGuildInput: ["where", "data"],
  GuildActivityTypeScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "guild_id", "activity_type_id"],
  UserCreateWithoutGuild_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutGuild_usersInput: ["where", "create"],
  GuildCreateWithoutUsersInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "twitter_account", "activity_type"],
  GuildCreateOrConnectWithoutUsersInput: ["where", "create"],
  UserUpsertWithoutGuild_usersInput: ["update", "create"],
  UserUpdateWithoutGuild_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "twitter_user", "discord_users"],
  GuildUpsertWithoutUsersInput: ["update", "create"],
  GuildUpdateWithoutUsersInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "twitter_account", "activity_type"],
  GuildCreateWithoutContributionsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "users", "twitter_account", "activity_type"],
  GuildCreateOrConnectWithoutContributionsInput: ["where", "create"],
  ContributionCreateWithoutGuildsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutGuildsInput: ["where", "create"],
  GuildUpsertWithoutContributionsInput: ["update", "create"],
  GuildUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "users", "twitter_account", "activity_type"],
  ContributionUpsertWithoutGuildsInput: ["update", "create"],
  ContributionUpdateWithoutGuildsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "linear_issue", "tweet", "on_chain_id"],
  GuildCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "twitter_account"],
  GuildCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  ActivityTypeCreateWithoutGuildsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity"],
  ActivityTypeCreateOrConnectWithoutGuildsInput: ["where", "create"],
  GuildUpsertWithoutActivity_typeInput: ["update", "create"],
  GuildUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "twitter_account"],
  ActivityTypeUpsertWithoutGuildsInput: ["update", "create"],
  ActivityTypeUpdateWithoutGuildsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "categoryActivity"],
  UserCreateWithoutChain_typeInput: ["createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutChain_typeInput: ["where", "create"],
  UserCreateManyChain_typeInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithWhereUniqueWithoutChain_typeInput: ["where", "update", "create"],
  UserUpdateWithWhereUniqueWithoutChain_typeInput: ["where", "data"],
  UserUpdateManyWithWhereWithoutChain_typeInput: ["where", "data"],
  UserScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "display_name", "address", "chain_type_id", "full_name", "active", "email"],
  ContributionStatusCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name"],
  ContributionStatusCreateOrConnectWithoutContributionsInput: ["where", "create"],
  ActivityTypeCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "categoryActivity", "guilds"],
  ActivityTypeCreateOrConnectWithoutContributionsInput: ["where", "create"],
  UserCreateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutContributionsInput: ["where", "create"],
  AttestationCreateWithoutContributionInput: ["createdAt", "updatedAt", "confidence", "user", "date_of_attestation"],
  AttestationCreateOrConnectWithoutContributionInput: ["where", "create"],
  AttestationCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  PartnerCreateWithoutContributionInput: ["createdAt", "updatedAt", "user"],
  PartnerCreateOrConnectWithoutContributionInput: ["where", "create"],
  PartnerCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  GuildContributionCreateWithoutContributionInput: ["createdAt", "updatedAt", "guild"],
  GuildContributionCreateOrConnectWithoutContributionInput: ["where", "create"],
  GuildContributionCreateManyContributionInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueCreateWithoutContributionInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team"],
  LinearIssueCreateOrConnectWithoutContributionInput: ["where", "create"],
  TwitterTweetCreateWithoutContributionInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user"],
  TwitterTweetCreateOrConnectWithoutContributionInput: ["where", "create"],
  ContributionStatusUpsertWithoutContributionsInput: ["update", "create"],
  ContributionStatusUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name"],
  ActivityTypeUpsertWithoutContributionsInput: ["update", "create"],
  ActivityTypeUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "categoryActivity", "guilds"],
  UserUpsertWithoutContributionsInput: ["update", "create"],
  UserUpdateWithoutContributionsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "linear_users", "guild_users", "twitter_user", "discord_users"],
  AttestationUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  PartnerUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  PartnerUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  PartnerUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  GuildContributionUpsertWithWhereUniqueWithoutContributionInput: ["where", "update", "create"],
  GuildContributionUpdateWithWhereUniqueWithoutContributionInput: ["where", "data"],
  GuildContributionUpdateManyWithWhereWithoutContributionInput: ["where", "data"],
  LinearIssueUpsertWithoutContributionInput: ["update", "create"],
  LinearIssueUpdateWithoutContributionInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "team"],
  TwitterTweetUpsertWithoutContributionInput: ["update", "create"],
  TwitterTweetUpdateWithoutContributionInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user"],
  UserCreateWithoutContributionPartnersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutContributionPartnersInput: ["where", "create"],
  ContributionCreateWithoutPartnersInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutPartnersInput: ["where", "create"],
  UserUpsertWithoutContributionPartnersInput: ["update", "create"],
  UserUpdateWithoutContributionPartnersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ContributionUpsertWithoutPartnersInput: ["update", "create"],
  ContributionUpdateWithoutPartnersInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "guilds", "linear_issue", "tweet", "on_chain_id"],
  AttestationConfidenceCreateWithoutAttestationsInput: ["createdAt", "updatedAt", "name"],
  AttestationConfidenceCreateOrConnectWithoutAttestationsInput: ["where", "create"],
  UserCreateWithoutAttestationsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutAttestationsInput: ["where", "create"],
  ContributionCreateWithoutAttestationsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutAttestationsInput: ["where", "create"],
  AttestationConfidenceUpsertWithoutAttestationsInput: ["update", "create"],
  AttestationConfidenceUpdateWithoutAttestationsInput: ["createdAt", "updatedAt", "name"],
  UserUpsertWithoutAttestationsInput: ["update", "create"],
  UserUpdateWithoutAttestationsInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ContributionUpsertWithoutAttestationsInput: ["update", "create"],
  ContributionUpdateWithoutAttestationsInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  AttestationCreateWithoutConfidenceInput: ["createdAt", "updatedAt", "user", "contribution", "date_of_attestation"],
  AttestationCreateOrConnectWithoutConfidenceInput: ["where", "create"],
  AttestationCreateManyConfidenceInputEnvelope: ["data", "skipDuplicates"],
  AttestationUpsertWithWhereUniqueWithoutConfidenceInput: ["where", "update", "create"],
  AttestationUpdateWithWhereUniqueWithoutConfidenceInput: ["where", "data"],
  AttestationUpdateManyWithWhereWithoutConfidenceInput: ["where", "data"],
  ContributionCreateWithoutStatusInput: ["updatedAt", "name", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutStatusInput: ["where", "create"],
  ContributionCreateManyStatusInputEnvelope: ["data", "skipDuplicates"],
  ContributionUpsertWithWhereUniqueWithoutStatusInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutStatusInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutStatusInput: ["where", "data"],
  UserActivityCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "user"],
  UserActivityCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  UserActivityCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  ContributionCreateWithoutActivity_typeInput: ["updatedAt", "name", "status", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  ContributionCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  CategoryActivityTypeCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "category_activity"],
  CategoryActivityTypeCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  CategoryActivityTypeCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  GuildActivityTypeCreateWithoutActivity_typeInput: ["createdAt", "updatedAt", "guild"],
  GuildActivityTypeCreateOrConnectWithoutActivity_typeInput: ["where", "create"],
  GuildActivityTypeCreateManyActivity_typeInputEnvelope: ["data", "skipDuplicates"],
  UserActivityUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  UserActivityUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  UserActivityUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  ContributionUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  ContributionUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  ContributionUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  CategoryActivityTypeUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  CategoryActivityTypeUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  CategoryActivityTypeUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  CategoryActivityTypeScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "category_activity_id", "activity_type_id"],
  GuildActivityTypeUpsertWithWhereUniqueWithoutActivity_typeInput: ["where", "update", "create"],
  GuildActivityTypeUpdateWithWhereUniqueWithoutActivity_typeInput: ["where", "data"],
  GuildActivityTypeUpdateManyWithWhereWithoutActivity_typeInput: ["where", "data"],
  UserCreateWithoutActivitiesInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutActivitiesInput: ["where", "create"],
  ActivityTypeCreateWithoutUsersInput: ["createdAt", "updatedAt", "name", "active", "default", "contributions", "categoryActivity", "guilds"],
  ActivityTypeCreateOrConnectWithoutUsersInput: ["where", "create"],
  UserUpsertWithoutActivitiesInput: ["update", "create"],
  UserUpdateWithoutActivitiesInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  ActivityTypeUpsertWithoutUsersInput: ["update", "create"],
  ActivityTypeUpdateWithoutUsersInput: ["createdAt", "updatedAt", "name", "active", "default", "contributions", "categoryActivity", "guilds"],
  CategoryActivityCreateWithoutActivityTypesInput: ["createdAt", "updatedAt", "name"],
  CategoryActivityCreateOrConnectWithoutActivityTypesInput: ["where", "create"],
  ActivityTypeCreateWithoutCategoryActivityInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "guilds"],
  ActivityTypeCreateOrConnectWithoutCategoryActivityInput: ["where", "create"],
  CategoryActivityUpsertWithoutActivityTypesInput: ["update", "create"],
  CategoryActivityUpdateWithoutActivityTypesInput: ["createdAt", "updatedAt", "name"],
  ActivityTypeUpsertWithoutCategoryActivityInput: ["update", "create"],
  ActivityTypeUpdateWithoutCategoryActivityInput: ["createdAt", "updatedAt", "name", "active", "default", "users", "contributions", "guilds"],
  CategoryActivityTypeCreateWithoutCategory_activityInput: ["createdAt", "updatedAt", "activity_type"],
  CategoryActivityTypeCreateOrConnectWithoutCategory_activityInput: ["where", "create"],
  CategoryActivityTypeCreateManyCategory_activityInputEnvelope: ["data", "skipDuplicates"],
  CategoryActivityTypeUpsertWithWhereUniqueWithoutCategory_activityInput: ["where", "update", "create"],
  CategoryActivityTypeUpdateWithWhereUniqueWithoutCategory_activityInput: ["where", "data"],
  CategoryActivityTypeUpdateManyWithWhereWithoutCategory_activityInput: ["where", "data"],
  LinearUserCreateWithoutAssigned_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user", "created_issues"],
  LinearUserCreateOrConnectWithoutAssigned_issuesInput: ["where", "create"],
  LinearUserCreateWithoutCreated_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user", "assigned_issues"],
  LinearUserCreateOrConnectWithoutCreated_issuesInput: ["where", "create"],
  LinearCycleCreateWithoutIssuesInput: ["number", "startsAt", "endsAt", "linear_id"],
  LinearCycleCreateOrConnectWithoutIssuesInput: ["where", "create"],
  LinearProjectCreateWithoutIssuesInput: ["name", "linear_id"],
  LinearProjectCreateOrConnectWithoutIssuesInput: ["where", "create"],
  LinearTeamCreateWithoutIssuesInput: ["linear_id", "name", "key"],
  LinearTeamCreateOrConnectWithoutIssuesInput: ["where", "create"],
  ContributionCreateWithoutLinear_issueInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "tweet", "on_chain_id"],
  ContributionCreateOrConnectWithoutLinear_issueInput: ["where", "create"],
  LinearUserUpsertWithoutAssigned_issuesInput: ["update", "create"],
  LinearUserUpdateWithoutAssigned_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user", "created_issues"],
  LinearUserUpsertWithoutCreated_issuesInput: ["update", "create"],
  LinearUserUpdateWithoutCreated_issuesInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "user", "assigned_issues"],
  LinearCycleUpsertWithoutIssuesInput: ["update", "create"],
  LinearCycleUpdateWithoutIssuesInput: ["number", "startsAt", "endsAt", "linear_id"],
  LinearProjectUpsertWithoutIssuesInput: ["update", "create"],
  LinearProjectUpdateWithoutIssuesInput: ["name", "linear_id"],
  LinearTeamUpsertWithoutIssuesInput: ["update", "create"],
  LinearTeamUpdateWithoutIssuesInput: ["linear_id", "name", "key"],
  ContributionUpsertWithoutLinear_issueInput: ["update", "create"],
  ContributionUpdateWithoutLinear_issueInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "tweet", "on_chain_id"],
  UserCreateWithoutLinear_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "guild_users", "twitter_user", "discord_users"],
  UserCreateOrConnectWithoutLinear_usersInput: ["where", "create"],
  LinearIssueCreateWithoutAssigneeInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutAssigneeInput: ["where", "create"],
  LinearIssueCreateManyAssigneeInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueCreateWithoutCreatorInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "cycle", "project", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutCreatorInput: ["where", "create"],
  LinearIssueCreateManyCreatorInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutLinear_usersInput: ["update", "create"],
  UserUpdateWithoutLinear_usersInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "guild_users", "twitter_user", "discord_users"],
  LinearIssueUpsertWithWhereUniqueWithoutAssigneeInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutAssigneeInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutAssigneeInput: ["where", "data"],
  LinearIssueScalarWhereInput: ["AND", "OR", "NOT", "id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpsertWithWhereUniqueWithoutCreatorInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutCreatorInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutCreatorInput: ["where", "data"],
  LinearIssueCreateWithoutCycleInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "project", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutCycleInput: ["where", "create"],
  LinearIssueCreateManyCycleInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueUpsertWithWhereUniqueWithoutCycleInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutCycleInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutCycleInput: ["where", "data"],
  LinearIssueCreateWithoutProjectInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "team", "contribution"],
  LinearIssueCreateOrConnectWithoutProjectInput: ["where", "create"],
  LinearIssueCreateManyProjectInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
  LinearIssueCreateWithoutTeamInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "contribution"],
  LinearIssueCreateOrConnectWithoutTeamInput: ["where", "create"],
  LinearIssueCreateManyTeamInputEnvelope: ["data", "skipDuplicates"],
  LinearIssueUpsertWithWhereUniqueWithoutTeamInput: ["where", "update", "create"],
  LinearIssueUpdateWithWhereUniqueWithoutTeamInput: ["where", "data"],
  LinearIssueUpdateManyWithWhereWithoutTeamInput: ["where", "data"],
  UserCreateWithoutTwitter_userInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "discord_users"],
  UserCreateOrConnectWithoutTwitter_userInput: ["where", "create"],
  TwitterTweetCreateWithoutTwitter_userInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "contribution"],
  TwitterTweetCreateOrConnectWithoutTwitter_userInput: ["where", "create"],
  TwitterTweetCreateManyTwitter_userInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutTwitter_userInput: ["update", "create"],
  UserUpdateWithoutTwitter_userInput: ["createdAt", "updatedAt", "name", "display_name", "address", "chain_type", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "discord_users"],
  TwitterTweetUpsertWithWhereUniqueWithoutTwitter_userInput: ["where", "update", "create"],
  TwitterTweetUpdateWithWhereUniqueWithoutTwitter_userInput: ["where", "data"],
  TwitterTweetUpdateManyWithWhereWithoutTwitter_userInput: ["where", "data"],
  TwitterTweetScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "twitter_user_id", "contribution_id"],
  TwitterUserCreateWithoutTweetsInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user"],
  TwitterUserCreateOrConnectWithoutTweetsInput: ["where", "create"],
  ContributionCreateWithoutTweetInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "on_chain_id"],
  ContributionCreateOrConnectWithoutTweetInput: ["where", "create"],
  TwitterUserUpsertWithoutTweetsInput: ["update", "create"],
  TwitterUserUpdateWithoutTweetsInput: ["createdAt", "updatedAt", "twitter_user_id", "name", "username", "description", "user"],
  ContributionUpsertWithoutTweetInput: ["update", "create"],
  ContributionUpdateWithoutTweetInput: ["updatedAt", "name", "status", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "on_chain_id"],
  GuildCreateWithoutTwitter_accountInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "activity_type"],
  GuildCreateOrConnectWithoutTwitter_accountInput: ["where", "create"],
  GuildUpsertWithoutTwitter_accountInput: ["update", "create"],
  GuildUpdateWithoutTwitter_accountInput: ["createdAt", "updatedAt", "discord_id", "name", "congrats_channel", "logo", "contributions", "users", "activity_type"],
  UserActivityCreateManyUserInput: ["id", "createdAt", "updatedAt", "activity_type_id"],
  AttestationCreateManyUserInput: ["id", "createdAt", "updatedAt", "confidence_id", "contribution_id", "date_of_attestation"],
  PartnerCreateManyUserInput: ["id", "createdAt", "updatedAt", "contribution_id"],
  ContributionCreateManyUserInput: ["id", "updatedAt", "name", "status_id", "activity_type_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  LinearUserCreateManyUserInput: ["id", "active", "createdAt", "displayName", "email", "linear_id", "name", "url"],
  GuildUserCreateManyUserInput: ["id", "createdAt", "updatedAt", "guild_id"],
  DiscordUserCreateManyUserInput: ["id", "createdAt", "updatedAt", "display_name", "discord_id"],
  UserActivityUpdateWithoutUserInput: ["createdAt", "updatedAt", "activity_type"],
  AttestationUpdateWithoutUserInput: ["createdAt", "updatedAt", "confidence", "contribution", "date_of_attestation"],
  PartnerUpdateWithoutUserInput: ["createdAt", "updatedAt", "contribution"],
  ContributionUpdateWithoutUserInput: ["updatedAt", "name", "status", "activity_type", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  LinearUserUpdateWithoutUserInput: ["active", "createdAt", "displayName", "email", "linear_id", "name", "url", "assigned_issues", "created_issues"],
  GuildUserUpdateWithoutUserInput: ["createdAt", "updatedAt", "guild"],
  DiscordUserUpdateWithoutUserInput: ["createdAt", "updatedAt", "display_name", "discord_id"],
  GuildContributionCreateManyGuildInput: ["id", "createdAt", "updatedAt", "contribution_id"],
  GuildUserCreateManyGuildInput: ["id", "createdAt", "updatedAt", "user_id"],
  GuildActivityTypeCreateManyGuildInput: ["id", "createdAt", "updatedAt", "activity_type_id"],
  GuildContributionUpdateWithoutGuildInput: ["createdAt", "updatedAt", "contribution"],
  GuildUserUpdateWithoutGuildInput: ["createdAt", "updatedAt", "user"],
  GuildActivityTypeUpdateWithoutGuildInput: ["createdAt", "updatedAt", "activity_type"],
  UserCreateManyChain_typeInput: ["id", "createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email"],
  UserUpdateWithoutChain_typeInput: ["createdAt", "updatedAt", "name", "display_name", "address", "full_name", "active", "email", "activities", "attestations", "contributionPartners", "contributions", "linear_users", "guild_users", "twitter_user", "discord_users"],
  AttestationCreateManyContributionInput: ["id", "createdAt", "updatedAt", "confidence_id", "user_id", "date_of_attestation"],
  PartnerCreateManyContributionInput: ["id", "createdAt", "updatedAt", "user_id"],
  GuildContributionCreateManyContributionInput: ["id", "createdAt", "updatedAt", "guild_id"],
  AttestationUpdateWithoutContributionInput: ["createdAt", "updatedAt", "confidence", "user", "date_of_attestation"],
  PartnerUpdateWithoutContributionInput: ["createdAt", "updatedAt", "user"],
  GuildContributionUpdateWithoutContributionInput: ["createdAt", "updatedAt", "guild"],
  AttestationCreateManyConfidenceInput: ["id", "createdAt", "updatedAt", "user_id", "contribution_id", "date_of_attestation"],
  AttestationUpdateWithoutConfidenceInput: ["createdAt", "updatedAt", "user", "contribution", "date_of_attestation"],
  ContributionCreateManyStatusInput: ["id", "updatedAt", "name", "activity_type_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  ContributionUpdateWithoutStatusInput: ["updatedAt", "name", "activity_type", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  UserActivityCreateManyActivity_typeInput: ["id", "createdAt", "updatedAt", "user_id"],
  ContributionCreateManyActivity_typeInput: ["id", "updatedAt", "name", "status_id", "user_id", "date_of_submission", "date_of_engagement", "details", "proof", "on_chain_id"],
  CategoryActivityTypeCreateManyActivity_typeInput: ["id", "createdAt", "updatedAt", "category_activity_id"],
  GuildActivityTypeCreateManyActivity_typeInput: ["id", "createdAt", "updatedAt", "guild_id"],
  UserActivityUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "user"],
  ContributionUpdateWithoutActivity_typeInput: ["updatedAt", "name", "status", "user", "date_of_submission", "date_of_engagement", "details", "proof", "attestations", "partners", "guilds", "linear_issue", "tweet", "on_chain_id"],
  CategoryActivityTypeUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "category_activity"],
  GuildActivityTypeUpdateWithoutActivity_typeInput: ["createdAt", "updatedAt", "guild"],
  CategoryActivityTypeCreateManyCategory_activityInput: ["id", "createdAt", "updatedAt", "activity_type_id"],
  CategoryActivityTypeUpdateWithoutCategory_activityInput: ["createdAt", "updatedAt", "activity_type"],
  LinearIssueCreateManyAssigneeInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "creator_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueCreateManyCreatorInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "cycle_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpdateWithoutAssigneeInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "creator", "cycle", "project", "team", "contribution"],
  LinearIssueUpdateWithoutCreatorInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "cycle", "project", "team", "contribution"],
  LinearIssueCreateManyCycleInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "project_id", "team_id", "contribution_id"],
  LinearIssueUpdateWithoutCycleInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "project", "team", "contribution"],
  LinearIssueCreateManyProjectInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "team_id", "contribution_id"],
  LinearIssueUpdateWithoutProjectInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "team", "contribution"],
  LinearIssueCreateManyTeamInput: ["id", "archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee_id", "creator_id", "cycle_id", "project_id", "contribution_id"],
  LinearIssueUpdateWithoutTeamInput: ["archivedAt", "autoArchivedAt", "autoClosedAt", "boardOrder", "branchName", "canceledAt", "completedAt", "createdAt", "customerTickerCount", "description", "dueDate", "estimate", "linear_id", "identifier", "priority", "priorityLabel", "snoozedUntilAt", "sortOrder", "startedAt", "subIssueSortOrder", "title", "trashed", "updatedAt", "url", "assignee", "creator", "cycle", "project", "contribution"],
  TwitterTweetCreateManyTwitter_userInput: ["id", "createdAt", "updatedAt", "twitter_tweet_id", "text", "contribution_id"],
  TwitterTweetUpdateWithoutTwitter_userInput: ["createdAt", "updatedAt", "twitter_tweet_id", "text", "contribution"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
  > = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

